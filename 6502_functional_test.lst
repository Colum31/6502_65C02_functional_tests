AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    1
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

6129 lines read, no errors in pass 1.
                        ;
                        ; 6 5 0 2   F U N C T I O N A L   T E S T
                        ;
                        ; Copyright (C) 2012-2020  Klaus Dormann
                        ;
                        ; This program is free software: you can redistribute it and/or modify
                        ; it under the terms of the GNU General Public License as published by
                        ; the Free Software Foundation, either version 3 of the License, or
                        ; (at your option) any later version.
                        ;
                        ; This program is distributed in the hope that it will be useful,
                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        ; GNU General Public License for more details.
                        ;
                        ; You should have received a copy of the GNU General Public License
                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                        
                        
                        ; This program is designed to test all opcodes of a 6502 emulator using all
                        ; addressing modes with focus on propper setting of the processor status
                        ; register bits.
                        ; 
                        ; version 05-jan-2020
                        ; contact info at http://2m5.de or email K@2m5.de
                        ;
                        ; assembled with AS65 written by Frank A. Kingswood
                        ; The assembler as65_142.zip can be obtained from my GitHub repository 
                        ; command line switches: -l -m -s2 -w -h0
                        ;                         |  |  |   |  no page headers in listing
                        ;                         |  |  |   wide listing (133 char/col)
                        ;                         |  |  write intel hex file instead of binary
                        ;                         |  expand macros in listing
                        ;                         generate pass2 listing
                        ;
                        ; No IO - should be run from a monitor with access to registers.
                        ; To run load intel hex image with a load command, than alter PC to 400 hex
                        ; (code_segment) and enter a go command.
                        ; Loop on program counter determines error or successful completion of test.
                        ; Check listing for relevant traps (jump/branch *).
                        ; Please note that in early tests some instructions will have to be used before
                        ; they are actually tested!
                        ;
                        ; RESET, NMI or IRQ should not occur and will be trapped if vectors are enabled.
                        ; Tests documented behavior of the original NMOS 6502 only! No unofficial
                        ; opcodes. Additional opcodes of newer versions of the CPU (65C02, 65816) will
                        ; not be tested. Decimal ops will only be tested with valid BCD operands and
                        ; N V Z flags will be ignored.
                        ;
                        ; Debugging hints:
                        ;     Most of the code is written sequentially. if you hit a trap, check the
                        ;   immediately preceeding code for the instruction to be tested. Results are
                        ;   tested first, flags are checked second by pushing them onto the stack and
                        ;   pulling them to the accumulator after the result was checked. The "real"
                        ;   flags are no longer valid for the tested instruction at this time!
                        ;     If the tested instruction was indexed, the relevant index (X or Y) must
                        ;   also be checked. Opposed to the flags, X and Y registers are still valid.
                        ;
                        ; versions:
                        ;   28-jul-2012  1st version distributed for testing
                        ;   29-jul-2012  fixed references to location 0, now #0
                        ;                added license - GPLv3
                        ;   30-jul-2012  added configuration options
                        ;   01-aug-2012  added trap macro to allow user to change error handling
                        ;   01-dec-2012  fixed trap in branch field must be a branch
                        ;   02-mar-2013  fixed PLA flags not tested
                        ;   19-jul-2013  allowed ROM vectors to be loaded when load_data_direct = 0
                        ;                added test sequence check to detect if tests jump their fence
                        ;   23-jul-2013  added RAM integrity check option
                        ;   16-aug-2013  added error report to standard output option
                        ;   13-dec-2014  added binary/decimal opcode table switch test
                        ;   14-dec-2014  improved relative address test
                        ;   23-aug-2015  added option to disable self modifying tests
                        ;   24-aug-2015  all self modifying immediate opcodes now execute in data RAM
                        ;                added small branch offset pretest
                        ;   21-oct-2015  added option to disable decimal mode ADC & SBC tests
                        ;   04-dec-2017  fixed BRK only tested with interrupts enabled
                        ;                added option to skip the remainder of a failing test
                        ;                in report.i65
                        ;   05-jan-2020  fixed shifts not testing zero result and flag when last 1-bit
                        ;                is shifted out
                        
                        ; C O N F I G U R A T I O N
                        
                        ;ROM_vectors writable (0=no, 1=yes)
                        ;if ROM vectors can not be used interrupts will not be trapped
                        ;as a consequence BRK can not be tested but will be emulated to test RTI
0001 =                  ROM_vectors = 1
                        
                        ;load_data_direct (0=move from code segment, 1=load directly)
                        ;loading directly is preferred but may not be supported by your platform
                        ;0 produces only consecutive object code, 1 is not suitable for a binary image
0001 =                  load_data_direct = 1
                        
                        ;I_flag behavior (0=force enabled, 1=force disabled, 2=prohibit change, 3=allow
                        ;change) 2 requires extra code and is not recommended. SEI & CLI can only be
                        ;tested if you allow changing the interrupt status (I_flag = 3)
0003 =                  I_flag = 3
                        
                        ;configure memory - try to stay away from memory used by the system
                        ;zero_page memory start address, $52 (82) consecutive Bytes required
                        ;                                add 2 if I_flag = 2
                        
                        ; change to zero page start so generated image is exactly 64kiB big
0000 =                  zero_page = $0  
                        
                        ;data_segment memory start address, $7B (123) consecutive Bytes required
0200 =                  data_segment = $200  
                            if (data_segment & $ff) != 0
                                ERROR ERROR ERROR low byte of data_segment MUST be $00 !!
                            endif  
                        
                        ;code_segment memory start address, 13.1kB of consecutive space required
                        ;                                   add 2.5 kB if I_flag = 2
0400 =                  code_segment = $400  
                        
                        ;self modifying code may be disabled to allow running in ROM
                        ;0=part of the code is self modifying and must reside in RAM
                        ;1=tests disabled: branch range
0000 =                  disable_selfmod = 0
                        
                        ;report errors through I/O channel (0=use standard self trap loops, 1=include
                        ;report.i65 as I/O channel, add 3.5 kB)
0000 =                  report = 0
                        
                        ;RAM integrity test option. Checks for undesired RAM writes.
                        ;set lowest non RAM or RAM mirror address page (-1=disable, 0=64k, $40=16k)
                        ;leave disabled if a monitor, OS or background interrupt is allowed to alter RAM
ffff =                  ram_top = -1
                        
                        ;disable test decimal mode ADC & SBC, 0=enable, 1=disable,
                        ;2=disable including decimal flag in processor status
0000 =                  disable_decimal = 0
                        
                                noopt       ;do not take shortcuts
                        
                        ;macros for error & success traps to allow user modification
                        ;example:
                        ;trap    macro
                        ;        jsr my_error_handler
                        ;        endm
                        ;trap_eq macro
                        ;        bne skip\?
                        ;        trap           ;failed equal (zero)
                        ;skip\?
                        ;        endm
                        ;
                        ; my_error_handler should pop the calling address from the stack and report it.
                        ; putting larger portions of code (more than 3 bytes) inside the trap macro
                        ; may lead to branch range problems for some tests.
                        trap    macro
                                jsr sp4_trap_fail 
                                endm
                        trap_eq macro
                                bne skip\?
                                trap           ;failed equal (zero)
                        skip\?
                                endm
                        trap_ne macro
                                beq skip\?
                                trap            ;failed not equal (non zero)
                        skip\?
                                endm
                        trap_cs macro
                                bcc skip\?
                                trap            ;failed carry set
                        skip\?
                                endm
                        trap_cc macro
                                bcs skip\?
                                trap            ;failed carry clear
                        skip\?
                                endm
                        trap_mi macro
                                bpl skip\?
                                trap            ;failed minus (bit 7 set)
                        skip\?
                                endm
                        trap_pl macro
                                bmi skip\?
                                trap            ;failed plus (bit 7 clear)
                        skip\?
                                endm
                        trap_vs macro
                                bvc skip\?
                                trap            ;failed overflow set
                        skip\?
                                endm
                        trap_vc macro
                                bvs skip\?
                                trap            ;failed overflow clear
                        skip\?
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                                jsr sp4_trap_success 
                                endm
                        
                        
0001 =                  carry   equ %00000001   ;flag bits in status
0002 =                  zero    equ %00000010
0004 =                  intdis  equ %00000100
0008 =                  decmode equ %00001000
0010 =                  break   equ %00010000
0020 =                  reserv  equ %00100000
0040 =                  overfl  equ %01000000
0080 =                  minus   equ %10000000
                        
0001 =                  fc      equ carry
0002 =                  fz      equ zero
0003 =                  fzc     equ carry+zero
0040 =                  fv      equ overfl
0042 =                  fvz     equ overfl+zero
0080 =                  fn      equ minus
0081 =                  fnc     equ minus+carry
0082 =                  fnz     equ minus+zero
0083 =                  fnzc    equ minus+zero+carry
00c0 =                  fnv     equ minus+overfl
                        
0030 =                  fao     equ break+reserv    ;bits always on after PHP, BRK
0034 =                  fai     equ fao+intdis      ;+ forced interrupt disable
0038 =                  faod    equ fao+decmode     ;+ ignore decimal
003c =                  faid    equ fai+decmode     ;+ ignore decimal
00ff =                  m8      equ $ff             ;8 bit mask
00fb =                  m8i     equ $ff&~intdis     ;8 bit mask - interrupt disable
                        
                        ;macros to allow masking of status bits.
                        ;masking test of decimal bit
                        ;masking of interrupt enable/disable on load and compare
                        ;masking of always on bits after PHP or BRK (unused & break) on compare
                            if disable_decimal < 2
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8i   ;I_flag is always enabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fai)&m8    ;I_flag is always disabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1|fai)       ;invert expected flags + always on bits + I
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    cmp #(\1|fao)&m8i   ;expected flags + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8    ;expected flags + always on bits
                                    endm
                        eor_flag    macro
                                    eor #\1|fao         ;invert expected flags + always on bits
                                    endm
                                endif
                            else
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8i  ;I_flag is always enabled + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1&m8i|faod)  ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faid)&m8   ;I_flag is always disabled + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1|faid)      ;invert expected flags + always on bits + I
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8i  ;expected flags + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1&m8i|faod)  ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8   ;expected flags + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #\1|faod        ;invert expected flags + always on bits
                                    endm
                                endif
                            endif
                        
                        ;macros to set (register|memory|zeropage) & status
                        set_stat    macro       ;setting flags in the processor status register
                                    load_flag \1
                                    pha         ;use stack to load status
                                    plp
                                    endm
                        
                        set_a       macro       ;precharging accu & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda #\1     ;precharge accu
                                    plp
                                    endm
                        
                        set_x       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldx #\1     ;precharge index x
                                    plp
                                    endm
                        
                        set_y       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldy #\1     ;precharge index y
                                    plp
                                    endm
                        
                        set_ax      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;precharge accu
                                    plp
                                    endm
                        
                        set_ay      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,y    ;precharge accu
                                    plp
                                    endm
                        
                        set_z       macro       ;precharging indexed zp & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to zeropage
                                    sta zpt
                                    plp
                                    endm
                        
                        set_zx      macro       ;precharging zp,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed zeropage
                                    sta zpt,x
                                    plp
                                    endm
                        
                        set_abs     macro       ;precharging indexed memory & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to memory
                                    sta abst
                                    plp
                                    endm
                        
                        set_absx    macro       ;precharging abs,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed memory
                                    sta abst,x
                                    plp
                                    endm
                        
                        ;macros to test (register|memory|zeropage) & status & (mask)
                        tst_stat    macro       ;testing flags in the processor status register
                                    php         ;save status
                                    pla         ;use stack to retrieve status
                                    pha
                                    cmp_flag \1
                                    trap_ne
                                    plp         ;restore status
                                    endm
                                    
                        tst_a       macro       ;testing result in accu & flags
                                    php         ;save flags
                                    cmp #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_x       macro       ;testing result in x index & flags
                                    php         ;save flags
                                    cpx #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_y       macro       ;testing result in y index & flags
                                    php         ;save flags
                                    cpy #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_ax      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne     ;
                                    endm
                        
                        tst_ay      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,y    ;test result
                                    trap_ne     ;
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,y    ;test flags
                                    trap_ne
                                    endm
                                
                        tst_z       macro       ;indexed testing result in zp & flags
                                    php         ;save flags
                                    lda zpt
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_zx      macro       ;testing result in zp,x & flags
                                    php         ;save flags
                                    lda zpt,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_abs     macro       ;indexed testing result in memory & flags
                                    php         ;save flags
                                    lda abst
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_absx    macro       ;testing result in abs,x & flags
                                    php         ;save flags
                                    lda abst,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                                    
                        ; RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                        ;   uses zpt word as indirect pointer, zpt+2 word as checksum
                                if ram_top > -1
                        check_ram   macro 
                                    cld
                                    lda #0
                                    sta zpt         ;set low byte of indirect pointer
                                    sta zpt+3       ;checksum high byte
                                  if disable_selfmod = 0
                                    sta range_adr   ;reset self modifying code
                                  endif
                                    clc
                                    ldx #zp_bss-zero_page ;zeropage - write test area
                        ccs3\?      adc zero_page,x
                                    bcc ccs2\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs2\?      inx
                                    bne ccs3\?
                                    ldx #hi(abs1)   ;set high byte of indirect pointer
                                    stx zpt+1
                                    ldy #lo(abs1)   ;data after write & execute test area
                        ccs5\?      adc (zpt),y
                                    bcc ccs4\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs4\?      iny
                                    bne ccs5\?
                                    inx             ;advance RAM high address
                                    stx zpt+1
                                    cpx #ram_top
                                    bne ccs5\?
                                    sta zpt+2       ;checksum low is
                                    cmp ram_chksm   ;checksum low expected
                                    trap_ne         ;checksum mismatch
                                    lda zpt+3       ;checksum high is
                                    cmp ram_chksm+1 ;checksum high expected
                                    trap_ne         ;checksum mismatch
                                    endm            
                                else
                        check_ram   macro
                                    ;RAM check disabled - RAM size not set
                                    endm
                                endif
                        
                        next_test   macro           ;make sure, tests don't jump the fence
                                    lda test_case   ;previous test
                                    cmp #test_num
                                    trap_ne         ;test is out of sequence
                        test_num = test_num + 1
                                    lda #test_num   ;*** next tests' number
                                    sta test_case
                                    ;check_ram       ;uncomment to find altered RAM after each test
                                    endm
                        
                            if load_data_direct = 1
                                data
                            else
                                bss                 ;uninitialized segment, copy of data at end of code!
                            endif
0000 =                          org zero_page
                        ;break test interrupt save
0000 : 00               irq_a   ds  1               ;a register
0001 : 00               irq_x   ds  1               ;x register
                            if I_flag = 2
                        ;masking for I bit in status
                        flag_I_on   ds  1           ;or mask to load flags   
                        flag_I_off  ds  1           ;and mask to load flags
                            endif
0002 :                  zpt                         ;6 bytes store/modify test area
                        ;add/subtract operand generation and result/flag prediction
0002 : 00               adfc    ds  1               ;carry flag before op
0003 : 00               ad1     ds  1               ;operand 1 - accumulator
0004 : 00               ad2     ds  1               ;operand 2 - memory / immediate
0005 : 00               adrl    ds  1               ;expected result bits 0-7
0006 : 00               adrh    ds  1               ;expected result bit 8 (carry)
0007 : 00               adrf    ds  1               ;expected flags NV0000ZC (only binary mode)
0008 : 00               sb2     ds  1               ;operand 2 complemented for subtract
0009 :                  zp_bss
0009 : 8001             zps     db  $80,1           ;additional shift pattern to test zero result & flag
000b : c3824100         zp1     db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
000f : 7f               zp7f    db  $7f             ;test pattern for compare  
                        ;logical zeropage operands
0010 : 001f7180         zpOR    db  0,$1f,$71,$80   ;test pattern for OR
0014 : 0fff7f80         zpAN    db  $0f,$ff,$7f,$80 ;test pattern for AND
0018 : ff0f8f8f         zpEO    db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
001c : 1802             ind1    dw  abs1            ;indirect pointer to pattern in absolute memory
001e : 1902                     dw  abs1+1
0020 : 1a02                     dw  abs1+2
0022 : 1b02                     dw  abs1+3
0024 : 1c02                     dw  abs7f
0026 : 2001             inw1    dw  abs1-$f8        ;indirect pointer for wrap-test pattern
0028 : 0302             indt    dw  abst            ;indirect pointer to store area in absolute memory
002a : 0402                     dw  abst+1
002c : 0502                     dw  abst+2
002e : 0602                     dw  abst+3
0030 : 0b01             inwt    dw  abst-$f8        ;indirect pointer for wrap-test store
0032 : 5f02             indAN   dw  absAN           ;indirect pointer to AND pattern in absolute memory
0034 : 6002                     dw  absAN+1
0036 : 6102                     dw  absAN+2
0038 : 6202                     dw  absAN+3
003a : 6302             indEO   dw  absEO           ;indirect pointer to EOR pattern in absolute memory
003c : 6402                     dw  absEO+1
003e : 6502                     dw  absEO+2
0040 : 6602                     dw  absEO+3
0042 : 5b02             indOR   dw  absOR           ;indirect pointer to OR pattern in absolute memory
0044 : 5c02                     dw  absOR+1
0046 : 5d02                     dw  absOR+2
0048 : 5e02                     dw  absOR+3
                        ;add/subtract indirect pointers
004a : 0302             adi2    dw  ada2            ;indirect pointer to operand 2 in absolute memory
004c : 0402             sbi2    dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
004e : 0401             adiy2   dw  ada2-$ff        ;with offset for indirect indexed
0050 : 0501             sbiy2   dw  sba2-$ff
0052 :                  zp_bss_end
                           
0200 =                          org data_segment
0200 : 00               test_case   ds  1           ;current test number
0201 : 0000             ram_chksm   ds  2           ;checksum for RAM integrity test
                        ;add/subtract operand copy - abs tests write area
0203 :                  abst                        ;6 bytes store/modify test area
0203 : 00               ada2    ds  1               ;operand 2
0204 : 00               sba2    ds  1               ;operand 2 complemented for subtract
0205 : 00000000                 ds  4               ;fill remaining bytes
0209 :                  data_bss
                            if load_data_direct = 1
0209 : 2900             ex_andi and #0              ;execute immediate opcodes
020b : 60                       rts
020c : 4900             ex_eori eor #0              ;execute immediate opcodes
020e : 60                       rts
020f : 0900             ex_orai ora #0              ;execute immediate opcodes
0211 : 60                       rts
0212 : 6900             ex_adci adc #0              ;execute immediate opcodes
0214 : 60                       rts
0215 : e900             ex_sbci sbc #0              ;execute immediate opcodes
0217 : 60                       rts
                            else
                        ex_andi ds  3
                        ex_eori ds  3
                        ex_orai ds  3
                        ex_adci ds  3
                        ex_sbci ds  3
                            endif
                        ;zps    db  $80,1           ;additional shift patterns test zero result & flag
0218 : c3824100         abs1    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
021c : 7f               abs7f   db  $7f             ;test pattern for compare
                        ;loads
021d : 80800002         fLDx    db  fn,fn,0,fz              ;expected flags for load
                        ;shifts
0221 :                  rASL                                ;expected result ASL & ROL -carry
0221 : 000286048200     rROL    db  0,2,$86,$04,$82,0
0227 : 010387058301     rROLc   db  1,3,$87,$05,$83,1       ;expected result ROL +carry
022d :                  rLSR                                ;expected result LSR & ROR -carry
022d : 400061412000     rROR    db  $40,0,$61,$41,$20,0
0233 : c080e1c1a080     rRORc   db  $c0,$80,$e1,$c1,$a0,$80 ;expected result ROR +carry
0239 :                  fASL                                ;expected flags for shifts
0239 : 030081018002     fROL    db  fzc,0,fnc,fc,fn,fz      ;no carry in
023f : 010081018000     fROLc   db  fc,0,fnc,fc,fn,0        ;carry in 
0245 :                  fLSR 
0245 : 000301000102     fROR    db  0,fzc,fc,0,fc,fz        ;no carry in
024b : 808181808180     fRORc   db  fn,fnc,fnc,fn,fnc,fn    ;carry in
                        ;increments (decrements)
0251 : 7f80ff0001       rINC    db  $7f,$80,$ff,0,1         ;expected result for INC/DEC
0256 : 0080800200       fINC    db  0,fn,fn,fz,0            ;expected flags for INC/DEC
                        ;logical memory operand
025b : 001f7180         absOR   db  0,$1f,$71,$80           ;test pattern for OR
025f : 0fff7f80         absAN   db  $0f,$ff,$7f,$80         ;test pattern for AND
0263 : ff0f8f8f         absEO   db  $ff,$0f,$8f,$8f         ;test pattern for EOR
                        ;logical accu operand
0267 : 00f11f00         absORa  db  0,$f1,$1f,0             ;test pattern for OR
026b : f0ffffff         absANa  db  $f0,$ff,$ff,$ff         ;test pattern for AND
026f : fff0f00f         absEOa  db  $ff,$f0,$f0,$0f         ;test pattern for EOR
                        ;logical results
0273 : 00ff7f80         absrlo  db  0,$ff,$7f,$80
0277 : 02800080         absflo  db  fz,fn,0,fn
027b :                  data_bss_end
                        
                        
                                code
0400 =                          org code_segment
0400 : d8               start   cld
0401 : a2ff                     ldx #$ff
0403 : 9a                       txs
0404 : a900                     lda #0          ;*** test 0 = initialize
0406 : 8d0002                   sta test_case
0000 =                  test_num = 0
                        
                        ;stop interrupts before initializing BSS
                            if I_flag = 1
                                sei
                            endif
                            
                        ;initialize I/O for report channel
                            if report = 1
                                jsr report_init
                            endif
                            
                        ;pretest small branch offset
0409 : a205                     ldx #5
040b : 4c3304                   jmp psb_test
040e :                  psb_bwok
040e : a005                     ldy #5
0410 : d008                     bne psb_forw
                                trap        ;branch should be taken
0412 : 206144          >        jsr sp4_trap_fail 
                        
0415 : 88                       dey         ;forward landing zone
0416 : 88                       dey
0417 : 88                       dey
0418 : 88                       dey
0419 : 88                       dey
041a :                  psb_forw
041a : 88                       dey
041b : 88                       dey
041c : 88                       dey
041d : 88                       dey
041e : 88                       dey
041f : f017                     beq psb_fwok
                                trap        ;forward offset
0421 : 206144          >        jsr sp4_trap_fail 
                        
                        
0424 : ca                       dex         ;backward landing zone
0425 : ca                       dex
0426 : ca                       dex
0427 : ca                       dex
0428 : ca                       dex
0429 :                  psb_back
0429 : ca                       dex
042a : ca                       dex
042b : ca                       dex
042c : ca                       dex
042d : ca                       dex
042e : f0de                     beq psb_bwok
                                trap        ;backward offset
0430 : 206144          >        jsr sp4_trap_fail 
                        
0433 :                  psb_test
0433 : d0f4                     bne psb_back
                                trap        ;branch should be taken
0435 : 206144          >        jsr sp4_trap_fail 
                        
0438 :                  psb_fwok
                                
                        ;initialize BSS segment
                            if load_data_direct != 1
                                ldx #zp_end-zp_init-1
                        ld_zp   lda zp_init,x
                                sta zp_bss,x
                                dex
                                bpl ld_zp
                                ldx #data_end-data_init-1
                        ld_data lda data_init,x
                                sta data_bss,x
                                dex
                                bpl ld_data
                              if ROM_vectors = 1
                                ldx #5
                        ld_vect lda vec_init,x
                                sta vec_bss,x
                                dex
                                bpl ld_vect
                              endif
                            endif
                        
                        ;retain status of interrupt flag
                            if I_flag = 2
                                php
                                pla
                                and #4          ;isolate flag
                                sta flag_I_on   ;or mask
                                eor #lo(~4)     ;reverse
                                sta flag_I_off  ;and mask
                            endif
                                
                        ;generate checksum for RAM integrity test
                            if ram_top > -1
                                lda #0 
                                sta zpt         ;set low byte of indirect pointer
                                sta ram_chksm+1 ;checksum high byte
                              if disable_selfmod = 0
                                sta range_adr   ;reset self modifying code
                              endif
                                clc
                                ldx #zp_bss-zero_page ;zeropage - write test area
                        gcs3    adc zero_page,x
                                bcc gcs2
                                inc ram_chksm+1 ;carry to high byte
                                clc
                        gcs2    inx
                                bne gcs3
                                ldx #hi(abs1)   ;set high byte of indirect pointer
                                stx zpt+1
                                ldy #lo(abs1)   ;data after write & execute test area
                        gcs5    adc (zpt),y
                                bcc gcs4
                                inc ram_chksm+1 ;carry to high byte
                                clc
                        gcs4    iny
                                bne gcs5
                                inx             ;advance RAM high address
                                stx zpt+1
                                cpx #ram_top
                                bne gcs5
                                sta ram_chksm   ;checksum complete
                            endif
                                next_test            
0438 : ad0002          >            lda test_case   ;previous test
043b : c900            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
043d : f003            >        beq skip0006
                       >        trap            ;failed not equal (non zero)
043f : 206144          >        jsr sp4_trap_fail 
                       >
0442 :                 >skip0006
                       >
0001 =                 >test_num = test_num + 1
0442 : a901            >            lda #test_num   ;*** next tests' number
0444 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                            if disable_selfmod = 0
                        ;testing relative addressing with BEQ
0447 : a0fe                     ldy #$fe        ;testing maximum range, not -1/-2 (invalid/self adr)
0449 :                  range_loop
0449 : 88                       dey             ;next relative address
044a : 98                       tya
044b : aa                       tax             ;precharge count to end of loop
044c : 1008                     bpl range_fw    ;calculate relative address
044e : 18                       clc             ;avoid branch self or to relative address of branch
044f : 6902                     adc #2
0451 : ea                       nop             ;offset landing zone - tolerate +/-5 offset to branch
0452 : ea                       nop
0453 : ea                       nop
0454 : ea                       nop
0455 : ea                       nop
0456 :                  range_fw
0456 : ea                       nop
0457 : ea                       nop
0458 : ea                       nop
0459 : ea                       nop
045a : ea                       nop
045b : 497f                     eor #$7f        ;complement except sign
045d : 8de904                   sta range_adr   ;load into test target
0460 : a900                     lda #0          ;should set zero flag in status register
0462 : 4ce804                   jmp range_op
                                
0465 : ca                       dex             ; offset landing zone - backward branch too far
0466 : ca                       dex
0467 : ca                       dex
0468 : ca                       dex
0469 : ca                       dex
                                ;relative address target field with branch under test in the middle
046a : ca                       dex             ;-128 - max backward
046b : ca                       dex
046c : ca                       dex
046d : ca                       dex
046e : ca                       dex
046f : ca                       dex
0470 : ca                       dex
0471 : ca                       dex
0472 : ca                       dex             ;-120
0473 : ca                       dex
0474 : ca                       dex
0475 : ca                       dex
0476 : ca                       dex
0477 : ca                       dex
0478 : ca                       dex
0479 : ca                       dex
047a : ca                       dex
047b : ca                       dex
047c : ca                       dex             ;-110
047d : ca                       dex
047e : ca                       dex
047f : ca                       dex
0480 : ca                       dex
0481 : ca                       dex
0482 : ca                       dex
0483 : ca                       dex
0484 : ca                       dex
0485 : ca                       dex
0486 : ca                       dex             ;-100
0487 : ca                       dex
0488 : ca                       dex
0489 : ca                       dex
048a : ca                       dex
048b : ca                       dex
048c : ca                       dex
048d : ca                       dex
048e : ca                       dex
048f : ca                       dex
0490 : ca                       dex             ;-90
0491 : ca                       dex
0492 : ca                       dex
0493 : ca                       dex
0494 : ca                       dex
0495 : ca                       dex
0496 : ca                       dex
0497 : ca                       dex
0498 : ca                       dex
0499 : ca                       dex
049a : ca                       dex             ;-80
049b : ca                       dex
049c : ca                       dex
049d : ca                       dex
049e : ca                       dex
049f : ca                       dex
04a0 : ca                       dex
04a1 : ca                       dex
04a2 : ca                       dex
04a3 : ca                       dex
04a4 : ca                       dex             ;-70
04a5 : ca                       dex
04a6 : ca                       dex
04a7 : ca                       dex
04a8 : ca                       dex
04a9 : ca                       dex
04aa : ca                       dex
04ab : ca                       dex
04ac : ca                       dex
04ad : ca                       dex
04ae : ca                       dex             ;-60
04af : ca                       dex
04b0 : ca                       dex
04b1 : ca                       dex
04b2 : ca                       dex
04b3 : ca                       dex
04b4 : ca                       dex
04b5 : ca                       dex
04b6 : ca                       dex
04b7 : ca                       dex
04b8 : ca                       dex             ;-50
04b9 : ca                       dex
04ba : ca                       dex
04bb : ca                       dex
04bc : ca                       dex
04bd : ca                       dex
04be : ca                       dex
04bf : ca                       dex
04c0 : ca                       dex
04c1 : ca                       dex
04c2 : ca                       dex             ;-40
04c3 : ca                       dex
04c4 : ca                       dex
04c5 : ca                       dex
04c6 : ca                       dex
04c7 : ca                       dex
04c8 : ca                       dex
04c9 : ca                       dex
04ca : ca                       dex
04cb : ca                       dex
04cc : ca                       dex             ;-30
04cd : ca                       dex
04ce : ca                       dex
04cf : ca                       dex
04d0 : ca                       dex
04d1 : ca                       dex
04d2 : ca                       dex
04d3 : ca                       dex
04d4 : ca                       dex
04d5 : ca                       dex
04d6 : ca                       dex             ;-20
04d7 : ca                       dex
04d8 : ca                       dex
04d9 : ca                       dex
04da : ca                       dex
04db : ca                       dex
04dc : ca                       dex
04dd : ca                       dex
04de : ca                       dex
04df : ca                       dex
04e0 : ca                       dex             ;-10
04e1 : ca                       dex
04e2 : ca                       dex
04e3 : ca                       dex
04e4 : ca                       dex
04e5 : ca                       dex
04e6 : ca                       dex
04e7 : ca                       dex             ;-3
04e8 :                  range_op                ;test target with zero flag=0, z=1 if previous dex
04e9 =                  range_adr   = *+1       ;modifiable relative address
04e8 : f03e                     beq *+64        ;+64 if called without modification
04ea : ca                       dex             ;+0
04eb : ca                       dex
04ec : ca                       dex
04ed : ca                       dex
04ee : ca                       dex
04ef : ca                       dex
04f0 : ca                       dex
04f1 : ca                       dex
04f2 : ca                       dex
04f3 : ca                       dex
04f4 : ca                       dex             ;+10
04f5 : ca                       dex
04f6 : ca                       dex
04f7 : ca                       dex
04f8 : ca                       dex
04f9 : ca                       dex
04fa : ca                       dex
04fb : ca                       dex
04fc : ca                       dex
04fd : ca                       dex
04fe : ca                       dex             ;+20
04ff : ca                       dex
0500 : ca                       dex
0501 : ca                       dex
0502 : ca                       dex
0503 : ca                       dex
0504 : ca                       dex
0505 : ca                       dex
0506 : ca                       dex
0507 : ca                       dex
0508 : ca                       dex             ;+30
0509 : ca                       dex
050a : ca                       dex
050b : ca                       dex
050c : ca                       dex
050d : ca                       dex
050e : ca                       dex
050f : ca                       dex
0510 : ca                       dex
0511 : ca                       dex
0512 : ca                       dex             ;+40
0513 : ca                       dex
0514 : ca                       dex
0515 : ca                       dex
0516 : ca                       dex
0517 : ca                       dex
0518 : ca                       dex
0519 : ca                       dex
051a : ca                       dex
051b : ca                       dex
051c : ca                       dex             ;+50
051d : ca                       dex
051e : ca                       dex
051f : ca                       dex
0520 : ca                       dex
0521 : ca                       dex
0522 : ca                       dex
0523 : ca                       dex
0524 : ca                       dex
0525 : ca                       dex
0526 : ca                       dex             ;+60
0527 : ca                       dex
0528 : ca                       dex
0529 : ca                       dex
052a : ca                       dex
052b : ca                       dex
052c : ca                       dex
052d : ca                       dex
052e : ca                       dex
052f : ca                       dex
0530 : ca                       dex             ;+70
0531 : ca                       dex
0532 : ca                       dex
0533 : ca                       dex
0534 : ca                       dex
0535 : ca                       dex
0536 : ca                       dex
0537 : ca                       dex
0538 : ca                       dex
0539 : ca                       dex
053a : ca                       dex             ;+80
053b : ca                       dex
053c : ca                       dex
053d : ca                       dex
053e : ca                       dex
053f : ca                       dex
0540 : ca                       dex
0541 : ca                       dex
0542 : ca                       dex
0543 : ca                       dex
0544 : ca                       dex             ;+90
0545 : ca                       dex
0546 : ca                       dex
0547 : ca                       dex
0548 : ca                       dex
0549 : ca                       dex
054a : ca                       dex
054b : ca                       dex
054c : ca                       dex
054d : ca                       dex
054e : ca                       dex             ;+100
054f : ca                       dex
0550 : ca                       dex
0551 : ca                       dex
0552 : ca                       dex
0553 : ca                       dex
0554 : ca                       dex
0555 : ca                       dex
0556 : ca                       dex
0557 : ca                       dex
0558 : ca                       dex             ;+110
0559 : ca                       dex
055a : ca                       dex
055b : ca                       dex
055c : ca                       dex
055d : ca                       dex
055e : ca                       dex
055f : ca                       dex
0560 : ca                       dex
0561 : ca                       dex
0562 : ca                       dex             ;+120
0563 : ca                       dex
0564 : ca                       dex
0565 : ca                       dex
0566 : ca                       dex
0567 : ca                       dex
0568 : ca                       dex
0569 : ea                       nop             ;offset landing zone - forward branch too far
056a : ea                       nop
056b : ea                       nop
056c : ea                       nop
056d : ea                       nop
056e : f008                     beq range_ok    ;+127 - max forward
                                trap            ; bad range
0570 : 206144          >        jsr sp4_trap_fail 
                        
0573 : ea                       nop             ;offset landing zone - tolerate +/-5 offset to branch
0574 : ea                       nop
0575 : ea                       nop
0576 : ea                       nop
0577 : ea                       nop
0578 :                  range_ok
0578 : ea                       nop
0579 : ea                       nop
057a : ea                       nop
057b : ea                       nop
057c : ea                       nop
057d : c000                     cpy #0
057f : f003                     beq range_end   
0581 : 4c4904                   jmp range_loop
0584 :                  range_end               ;range test successful
                            endif
                                next_test
0584 : ad0002          >            lda test_case   ;previous test
0587 : c901            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0589 : f003            >        beq skip0010
                       >        trap            ;failed not equal (non zero)
058b : 206144          >        jsr sp4_trap_fail 
                       >
058e :                 >skip0010
                       >
0002 =                 >test_num = test_num + 1
058e : a902            >            lda #test_num   ;*** next tests' number
0590 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ;partial test BNE & CMP, CPX, CPY immediate
0593 : c001                     cpy #1          ;testing BNE true
0595 : d003                     bne test_bne
                                trap 
0597 : 206144          >        jsr sp4_trap_fail 
                        
059a :                  test_bne
059a : a900                     lda #0 
059c : c900                     cmp #0          ;test compare immediate 
                                trap_ne
059e : f003            >        beq skip0013
                       >        trap            ;failed not equal (non zero)
05a0 : 206144          >        jsr sp4_trap_fail 
                       >
05a3 :                 >skip0013
                        
                                trap_cc
05a3 : b003            >        bcs skip0015
                       >        trap            ;failed carry clear
05a5 : 206144          >        jsr sp4_trap_fail 
                       >
05a8 :                 >skip0015
                        
                                trap_mi
05a8 : 1003            >        bpl skip0017
                       >        trap            ;failed minus (bit 7 set)
05aa : 206144          >        jsr sp4_trap_fail 
                       >
05ad :                 >skip0017
                        
05ad : c901                     cmp #1
                                trap_eq 
05af : d003            >        bne skip0019
                       >        trap           ;failed equal (zero)
05b1 : 206144          >        jsr sp4_trap_fail 
                       >
05b4 :                 >skip0019
                        
                                trap_cs
05b4 : 9003            >        bcc skip0021
                       >        trap            ;failed carry set
05b6 : 206144          >        jsr sp4_trap_fail 
                       >
05b9 :                 >skip0021
                        
                                trap_pl
05b9 : 3003            >        bmi skip0023
                       >        trap            ;failed plus (bit 7 clear)
05bb : 206144          >        jsr sp4_trap_fail 
                       >
05be :                 >skip0023
                        
05be : aa                       tax 
05bf : e000                     cpx #0          ;test compare x immediate
                                trap_ne
05c1 : f003            >        beq skip0025
                       >        trap            ;failed not equal (non zero)
05c3 : 206144          >        jsr sp4_trap_fail 
                       >
05c6 :                 >skip0025
                        
                                trap_cc
05c6 : b003            >        bcs skip0027
                       >        trap            ;failed carry clear
05c8 : 206144          >        jsr sp4_trap_fail 
                       >
05cb :                 >skip0027
                        
                                trap_mi
05cb : 1003            >        bpl skip0029
                       >        trap            ;failed minus (bit 7 set)
05cd : 206144          >        jsr sp4_trap_fail 
                       >
05d0 :                 >skip0029
                        
05d0 : e001                     cpx #1
                                trap_eq 
05d2 : d003            >        bne skip0031
                       >        trap           ;failed equal (zero)
05d4 : 206144          >        jsr sp4_trap_fail 
                       >
05d7 :                 >skip0031
                        
                                trap_cs
05d7 : 9003            >        bcc skip0033
                       >        trap            ;failed carry set
05d9 : 206144          >        jsr sp4_trap_fail 
                       >
05dc :                 >skip0033
                        
                                trap_pl
05dc : 3003            >        bmi skip0035
                       >        trap            ;failed plus (bit 7 clear)
05de : 206144          >        jsr sp4_trap_fail 
                       >
05e1 :                 >skip0035
                        
05e1 : a8                       tay 
05e2 : c000                     cpy #0          ;test compare y immediate
                                trap_ne
05e4 : f003            >        beq skip0037
                       >        trap            ;failed not equal (non zero)
05e6 : 206144          >        jsr sp4_trap_fail 
                       >
05e9 :                 >skip0037
                        
                                trap_cc
05e9 : b003            >        bcs skip0039
                       >        trap            ;failed carry clear
05eb : 206144          >        jsr sp4_trap_fail 
                       >
05ee :                 >skip0039
                        
                                trap_mi
05ee : 1003            >        bpl skip0041
                       >        trap            ;failed minus (bit 7 set)
05f0 : 206144          >        jsr sp4_trap_fail 
                       >
05f3 :                 >skip0041
                        
05f3 : c001                     cpy #1
                                trap_eq 
05f5 : d003            >        bne skip0043
                       >        trap           ;failed equal (zero)
05f7 : 206144          >        jsr sp4_trap_fail 
                       >
05fa :                 >skip0043
                        
                                trap_cs
05fa : 9003            >        bcc skip0045
                       >        trap            ;failed carry set
05fc : 206144          >        jsr sp4_trap_fail 
                       >
05ff :                 >skip0045
                        
                                trap_pl
05ff : 3003            >        bmi skip0047
                       >        trap            ;failed plus (bit 7 clear)
0601 : 206144          >        jsr sp4_trap_fail 
                       >
0604 :                 >skip0047
                        
                                next_test
0604 : ad0002          >            lda test_case   ;previous test
0607 : c902            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0609 : f003            >        beq skip0050
                       >        trap            ;failed not equal (non zero)
060b : 206144          >        jsr sp4_trap_fail 
                       >
060e :                 >skip0050
                       >
0003 =                 >test_num = test_num + 1
060e : a903            >            lda #test_num   ;*** next tests' number
0610 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        ;testing stack operations PHA PHP PLA PLP
                                    
0613 : a2ff                     ldx #$ff        ;initialize stack
0615 : 9a                       txs
0616 : a955                     lda #$55
0618 : 48                       pha
0619 : a9aa                     lda #$aa
061b : 48                       pha
061c : cdfe01                   cmp $1fe        ;on stack ?
                                trap_ne
061f : f003            >        beq skip0052
                       >        trap            ;failed not equal (non zero)
0621 : 206144          >        jsr sp4_trap_fail 
                       >
0624 :                 >skip0052
                        
0624 : ba                       tsx
0625 : 8a                       txa             ;overwrite accu
0626 : c9fd                     cmp #$fd        ;sp decremented?
                                trap_ne
0628 : f003            >        beq skip0054
                       >        trap            ;failed not equal (non zero)
062a : 206144          >        jsr sp4_trap_fail 
                       >
062d :                 >skip0054
                        
062d : 68                       pla
062e : c9aa                     cmp #$aa        ;successful retreived from stack?
                                trap_ne
0630 : f003            >        beq skip0056
                       >        trap            ;failed not equal (non zero)
0632 : 206144          >        jsr sp4_trap_fail 
                       >
0635 :                 >skip0056
                        
0635 : 68                       pla
0636 : c955                     cmp #$55
                                trap_ne
0638 : f003            >        beq skip0058
                       >        trap            ;failed not equal (non zero)
063a : 206144          >        jsr sp4_trap_fail 
                       >
063d :                 >skip0058
                        
063d : cdff01                   cmp $1ff        ;remains on stack?
                                trap_ne
0640 : f003            >        beq skip0060
                       >        trap            ;failed not equal (non zero)
0642 : 206144          >        jsr sp4_trap_fail 
                       >
0645 :                 >skip0060
                        
0645 : ba                       tsx
0646 : e0ff                     cpx #$ff        ;sp incremented?
                                trap_ne
0648 : f003            >        beq skip0062
                       >        trap            ;failed not equal (non zero)
064a : 206144          >        jsr sp4_trap_fail 
                       >
064d :                 >skip0062
                        
                                next_test
064d : ad0002          >            lda test_case   ;previous test
0650 : c903            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0652 : f003            >        beq skip0065
                       >        trap            ;failed not equal (non zero)
0654 : 206144          >        jsr sp4_trap_fail 
                       >
0657 :                 >skip0065
                       >
0004 =                 >test_num = test_num + 1
0657 : a904            >            lda #test_num   ;*** next tests' number
0659 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ;testing branch decisions BPL BMI BVC BVS BCC BCS BNE BEQ
                                set_stat $ff    ;all on
                       >            load_flag $ff    
065c : a9ff            >            lda #$ff                 ;allow test to change I-flag (no mask)
                       >
065e : 48              >            pha         ;use stack to load status
065f : 28              >            plp
                        
0660 : 101a                     bpl nbr1        ;branches should not be taken
0662 : 501b                     bvc nbr2
0664 : 901c                     bcc nbr3
0666 : d01d                     bne nbr4
0668 : 3003                     bmi br1         ;branches should be taken
                                trap 
066a : 206144          >        jsr sp4_trap_fail 
                        
066d : 7003             br1     bvs br2
                                trap 
066f : 206144          >        jsr sp4_trap_fail 
                        
0672 : b003             br2     bcs br3
                                trap 
0674 : 206144          >        jsr sp4_trap_fail 
                        
0677 : f00f             br3     beq br4
                                trap 
0679 : 206144          >        jsr sp4_trap_fail 
                        
067c :                  nbr1
                                trap            ;previous bpl taken 
067c : 206144          >        jsr sp4_trap_fail 
                        
067f :                  nbr2
                                trap            ;previous bvc taken
067f : 206144          >        jsr sp4_trap_fail 
                        
0682 :                  nbr3
                                trap            ;previous bcc taken
0682 : 206144          >        jsr sp4_trap_fail 
                        
0685 :                  nbr4
                                trap            ;previous bne taken
0685 : 206144          >        jsr sp4_trap_fail 
                        
0688 : 08               br4     php
0689 : ba                       tsx
068a : e0fe                     cpx #$fe        ;sp after php?
                                trap_ne
068c : f003            >        beq skip0077
                       >        trap            ;failed not equal (non zero)
068e : 206144          >        jsr sp4_trap_fail 
                       >
0691 :                 >skip0077
                        
0691 : 68                       pla
                                cmp_flag $ff    ;returned all flags on?
0692 : c9ff            >            cmp #($ff    |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
0694 : f003            >        beq skip0080
                       >        trap            ;failed not equal (non zero)
0696 : 206144          >        jsr sp4_trap_fail 
                       >
0699 :                 >skip0080
                        
0699 : ba                       tsx
069a : e0ff                     cpx #$ff        ;sp after php?
                                trap_ne
069c : f003            >        beq skip0082
                       >        trap            ;failed not equal (non zero)
069e : 206144          >        jsr sp4_trap_fail 
                       >
06a1 :                 >skip0082
                        
                                set_stat 0      ;all off
                       >            load_flag 0      
06a1 : a900            >            lda #0                   ;allow test to change I-flag (no mask)
                       >
06a3 : 48              >            pha         ;use stack to load status
06a4 : 28              >            plp
                        
06a5 : 301a                     bmi nbr11       ;branches should not be taken
06a7 : 701b                     bvs nbr12
06a9 : b01c                     bcs nbr13
06ab : f01d                     beq nbr14
06ad : 1003                     bpl br11        ;branches should be taken
                                trap 
06af : 206144          >        jsr sp4_trap_fail 
                        
06b2 : 5003             br11    bvc br12
                                trap 
06b4 : 206144          >        jsr sp4_trap_fail 
                        
06b7 : 9003             br12    bcc br13
                                trap 
06b9 : 206144          >        jsr sp4_trap_fail 
                        
06bc : d00f             br13    bne br14
                                trap 
06be : 206144          >        jsr sp4_trap_fail 
                        
06c1 :                  nbr11
                                trap            ;previous bmi taken 
06c1 : 206144          >        jsr sp4_trap_fail 
                        
06c4 :                  nbr12
                                trap            ;previous bvs taken 
06c4 : 206144          >        jsr sp4_trap_fail 
                        
06c7 :                  nbr13
                                trap            ;previous bcs taken 
06c7 : 206144          >        jsr sp4_trap_fail 
                        
06ca :                  nbr14
                                trap            ;previous beq taken 
06ca : 206144          >        jsr sp4_trap_fail 
                        
06cd : 08               br14    php
06ce : 68                       pla
                                cmp_flag 0      ;flags off except break (pushed by sw) + reserved?
06cf : c930            >            cmp #(0      |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
06d1 : f003            >        beq skip0095
                       >        trap            ;failed not equal (non zero)
06d3 : 206144          >        jsr sp4_trap_fail 
                       >
06d6 :                 >skip0095
                        
                                ;crosscheck flags
                                set_stat zero
                       >            load_flag zero
06d6 : a902            >            lda #zero             ;allow test to change I-flag (no mask)
                       >
06d8 : 48              >            pha         ;use stack to load status
06d9 : 28              >            plp
                        
06da : d002                     bne brzs1
06dc : f003                     beq brzs2
06de :                  brzs1
                                trap            ;branch zero/non zero
06de : 206144          >        jsr sp4_trap_fail 
                        
06e1 : b002             brzs2   bcs brzs3
06e3 : 9003                     bcc brzs4
06e5 :                  brzs3
                                trap            ;branch carry/no carry
06e5 : 206144          >        jsr sp4_trap_fail 
                        
06e8 : 3002             brzs4   bmi brzs5
06ea : 1003                     bpl brzs6
06ec :                  brzs5
                                trap            ;branch minus/plus
06ec : 206144          >        jsr sp4_trap_fail 
                        
06ef : 7002             brzs6   bvs brzs7
06f1 : 5003                     bvc brzs8
06f3 :                  brzs7
                                trap            ;branch overflow/no overflow
06f3 : 206144          >        jsr sp4_trap_fail 
                        
06f6 :                  brzs8
                                set_stat carry
                       >            load_flag carry
06f6 : a901            >            lda #carry             ;allow test to change I-flag (no mask)
                       >
06f8 : 48              >            pha         ;use stack to load status
06f9 : 28              >            plp
                        
06fa : f002                     beq brcs1
06fc : d003                     bne brcs2
06fe :                  brcs1
                                trap            ;branch zero/non zero
06fe : 206144          >        jsr sp4_trap_fail 
                        
0701 : 9002             brcs2   bcc brcs3
0703 : b003                     bcs brcs4
0705 :                  brcs3
                                trap            ;branch carry/no carry
0705 : 206144          >        jsr sp4_trap_fail 
                        
0708 : 3002             brcs4   bmi brcs5
070a : 1003                     bpl brcs6
070c :                  brcs5
                                trap            ;branch minus/plus
070c : 206144          >        jsr sp4_trap_fail 
                        
070f : 7002             brcs6   bvs brcs7
0711 : 5003                     bvc brcs8
0713 :                  brcs7
                                trap            ;branch overflow/no overflow
0713 : 206144          >        jsr sp4_trap_fail 
                        
                        
0716 :                  brcs8
                                set_stat minus
                       >            load_flag minus
0716 : a980            >            lda #minus             ;allow test to change I-flag (no mask)
                       >
0718 : 48              >            pha         ;use stack to load status
0719 : 28              >            plp
                        
071a : f002                     beq brmi1
071c : d003                     bne brmi2
071e :                  brmi1
                                trap            ;branch zero/non zero
071e : 206144          >        jsr sp4_trap_fail 
                        
0721 : b002             brmi2   bcs brmi3
0723 : 9003                     bcc brmi4
0725 :                  brmi3
                                trap            ;branch carry/no carry
0725 : 206144          >        jsr sp4_trap_fail 
                        
0728 : 1002             brmi4   bpl brmi5
072a : 3003                     bmi brmi6
072c :                  brmi5
                                trap            ;branch minus/plus
072c : 206144          >        jsr sp4_trap_fail 
                        
072f : 7002             brmi6   bvs brmi7
0731 : 5003                     bvc brmi8
0733 :                  brmi7
                                trap            ;branch overflow/no overflow
0733 : 206144          >        jsr sp4_trap_fail 
                        
0736 :                  brmi8
                                set_stat overfl
                       >            load_flag overfl
0736 : a940            >            lda #overfl             ;allow test to change I-flag (no mask)
                       >
0738 : 48              >            pha         ;use stack to load status
0739 : 28              >            plp
                        
073a : f002                     beq brvs1
073c : d003                     bne brvs2
073e :                  brvs1
                                trap            ;branch zero/non zero
073e : 206144          >        jsr sp4_trap_fail 
                        
0741 : b002             brvs2   bcs brvs3
0743 : 9003                     bcc brvs4
0745 :                  brvs3
                                trap            ;branch carry/no carry
0745 : 206144          >        jsr sp4_trap_fail 
                        
0748 : 3002             brvs4   bmi brvs5
074a : 1003                     bpl brvs6
074c :                  brvs5
                                trap            ;branch minus/plus
074c : 206144          >        jsr sp4_trap_fail 
                        
074f : 5002             brvs6   bvc brvs7
0751 : 7003                     bvs brvs8
0753 :                  brvs7
                                trap            ;branch overflow/no overflow
0753 : 206144          >        jsr sp4_trap_fail 
                        
0756 :                  brvs8
                                set_stat $ff-zero
                       >            load_flag $ff-zero
0756 : a9fd            >            lda #$ff-zero             ;allow test to change I-flag (no mask)
                       >
0758 : 48              >            pha         ;use stack to load status
0759 : 28              >            plp
                        
075a : f002                     beq brzc1
075c : d003                     bne brzc2
075e :                  brzc1
                                trap            ;branch zero/non zero
075e : 206144          >        jsr sp4_trap_fail 
                        
0761 : 9002             brzc2   bcc brzc3
0763 : b003                     bcs brzc4
0765 :                  brzc3
                                trap            ;branch carry/no carry
0765 : 206144          >        jsr sp4_trap_fail 
                        
0768 : 1002             brzc4   bpl brzc5
076a : 3003                     bmi brzc6
076c :                  brzc5
                                trap            ;branch minus/plus
076c : 206144          >        jsr sp4_trap_fail 
                        
076f : 5002             brzc6   bvc brzc7
0771 : 7003                     bvs brzc8
0773 :                  brzc7
                                trap            ;branch overflow/no overflow
0773 : 206144          >        jsr sp4_trap_fail 
                        
0776 :                  brzc8
                                set_stat $ff-carry
                       >            load_flag $ff-carry
0776 : a9fe            >            lda #$ff-carry             ;allow test to change I-flag (no mask)
                       >
0778 : 48              >            pha         ;use stack to load status
0779 : 28              >            plp
                        
077a : d002                     bne brcc1
077c : f003                     beq brcc2
077e :                  brcc1
                                trap            ;branch zero/non zero
077e : 206144          >        jsr sp4_trap_fail 
                        
0781 : b002             brcc2   bcs brcc3
0783 : 9003                     bcc brcc4
0785 :                  brcc3
                                trap            ;branch carry/no carry
0785 : 206144          >        jsr sp4_trap_fail 
                        
0788 : 1002             brcc4   bpl brcc5
078a : 3003                     bmi brcc6
078c :                  brcc5
                                trap            ;branch minus/plus
078c : 206144          >        jsr sp4_trap_fail 
                        
078f : 5002             brcc6   bvc brcc7
0791 : 7003                     bvs brcc8
0793 :                  brcc7
                                trap            ;branch overflow/no overflow
0793 : 206144          >        jsr sp4_trap_fail 
                        
0796 :                  brcc8
                                set_stat $ff-minus
                       >            load_flag $ff-minus
0796 : a97f            >            lda #$ff-minus             ;allow test to change I-flag (no mask)
                       >
0798 : 48              >            pha         ;use stack to load status
0799 : 28              >            plp
                        
079a : d002                     bne brpl1
079c : f003                     beq brpl2
079e :                  brpl1
                                trap            ;branch zero/non zero
079e : 206144          >        jsr sp4_trap_fail 
                        
07a1 : 9002             brpl2   bcc brpl3
07a3 : b003                     bcs brpl4
07a5 :                  brpl3
                                trap            ;branch carry/no carry
07a5 : 206144          >        jsr sp4_trap_fail 
                        
07a8 : 3002             brpl4   bmi brpl5
07aa : 1003                     bpl brpl6
07ac :                  brpl5
                                trap            ;branch minus/plus
07ac : 206144          >        jsr sp4_trap_fail 
                        
07af : 5002             brpl6   bvc brpl7
07b1 : 7003                     bvs brpl8
07b3 :                  brpl7
                                trap            ;branch overflow/no overflow
07b3 : 206144          >        jsr sp4_trap_fail 
                        
07b6 :                  brpl8
                                set_stat $ff-overfl
                       >            load_flag $ff-overfl
07b6 : a9bf            >            lda #$ff-overfl             ;allow test to change I-flag (no mask)
                       >
07b8 : 48              >            pha         ;use stack to load status
07b9 : 28              >            plp
                        
07ba : d002                     bne brvc1
07bc : f003                     beq brvc2
07be :                  brvc1
                                trap            ;branch zero/non zero
07be : 206144          >        jsr sp4_trap_fail 
                        
07c1 : 9002             brvc2   bcc brvc3
07c3 : b003                     bcs brvc4
07c5 :                  brvc3
                                trap            ;branch carry/no carry
07c5 : 206144          >        jsr sp4_trap_fail 
                        
07c8 : 1002             brvc4   bpl brvc5
07ca : 3003                     bmi brvc6
07cc :                  brvc5
                                trap            ;branch minus/plus
07cc : 206144          >        jsr sp4_trap_fail 
                        
07cf : 7002             brvc6   bvs brvc7
07d1 : 5003                     bvc brvc8
07d3 :                  brvc7
                                trap            ;branch overflow/no overflow
07d3 : 206144          >        jsr sp4_trap_fail 
                        
07d6 :                  brvc8
                                next_test
07d6 : ad0002          >            lda test_case   ;previous test
07d9 : c904            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
07db : f003            >        beq skip0146
                       >        trap            ;failed not equal (non zero)
07dd : 206144          >        jsr sp4_trap_fail 
                       >
07e0 :                 >skip0146
                       >
0005 =                 >test_num = test_num + 1
07e0 : a905            >            lda #test_num   ;*** next tests' number
07e2 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; test PHA does not alter flags or accumulator but PLA does
07e5 : a255                     ldx #$55        ;x & y protected
07e7 : a0aa                     ldy #$aa
                                set_a 1,$ff     ;push
                       >            load_flag $ff     
07e9 : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
                       >
07eb : 48              >            pha         ;use stack to load status
07ec : a901            >            lda #1     ;precharge accu
07ee : 28              >            plp
                        
07ef : 48                       pha
                                tst_a 1,$ff
07f0 : 08              >            php         ;save flags
07f1 : c901            >            cmp #1     ;test result
                       >            trap_ne
07f3 : f003            >        beq skip0151
                       >        trap            ;failed not equal (non zero)
07f5 : 206144          >        jsr sp4_trap_fail 
                       >
07f8 :                 >skip0151
                       >
07f8 : 68              >            pla         ;load status
07f9 : 48              >            pha
                       >            cmp_flag $ff
07fa : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
07fc : f003            >        beq skip0154
                       >        trap            ;failed not equal (non zero)
07fe : 206144          >        jsr sp4_trap_fail 
                       >
0801 :                 >skip0154
                       >
0801 : 28              >            plp         ;restore status
                        
                                set_a 0,0
                       >            load_flag 0
0802 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0804 : 48              >            pha         ;use stack to load status
0805 : a900            >            lda #0     ;precharge accu
0807 : 28              >            plp
                        
0808 : 48                       pha
                                tst_a 0,0
0809 : 08              >            php         ;save flags
080a : c900            >            cmp #0     ;test result
                       >            trap_ne
080c : f003            >        beq skip0159
                       >        trap            ;failed not equal (non zero)
080e : 206144          >        jsr sp4_trap_fail 
                       >
0811 :                 >skip0159
                       >
0811 : 68              >            pla         ;load status
0812 : 48              >            pha
                       >            cmp_flag 0
0813 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0815 : f003            >        beq skip0162
                       >        trap            ;failed not equal (non zero)
0817 : 206144          >        jsr sp4_trap_fail 
                       >
081a :                 >skip0162
                       >
081a : 28              >            plp         ;restore status
                        
                                set_a $ff,$ff
                       >            load_flag $ff
081b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
081d : 48              >            pha         ;use stack to load status
081e : a9ff            >            lda #$ff     ;precharge accu
0820 : 28              >            plp
                        
0821 : 48                       pha
                                tst_a $ff,$ff
0822 : 08              >            php         ;save flags
0823 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0825 : f003            >        beq skip0167
                       >        trap            ;failed not equal (non zero)
0827 : 206144          >        jsr sp4_trap_fail 
                       >
082a :                 >skip0167
                       >
082a : 68              >            pla         ;load status
082b : 48              >            pha
                       >            cmp_flag $ff
082c : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
082e : f003            >        beq skip0170
                       >        trap            ;failed not equal (non zero)
0830 : 206144          >        jsr sp4_trap_fail 
                       >
0833 :                 >skip0170
                       >
0833 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
0834 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0836 : 48              >            pha         ;use stack to load status
0837 : a901            >            lda #1     ;precharge accu
0839 : 28              >            plp
                        
083a : 48                       pha
                                tst_a 1,0
083b : 08              >            php         ;save flags
083c : c901            >            cmp #1     ;test result
                       >            trap_ne
083e : f003            >        beq skip0175
                       >        trap            ;failed not equal (non zero)
0840 : 206144          >        jsr sp4_trap_fail 
                       >
0843 :                 >skip0175
                       >
0843 : 68              >            pla         ;load status
0844 : 48              >            pha
                       >            cmp_flag 0
0845 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0847 : f003            >        beq skip0178
                       >        trap            ;failed not equal (non zero)
0849 : 206144          >        jsr sp4_trap_fail 
                       >
084c :                 >skip0178
                       >
084c : 28              >            plp         ;restore status
                        
                                set_a 0,$ff
                       >            load_flag $ff
084d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
084f : 48              >            pha         ;use stack to load status
0850 : a900            >            lda #0     ;precharge accu
0852 : 28              >            plp
                        
0853 : 48                       pha
                                tst_a 0,$ff
0854 : 08              >            php         ;save flags
0855 : c900            >            cmp #0     ;test result
                       >            trap_ne
0857 : f003            >        beq skip0183
                       >        trap            ;failed not equal (non zero)
0859 : 206144          >        jsr sp4_trap_fail 
                       >
085c :                 >skip0183
                       >
085c : 68              >            pla         ;load status
085d : 48              >            pha
                       >            cmp_flag $ff
085e : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0860 : f003            >        beq skip0186
                       >        trap            ;failed not equal (non zero)
0862 : 206144          >        jsr sp4_trap_fail 
                       >
0865 :                 >skip0186
                       >
0865 : 28              >            plp         ;restore status
                        
                                set_a $ff,0
                       >            load_flag 0
0866 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0868 : 48              >            pha         ;use stack to load status
0869 : a9ff            >            lda #$ff     ;precharge accu
086b : 28              >            plp
                        
086c : 48                       pha
                                tst_a $ff,0
086d : 08              >            php         ;save flags
086e : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0870 : f003            >        beq skip0191
                       >        trap            ;failed not equal (non zero)
0872 : 206144          >        jsr sp4_trap_fail 
                       >
0875 :                 >skip0191
                       >
0875 : 68              >            pla         ;load status
0876 : 48              >            pha
                       >            cmp_flag 0
0877 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0879 : f003            >        beq skip0194
                       >        trap            ;failed not equal (non zero)
087b : 206144          >        jsr sp4_trap_fail 
                       >
087e :                 >skip0194
                       >
087e : 28              >            plp         ;restore status
                        
                                set_a 0,$ff     ;pull
                       >            load_flag $ff     
087f : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
                       >
0881 : 48              >            pha         ;use stack to load status
0882 : a900            >            lda #0     ;precharge accu
0884 : 28              >            plp
                        
0885 : 68                       pla
                                tst_a $ff,$ff-zero
0886 : 08              >            php         ;save flags
0887 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0889 : f003            >        beq skip0199
                       >        trap            ;failed not equal (non zero)
088b : 206144          >        jsr sp4_trap_fail 
                       >
088e :                 >skip0199
                       >
088e : 68              >            pla         ;load status
088f : 48              >            pha
                       >            cmp_flag $ff-zero
0890 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0892 : f003            >        beq skip0202
                       >        trap            ;failed not equal (non zero)
0894 : 206144          >        jsr sp4_trap_fail 
                       >
0897 :                 >skip0202
                       >
0897 : 28              >            plp         ;restore status
                        
                                set_a $ff,0
                       >            load_flag 0
0898 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
089a : 48              >            pha         ;use stack to load status
089b : a9ff            >            lda #$ff     ;precharge accu
089d : 28              >            plp
                        
089e : 68                       pla
                                tst_a 0,zero
089f : 08              >            php         ;save flags
08a0 : c900            >            cmp #0     ;test result
                       >            trap_ne
08a2 : f003            >        beq skip0207
                       >        trap            ;failed not equal (non zero)
08a4 : 206144          >        jsr sp4_trap_fail 
                       >
08a7 :                 >skip0207
                       >
08a7 : 68              >            pla         ;load status
08a8 : 48              >            pha
                       >            cmp_flag zero
08a9 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
08ab : f003            >        beq skip0210
                       >        trap            ;failed not equal (non zero)
08ad : 206144          >        jsr sp4_trap_fail 
                       >
08b0 :                 >skip0210
                       >
08b0 : 28              >            plp         ;restore status
                        
                                set_a $fe,$ff
                       >            load_flag $ff
08b1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
08b3 : 48              >            pha         ;use stack to load status
08b4 : a9fe            >            lda #$fe     ;precharge accu
08b6 : 28              >            plp
                        
08b7 : 68                       pla
                                tst_a 1,$ff-zero-minus
08b8 : 08              >            php         ;save flags
08b9 : c901            >            cmp #1     ;test result
                       >            trap_ne
08bb : f003            >        beq skip0215
                       >        trap            ;failed not equal (non zero)
08bd : 206144          >        jsr sp4_trap_fail 
                       >
08c0 :                 >skip0215
                       >
08c0 : 68              >            pla         ;load status
08c1 : 48              >            pha
                       >            cmp_flag $ff-zero-minus
08c2 : c97d            >            cmp #($ff-zero-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
08c4 : f003            >        beq skip0218
                       >        trap            ;failed not equal (non zero)
08c6 : 206144          >        jsr sp4_trap_fail 
                       >
08c9 :                 >skip0218
                       >
08c9 : 28              >            plp         ;restore status
                        
                                set_a 0,0
                       >            load_flag 0
08ca : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
08cc : 48              >            pha         ;use stack to load status
08cd : a900            >            lda #0     ;precharge accu
08cf : 28              >            plp
                        
08d0 : 68                       pla
                                tst_a $ff,minus
08d1 : 08              >            php         ;save flags
08d2 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
08d4 : f003            >        beq skip0223
                       >        trap            ;failed not equal (non zero)
08d6 : 206144          >        jsr sp4_trap_fail 
                       >
08d9 :                 >skip0223
                       >
08d9 : 68              >            pla         ;load status
08da : 48              >            pha
                       >            cmp_flag minus
08db : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
08dd : f003            >        beq skip0226
                       >        trap            ;failed not equal (non zero)
08df : 206144          >        jsr sp4_trap_fail 
                       >
08e2 :                 >skip0226
                       >
08e2 : 28              >            plp         ;restore status
                        
                                set_a $ff,$ff
                       >            load_flag $ff
08e3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
08e5 : 48              >            pha         ;use stack to load status
08e6 : a9ff            >            lda #$ff     ;precharge accu
08e8 : 28              >            plp
                        
08e9 : 68                       pla
                                tst_a 0,$ff-minus
08ea : 08              >            php         ;save flags
08eb : c900            >            cmp #0     ;test result
                       >            trap_ne
08ed : f003            >        beq skip0231
                       >        trap            ;failed not equal (non zero)
08ef : 206144          >        jsr sp4_trap_fail 
                       >
08f2 :                 >skip0231
                       >
08f2 : 68              >            pla         ;load status
08f3 : 48              >            pha
                       >            cmp_flag $ff-minus
08f4 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
08f6 : f003            >        beq skip0234
                       >        trap            ;failed not equal (non zero)
08f8 : 206144          >        jsr sp4_trap_fail 
                       >
08fb :                 >skip0234
                       >
08fb : 28              >            plp         ;restore status
                        
                                set_a $fe,0
                       >            load_flag 0
08fc : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
08fe : 48              >            pha         ;use stack to load status
08ff : a9fe            >            lda #$fe     ;precharge accu
0901 : 28              >            plp
                        
0902 : 68                       pla
                                tst_a 1,0
0903 : 08              >            php         ;save flags
0904 : c901            >            cmp #1     ;test result
                       >            trap_ne
0906 : f003            >        beq skip0239
                       >        trap            ;failed not equal (non zero)
0908 : 206144          >        jsr sp4_trap_fail 
                       >
090b :                 >skip0239
                       >
090b : 68              >            pla         ;load status
090c : 48              >            pha
                       >            cmp_flag 0
090d : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
090f : f003            >        beq skip0242
                       >        trap            ;failed not equal (non zero)
0911 : 206144          >        jsr sp4_trap_fail 
                       >
0914 :                 >skip0242
                       >
0914 : 28              >            plp         ;restore status
                        
0915 : e055                     cpx #$55        ;x & y unchanged?
                                trap_ne
0917 : f003            >        beq skip0244
                       >        trap            ;failed not equal (non zero)
0919 : 206144          >        jsr sp4_trap_fail 
                       >
091c :                 >skip0244
                        
091c : c0aa                     cpy #$aa
                                trap_ne
091e : f003            >        beq skip0246
                       >        trap            ;failed not equal (non zero)
0920 : 206144          >        jsr sp4_trap_fail 
                       >
0923 :                 >skip0246
                        
                                next_test
0923 : ad0002          >            lda test_case   ;previous test
0926 : c905            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0928 : f003            >        beq skip0249
                       >        trap            ;failed not equal (non zero)
092a : 206144          >        jsr sp4_trap_fail 
                       >
092d :                 >skip0249
                       >
0006 =                 >test_num = test_num + 1
092d : a906            >            lda #test_num   ;*** next tests' number
092f : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                         
                        ; partial pretest EOR #
                                set_a $3c,0
                       >            load_flag 0
0932 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0934 : 48              >            pha         ;use stack to load status
0935 : a93c            >            lda #$3c     ;precharge accu
0937 : 28              >            plp
                        
0938 : 49c3                     eor #$c3
                                tst_a $ff,fn
093a : 08              >            php         ;save flags
093b : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
093d : f003            >        beq skip0254
                       >        trap            ;failed not equal (non zero)
093f : 206144          >        jsr sp4_trap_fail 
                       >
0942 :                 >skip0254
                       >
0942 : 68              >            pla         ;load status
0943 : 48              >            pha
                       >            cmp_flag fn
0944 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0946 : f003            >        beq skip0257
                       >        trap            ;failed not equal (non zero)
0948 : 206144          >        jsr sp4_trap_fail 
                       >
094b :                 >skip0257
                       >
094b : 28              >            plp         ;restore status
                        
                                set_a $c3,0
                       >            load_flag 0
094c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
094e : 48              >            pha         ;use stack to load status
094f : a9c3            >            lda #$c3     ;precharge accu
0951 : 28              >            plp
                        
0952 : 49c3                     eor #$c3
                                tst_a 0,fz
0954 : 08              >            php         ;save flags
0955 : c900            >            cmp #0     ;test result
                       >            trap_ne
0957 : f003            >        beq skip0262
                       >        trap            ;failed not equal (non zero)
0959 : 206144          >        jsr sp4_trap_fail 
                       >
095c :                 >skip0262
                       >
095c : 68              >            pla         ;load status
095d : 48              >            pha
                       >            cmp_flag fz
095e : c932            >            cmp #(fz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0960 : f003            >        beq skip0265
                       >        trap            ;failed not equal (non zero)
0962 : 206144          >        jsr sp4_trap_fail 
                       >
0965 :                 >skip0265
                       >
0965 : 28              >            plp         ;restore status
                        
                                next_test
0966 : ad0002          >            lda test_case   ;previous test
0969 : c906            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
096b : f003            >        beq skip0268
                       >        trap            ;failed not equal (non zero)
096d : 206144          >        jsr sp4_trap_fail 
                       >
0970 :                 >skip0268
                       >
0007 =                 >test_num = test_num + 1
0970 : a907            >            lda #test_num   ;*** next tests' number
0972 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; PC modifying instructions except branches (NOP, JMP, JSR, RTS, BRK, RTI)
                        ; testing NOP
0975 : a224                     ldx #$24
0977 : a042                     ldy #$42
                                set_a $18,0
                       >            load_flag 0
0979 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
097b : 48              >            pha         ;use stack to load status
097c : a918            >            lda #$18     ;precharge accu
097e : 28              >            plp
                        
097f : ea                       nop
                                tst_a $18,0
0980 : 08              >            php         ;save flags
0981 : c918            >            cmp #$18     ;test result
                       >            trap_ne
0983 : f003            >        beq skip0273
                       >        trap            ;failed not equal (non zero)
0985 : 206144          >        jsr sp4_trap_fail 
                       >
0988 :                 >skip0273
                       >
0988 : 68              >            pla         ;load status
0989 : 48              >            pha
                       >            cmp_flag 0
098a : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
098c : f003            >        beq skip0276
                       >        trap            ;failed not equal (non zero)
098e : 206144          >        jsr sp4_trap_fail 
                       >
0991 :                 >skip0276
                       >
0991 : 28              >            plp         ;restore status
                        
0992 : e024                     cpx #$24
                                trap_ne
0994 : f003            >        beq skip0278
                       >        trap            ;failed not equal (non zero)
0996 : 206144          >        jsr sp4_trap_fail 
                       >
0999 :                 >skip0278
                        
0999 : c042                     cpy #$42
                                trap_ne
099b : f003            >        beq skip0280
                       >        trap            ;failed not equal (non zero)
099d : 206144          >        jsr sp4_trap_fail 
                       >
09a0 :                 >skip0280
                        
09a0 : a2db                     ldx #$db
09a2 : a0bd                     ldy #$bd
                                set_a $e7,$ff
                       >            load_flag $ff
09a4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
09a6 : 48              >            pha         ;use stack to load status
09a7 : a9e7            >            lda #$e7     ;precharge accu
09a9 : 28              >            plp
                        
09aa : ea                       nop
                                tst_a $e7,$ff
09ab : 08              >            php         ;save flags
09ac : c9e7            >            cmp #$e7     ;test result
                       >            trap_ne
09ae : f003            >        beq skip0285
                       >        trap            ;failed not equal (non zero)
09b0 : 206144          >        jsr sp4_trap_fail 
                       >
09b3 :                 >skip0285
                       >
09b3 : 68              >            pla         ;load status
09b4 : 48              >            pha
                       >            cmp_flag $ff
09b5 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
09b7 : f003            >        beq skip0288
                       >        trap            ;failed not equal (non zero)
09b9 : 206144          >        jsr sp4_trap_fail 
                       >
09bc :                 >skip0288
                       >
09bc : 28              >            plp         ;restore status
                        
09bd : e0db                     cpx #$db
                                trap_ne
09bf : f003            >        beq skip0290
                       >        trap            ;failed not equal (non zero)
09c1 : 206144          >        jsr sp4_trap_fail 
                       >
09c4 :                 >skip0290
                        
09c4 : c0bd                     cpy #$bd
                                trap_ne
09c6 : f003            >        beq skip0292
                       >        trap            ;failed not equal (non zero)
09c8 : 206144          >        jsr sp4_trap_fail 
                       >
09cb :                 >skip0292
                        
                                next_test
09cb : ad0002          >            lda test_case   ;previous test
09ce : c907            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
09d0 : f003            >        beq skip0295
                       >        trap            ;failed not equal (non zero)
09d2 : 206144          >        jsr sp4_trap_fail 
                       >
09d5 :                 >skip0295
                       >
0008 =                 >test_num = test_num + 1
09d5 : a908            >            lda #test_num   ;*** next tests' number
09d7 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; jump absolute
                                set_stat $0
                       >            load_flag $0
09da : a900            >            lda #$0             ;allow test to change I-flag (no mask)
                       >
09dc : 48              >            pha         ;use stack to load status
09dd : 28              >            plp
                        
09de : a946                     lda #'F'
09e0 : a241                     ldx #'A'
09e2 : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
09e4 : 4c8942                   jmp test_far
09e7 : ea                       nop
09e8 : ea                       nop
                                trap_ne         ;runover protection
09e9 : f003            >        beq skip0299
                       >        trap            ;failed not equal (non zero)
09eb : 206144          >        jsr sp4_trap_fail 
                       >
09ee :                 >skip0299
                        
09ee : e8                       inx
09ef : e8                       inx
09f0 :                  far_ret 
                                trap_eq         ;returned flags OK?
09f0 : d003            >        bne skip0301
                       >        trap           ;failed equal (zero)
09f2 : 206144          >        jsr sp4_trap_fail 
                       >
09f5 :                 >skip0301
                        
                                trap_pl
09f5 : 3003            >        bmi skip0303
                       >        trap            ;failed plus (bit 7 clear)
09f7 : 206144          >        jsr sp4_trap_fail 
                       >
09fa :                 >skip0303
                        
                                trap_cc
09fa : b003            >        bcs skip0305
                       >        trap            ;failed carry clear
09fc : 206144          >        jsr sp4_trap_fail 
                       >
09ff :                 >skip0305
                        
                                trap_vc
09ff : 7003            >        bvs skip0307
                       >        trap            ;failed overflow clear
0a01 : 206144          >        jsr sp4_trap_fail 
                       >
0a04 :                 >skip0307
                        
0a04 : c9ec                     cmp #('F'^$aa)  ;returned registers OK?
                                trap_ne
0a06 : f003            >        beq skip0309
                       >        trap            ;failed not equal (non zero)
0a08 : 206144          >        jsr sp4_trap_fail 
                       >
0a0b :                 >skip0309
                        
0a0b : e042                     cpx #('A'+1)
                                trap_ne
0a0d : f003            >        beq skip0311
                       >        trap            ;failed not equal (non zero)
0a0f : 206144          >        jsr sp4_trap_fail 
                       >
0a12 :                 >skip0311
                        
0a12 : c04f                     cpy #('R'-3)
                                trap_ne
0a14 : f003            >        beq skip0313
                       >        trap            ;failed not equal (non zero)
0a16 : 206144          >        jsr sp4_trap_fail 
                       >
0a19 :                 >skip0313
                        
0a19 : ca                       dex
0a1a : c8                       iny
0a1b : c8                       iny
0a1c : c8                       iny
0a1d : 49aa                     eor #$aa        ;N=0, V=1, Z=0, C=1
0a1f : 4c2b0a                   jmp test_near
0a22 : ea                       nop
0a23 : ea                       nop
                                trap_ne         ;runover protection
0a24 : f003            >        beq skip0315
                       >        trap            ;failed not equal (non zero)
0a26 : 206144          >        jsr sp4_trap_fail 
                       >
0a29 :                 >skip0315
                        
0a29 : e8                       inx
0a2a : e8                       inx
0a2b :                  test_near
                                trap_eq         ;passed flags OK?
0a2b : d003            >        bne skip0317
                       >        trap           ;failed equal (zero)
0a2d : 206144          >        jsr sp4_trap_fail 
                       >
0a30 :                 >skip0317
                        
                                trap_mi
0a30 : 1003            >        bpl skip0319
                       >        trap            ;failed minus (bit 7 set)
0a32 : 206144          >        jsr sp4_trap_fail 
                       >
0a35 :                 >skip0319
                        
                                trap_cc
0a35 : b003            >        bcs skip0321
                       >        trap            ;failed carry clear
0a37 : 206144          >        jsr sp4_trap_fail 
                       >
0a3a :                 >skip0321
                        
                                trap_vc
0a3a : 7003            >        bvs skip0323
                       >        trap            ;failed overflow clear
0a3c : 206144          >        jsr sp4_trap_fail 
                       >
0a3f :                 >skip0323
                        
0a3f : c946                     cmp #'F'        ;passed registers OK?
                                trap_ne
0a41 : f003            >        beq skip0325
                       >        trap            ;failed not equal (non zero)
0a43 : 206144          >        jsr sp4_trap_fail 
                       >
0a46 :                 >skip0325
                        
0a46 : e041                     cpx #'A'
                                trap_ne
0a48 : f003            >        beq skip0327
                       >        trap            ;failed not equal (non zero)
0a4a : 206144          >        jsr sp4_trap_fail 
                       >
0a4d :                 >skip0327
                        
0a4d : c052                     cpy #'R'
                                trap_ne
0a4f : f003            >        beq skip0329
                       >        trap            ;failed not equal (non zero)
0a51 : 206144          >        jsr sp4_trap_fail 
                       >
0a54 :                 >skip0329
                        
                                next_test
0a54 : ad0002          >            lda test_case   ;previous test
0a57 : c908            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0a59 : f003            >        beq skip0332
                       >        trap            ;failed not equal (non zero)
0a5b : 206144          >        jsr sp4_trap_fail 
                       >
0a5e :                 >skip0332
                       >
0009 =                 >test_num = test_num + 1
0a5e : a909            >            lda #test_num   ;*** next tests' number
0a60 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; jump indirect
                                set_stat 0
                       >            load_flag 0
0a63 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0a65 : 48              >            pha         ;use stack to load status
0a66 : 28              >            plp
                        
0a67 : a949                     lda #'I'
0a69 : a24e                     ldx #'N'
0a6b : a044                     ldy #'D'        ;N=0, V=0, Z=0, C=0
0a6d : 6cd042                   jmp (ptr_tst_ind)
0a70 : ea                       nop
                                trap_ne         ;runover protection
0a71 : f003            >        beq skip0336
                       >        trap            ;failed not equal (non zero)
0a73 : 206144          >        jsr sp4_trap_fail 
                       >
0a76 :                 >skip0336
                        
0a76 : 88                       dey
0a77 : 88                       dey
0a78 :                  ind_ret 
0a78 : 08                       php             ;either SP or Y count will fail, if we do not hit
0a79 : 88                       dey
0a7a : 88                       dey
0a7b : 88                       dey
0a7c : 28                       plp
                                trap_eq         ;returned flags OK?
0a7d : d003            >        bne skip0338
                       >        trap           ;failed equal (zero)
0a7f : 206144          >        jsr sp4_trap_fail 
                       >
0a82 :                 >skip0338
                        
                                trap_pl
0a82 : 3003            >        bmi skip0340
                       >        trap            ;failed plus (bit 7 clear)
0a84 : 206144          >        jsr sp4_trap_fail 
                       >
0a87 :                 >skip0340
                        
                                trap_cc
0a87 : b003            >        bcs skip0342
                       >        trap            ;failed carry clear
0a89 : 206144          >        jsr sp4_trap_fail 
                       >
0a8c :                 >skip0342
                        
                                trap_vc
0a8c : 7003            >        bvs skip0344
                       >        trap            ;failed overflow clear
0a8e : 206144          >        jsr sp4_trap_fail 
                       >
0a91 :                 >skip0344
                        
0a91 : c9e3                     cmp #('I'^$aa)  ;returned registers OK?
                                trap_ne
0a93 : f003            >        beq skip0346
                       >        trap            ;failed not equal (non zero)
0a95 : 206144          >        jsr sp4_trap_fail 
                       >
0a98 :                 >skip0346
                        
0a98 : e04f                     cpx #('N'+1)
                                trap_ne
0a9a : f003            >        beq skip0348
                       >        trap            ;failed not equal (non zero)
0a9c : 206144          >        jsr sp4_trap_fail 
                       >
0a9f :                 >skip0348
                        
0a9f : c03e                     cpy #('D'-6)
                                trap_ne
0aa1 : f003            >        beq skip0350
                       >        trap            ;failed not equal (non zero)
0aa3 : 206144          >        jsr sp4_trap_fail 
                       >
0aa6 :                 >skip0350
                        
0aa6 : ba                       tsx             ;SP check
0aa7 : e0ff                     cpx #$ff
                                trap_ne
0aa9 : f003            >        beq skip0352
                       >        trap            ;failed not equal (non zero)
0aab : 206144          >        jsr sp4_trap_fail 
                       >
0aae :                 >skip0352
                        
                                next_test
0aae : ad0002          >            lda test_case   ;previous test
0ab1 : c909            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0ab3 : f003            >        beq skip0355
                       >        trap            ;failed not equal (non zero)
0ab5 : 206144          >        jsr sp4_trap_fail 
                       >
0ab8 :                 >skip0355
                       >
000a =                 >test_num = test_num + 1
0ab8 : a90a            >            lda #test_num   ;*** next tests' number
0aba : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; jump subroutine & return from subroutine
                                set_stat 0
                       >            load_flag 0
0abd : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0abf : 48              >            pha         ;use stack to load status
0ac0 : 28              >            plp
                        
0ac1 : a94a                     lda #'J'
0ac3 : a253                     ldx #'S'
0ac5 : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
0ac7 : 202743                   jsr test_jsr
0ac9 =                  jsr_ret = *-1           ;last address of jsr = return address
0aca : 08                       php             ;either SP or Y count will fail, if we do not hit
0acb : 88                       dey
0acc : 88                       dey
0acd : 88                       dey
0ace : 28                       plp
                                trap_eq         ;returned flags OK?
0acf : d003            >        bne skip0359
                       >        trap           ;failed equal (zero)
0ad1 : 206144          >        jsr sp4_trap_fail 
                       >
0ad4 :                 >skip0359
                        
                                trap_pl
0ad4 : 3003            >        bmi skip0361
                       >        trap            ;failed plus (bit 7 clear)
0ad6 : 206144          >        jsr sp4_trap_fail 
                       >
0ad9 :                 >skip0361
                        
                                trap_cc
0ad9 : b003            >        bcs skip0363
                       >        trap            ;failed carry clear
0adb : 206144          >        jsr sp4_trap_fail 
                       >
0ade :                 >skip0363
                        
                                trap_vc
0ade : 7003            >        bvs skip0365
                       >        trap            ;failed overflow clear
0ae0 : 206144          >        jsr sp4_trap_fail 
                       >
0ae3 :                 >skip0365
                        
0ae3 : c9e0                     cmp #('J'^$aa)  ;returned registers OK?
                                trap_ne
0ae5 : f003            >        beq skip0367
                       >        trap            ;failed not equal (non zero)
0ae7 : 206144          >        jsr sp4_trap_fail 
                       >
0aea :                 >skip0367
                        
0aea : e054                     cpx #('S'+1)
                                trap_ne
0aec : f003            >        beq skip0369
                       >        trap            ;failed not equal (non zero)
0aee : 206144          >        jsr sp4_trap_fail 
                       >
0af1 :                 >skip0369
                        
0af1 : c04c                     cpy #('R'-6)
                                trap_ne
0af3 : f003            >        beq skip0371
                       >        trap            ;failed not equal (non zero)
0af5 : 206144          >        jsr sp4_trap_fail 
                       >
0af8 :                 >skip0371
                        
0af8 : ba                       tsx             ;sp?
0af9 : e0ff                     cpx #$ff
                                trap_ne
0afb : f003            >        beq skip0373
                       >        trap            ;failed not equal (non zero)
0afd : 206144          >        jsr sp4_trap_fail 
                       >
0b00 :                 >skip0373
                        
                                next_test
0b00 : ad0002          >            lda test_case   ;previous test
0b03 : c90a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0b05 : f003            >        beq skip0376
                       >        trap            ;failed not equal (non zero)
0b07 : 206144          >        jsr sp4_trap_fail 
                       >
0b0a :                 >skip0376
                       >
000b =                 >test_num = test_num + 1
0b0a : a90b            >            lda #test_num   ;*** next tests' number
0b0c : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; break & return from interrupt
                            if ROM_vectors = 1
                                load_flag 0     ;with interrupts enabled if allowed!
0b0f : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                        
0b11 : 48                       pha
0b12 : a942                     lda #'B'
0b14 : a252                     ldx #'R'
0b16 : a04b                     ldy #'K'
0b18 : 28                       plp             ;N=0, V=0, Z=0, C=0
0b19 : 00                       brk
                            else
                                lda #hi brk_ret0 ;emulated break
                                pha
                                lda #lo brk_ret0
                                pha
                                load_flag fao    ;set break & unused on stack
                                pha
                                load_flag intdis ;during interrupt
                                pha
                                lda #'B'
                                ldx #'R'
                                ldy #'K'
                                plp             ;N=0, V=0, Z=0, C=0
                                jmp irq_trap
                            endif
0b1a : 88                       dey             ;should not be executed
0b1b :                  brk_ret0                ;address of break return
0b1b : 08                       php             ;either SP or Y count will fail, if we do not hit
0b1c : 88                       dey
0b1d : 88                       dey
0b1e : 88                       dey
0b1f : c9e8                     cmp #'B'^$aa    ;returned registers OK?
                                ;the IRQ vector was never executed if A & X stay unmodified
                                trap_ne
0b21 : f003            >        beq skip0379
                       >        trap            ;failed not equal (non zero)
0b23 : 206144          >        jsr sp4_trap_fail 
                       >
0b26 :                 >skip0379
                        
0b26 : e053                     cpx #'R'+1
                                trap_ne
0b28 : f003            >        beq skip0381
                       >        trap            ;failed not equal (non zero)
0b2a : 206144          >        jsr sp4_trap_fail 
                       >
0b2d :                 >skip0381
                        
0b2d : c045                     cpy #'K'-6
                                trap_ne
0b2f : f003            >        beq skip0383
                       >        trap            ;failed not equal (non zero)
0b31 : 206144          >        jsr sp4_trap_fail 
                       >
0b34 :                 >skip0383
                        
0b34 : 68                       pla             ;returned flags OK (unchanged)?
                                cmp_flag 0
0b35 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
0b37 : f003            >        beq skip0386
                       >        trap            ;failed not equal (non zero)
0b39 : 206144          >        jsr sp4_trap_fail 
                       >
0b3c :                 >skip0386
                        
0b3c : ba                       tsx             ;sp?
0b3d : e0ff                     cpx #$ff
                                trap_ne
0b3f : f003            >        beq skip0388
                       >        trap            ;failed not equal (non zero)
0b41 : 206144          >        jsr sp4_trap_fail 
                       >
0b44 :                 >skip0388
                        
                            if ROM_vectors = 1
                                load_flag $ff   ;with interrupts disabled if allowed!
0b44 : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                        
0b46 : 48                       pha
0b47 : a9bd                     lda #$ff-'B'
0b49 : a2ad                     ldx #$ff-'R'
0b4b : a0b4                     ldy #$ff-'K'
0b4d : 28                       plp             ;N=1, V=1, Z=1, C=1
0b4e : 00                       brk
                            else
                                lda #hi brk_ret1 ;emulated break
                                pha
                                lda #lo brk_ret1
                                pha
                                load_flag $ff
                                pha             ;set break & unused on stack
                                pha             ;actual flags
                                lda #$ff-'B'
                                ldx #$ff-'R'
                                ldy #$ff-'K'
                                plp             ;N=1, V=1, Z=1, C=1
                                jmp irq_trap
                            endif
0b4f : 88                       dey             ;should not be executed
0b50 :                  brk_ret1                ;address of break return
0b50 : 08                       php             ;either SP or Y count will fail, if we do not hit
0b51 : 88                       dey
0b52 : 88                       dey
0b53 : 88                       dey
0b54 : c917                     cmp #($ff-'B')^$aa  ;returned registers OK?
                                ;the IRQ vector was never executed if A & X stay unmodified
                                trap_ne
0b56 : f003            >        beq skip0391
                       >        trap            ;failed not equal (non zero)
0b58 : 206144          >        jsr sp4_trap_fail 
                       >
0b5b :                 >skip0391
                        
0b5b : e0ae                     cpx #$ff-'R'+1
                                trap_ne
0b5d : f003            >        beq skip0393
                       >        trap            ;failed not equal (non zero)
0b5f : 206144          >        jsr sp4_trap_fail 
                       >
0b62 :                 >skip0393
                        
0b62 : c0ae                     cpy #$ff-'K'-6
                                trap_ne
0b64 : f003            >        beq skip0395
                       >        trap            ;failed not equal (non zero)
0b66 : 206144          >        jsr sp4_trap_fail 
                       >
0b69 :                 >skip0395
                        
0b69 : 68                       pla             ;returned flags OK (unchanged)?
                                cmp_flag $ff
0b6a : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
0b6c : f003            >        beq skip0398
                       >        trap            ;failed not equal (non zero)
0b6e : 206144          >        jsr sp4_trap_fail 
                       >
0b71 :                 >skip0398
                        
0b71 : ba                       tsx             ;sp?
0b72 : e0ff                     cpx #$ff
                                trap_ne
0b74 : f003            >        beq skip0400
                       >        trap            ;failed not equal (non zero)
0b76 : 206144          >        jsr sp4_trap_fail 
                       >
0b79 :                 >skip0400
                        
                                next_test
0b79 : ad0002          >            lda test_case   ;previous test
0b7c : c90b            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0b7e : f003            >        beq skip0403
                       >        trap            ;failed not equal (non zero)
0b80 : 206144          >        jsr sp4_trap_fail 
                       >
0b83 :                 >skip0403
                       >
000c =                 >test_num = test_num + 1
0b83 : a90c            >            lda #test_num   ;*** next tests' number
0b85 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                         
                        ; test set and clear flags CLC CLI CLD CLV SEC SEI SED
                                set_stat $ff
                       >            load_flag $ff
0b88 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0b8a : 48              >            pha         ;use stack to load status
0b8b : 28              >            plp
                        
0b8c : 18                       clc
                                tst_stat $ff-carry
0b8d : 08              >            php         ;save status
0b8e : 68              >            pla         ;use stack to retrieve status
0b8f : 48              >            pha
                       >            cmp_flag $ff-carry
0b90 : c9fe            >            cmp #($ff-carry|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0b92 : f003            >        beq skip0409
                       >        trap            ;failed not equal (non zero)
0b94 : 206144          >        jsr sp4_trap_fail 
                       >
0b97 :                 >skip0409
                       >
0b97 : 28              >            plp         ;restore status
                        
0b98 : 38                       sec
                                tst_stat $ff
0b99 : 08              >            php         ;save status
0b9a : 68              >            pla         ;use stack to retrieve status
0b9b : 48              >            pha
                       >            cmp_flag $ff
0b9c : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0b9e : f003            >        beq skip0413
                       >        trap            ;failed not equal (non zero)
0ba0 : 206144          >        jsr sp4_trap_fail 
                       >
0ba3 :                 >skip0413
                       >
0ba3 : 28              >            plp         ;restore status
                        
                            if I_flag = 3
0ba4 : 58                       cli
                                tst_stat $ff-intdis
0ba5 : 08              >            php         ;save status
0ba6 : 68              >            pla         ;use stack to retrieve status
0ba7 : 48              >            pha
                       >            cmp_flag $ff-intdis
0ba8 : c9fb            >            cmp #($ff-intdis|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0baa : f003            >        beq skip0417
                       >        trap            ;failed not equal (non zero)
0bac : 206144          >        jsr sp4_trap_fail 
                       >
0baf :                 >skip0417
                       >
0baf : 28              >            plp         ;restore status
                        
0bb0 : 78                       sei
                                tst_stat $ff
0bb1 : 08              >            php         ;save status
0bb2 : 68              >            pla         ;use stack to retrieve status
0bb3 : 48              >            pha
                       >            cmp_flag $ff
0bb4 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0bb6 : f003            >        beq skip0421
                       >        trap            ;failed not equal (non zero)
0bb8 : 206144          >        jsr sp4_trap_fail 
                       >
0bbb :                 >skip0421
                       >
0bbb : 28              >            plp         ;restore status
                        
                            endif
0bbc : d8                       cld
                                tst_stat $ff-decmode
0bbd : 08              >            php         ;save status
0bbe : 68              >            pla         ;use stack to retrieve status
0bbf : 48              >            pha
                       >            cmp_flag $ff-decmode
0bc0 : c9f7            >            cmp #($ff-decmode|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0bc2 : f003            >        beq skip0425
                       >        trap            ;failed not equal (non zero)
0bc4 : 206144          >        jsr sp4_trap_fail 
                       >
0bc7 :                 >skip0425
                       >
0bc7 : 28              >            plp         ;restore status
                        
0bc8 : f8                       sed
                                tst_stat $ff
0bc9 : 08              >            php         ;save status
0bca : 68              >            pla         ;use stack to retrieve status
0bcb : 48              >            pha
                       >            cmp_flag $ff
0bcc : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0bce : f003            >        beq skip0429
                       >        trap            ;failed not equal (non zero)
0bd0 : 206144          >        jsr sp4_trap_fail 
                       >
0bd3 :                 >skip0429
                       >
0bd3 : 28              >            plp         ;restore status
                        
0bd4 : b8                       clv
                                tst_stat $ff-overfl
0bd5 : 08              >            php         ;save status
0bd6 : 68              >            pla         ;use stack to retrieve status
0bd7 : 48              >            pha
                       >            cmp_flag $ff-overfl
0bd8 : c9bf            >            cmp #($ff-overfl|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0bda : f003            >        beq skip0433
                       >        trap            ;failed not equal (non zero)
0bdc : 206144          >        jsr sp4_trap_fail 
                       >
0bdf :                 >skip0433
                       >
0bdf : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
0be0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0be2 : 48              >            pha         ;use stack to load status
0be3 : 28              >            plp
                        
                                tst_stat 0
0be4 : 08              >            php         ;save status
0be5 : 68              >            pla         ;use stack to retrieve status
0be6 : 48              >            pha
                       >            cmp_flag 0
0be7 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0be9 : f003            >        beq skip0439
                       >        trap            ;failed not equal (non zero)
0beb : 206144          >        jsr sp4_trap_fail 
                       >
0bee :                 >skip0439
                       >
0bee : 28              >            plp         ;restore status
                        
0bef : 38                       sec
                                tst_stat carry
0bf0 : 08              >            php         ;save status
0bf1 : 68              >            pla         ;use stack to retrieve status
0bf2 : 48              >            pha
                       >            cmp_flag carry
0bf3 : c931            >            cmp #(carry|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0bf5 : f003            >        beq skip0443
                       >        trap            ;failed not equal (non zero)
0bf7 : 206144          >        jsr sp4_trap_fail 
                       >
0bfa :                 >skip0443
                       >
0bfa : 28              >            plp         ;restore status
                        
0bfb : 18                       clc
                                tst_stat 0  
0bfc : 08              >            php         ;save status
0bfd : 68              >            pla         ;use stack to retrieve status
0bfe : 48              >            pha
                       >            cmp_flag 0  
0bff : c930            >            cmp #(0  |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0c01 : f003            >        beq skip0447
                       >        trap            ;failed not equal (non zero)
0c03 : 206144          >        jsr sp4_trap_fail 
                       >
0c06 :                 >skip0447
                       >
0c06 : 28              >            plp         ;restore status
                        
                            if I_flag = 3
0c07 : 78                       sei
                                tst_stat intdis
0c08 : 08              >            php         ;save status
0c09 : 68              >            pla         ;use stack to retrieve status
0c0a : 48              >            pha
                       >            cmp_flag intdis
0c0b : c934            >            cmp #(intdis|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0c0d : f003            >        beq skip0451
                       >        trap            ;failed not equal (non zero)
0c0f : 206144          >        jsr sp4_trap_fail 
                       >
0c12 :                 >skip0451
                       >
0c12 : 28              >            plp         ;restore status
                        
0c13 : 58                       cli
                                tst_stat 0
0c14 : 08              >            php         ;save status
0c15 : 68              >            pla         ;use stack to retrieve status
0c16 : 48              >            pha
                       >            cmp_flag 0
0c17 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0c19 : f003            >        beq skip0455
                       >        trap            ;failed not equal (non zero)
0c1b : 206144          >        jsr sp4_trap_fail 
                       >
0c1e :                 >skip0455
                       >
0c1e : 28              >            plp         ;restore status
                        
                            endif  
0c1f : f8                       sed
                                tst_stat decmode
0c20 : 08              >            php         ;save status
0c21 : 68              >            pla         ;use stack to retrieve status
0c22 : 48              >            pha
                       >            cmp_flag decmode
0c23 : c938            >            cmp #(decmode|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0c25 : f003            >        beq skip0459
                       >        trap            ;failed not equal (non zero)
0c27 : 206144          >        jsr sp4_trap_fail 
                       >
0c2a :                 >skip0459
                       >
0c2a : 28              >            plp         ;restore status
                        
0c2b : d8                       cld
                                tst_stat 0  
0c2c : 08              >            php         ;save status
0c2d : 68              >            pla         ;use stack to retrieve status
0c2e : 48              >            pha
                       >            cmp_flag 0  
0c2f : c930            >            cmp #(0  |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0c31 : f003            >        beq skip0463
                       >        trap            ;failed not equal (non zero)
0c33 : 206144          >        jsr sp4_trap_fail 
                       >
0c36 :                 >skip0463
                       >
0c36 : 28              >            plp         ;restore status
                        
                                set_stat overfl
                       >            load_flag overfl
0c37 : a940            >            lda #overfl             ;allow test to change I-flag (no mask)
                       >
0c39 : 48              >            pha         ;use stack to load status
0c3a : 28              >            plp
                        
                                tst_stat overfl
0c3b : 08              >            php         ;save status
0c3c : 68              >            pla         ;use stack to retrieve status
0c3d : 48              >            pha
                       >            cmp_flag overfl
0c3e : c970            >            cmp #(overfl|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0c40 : f003            >        beq skip0469
                       >        trap            ;failed not equal (non zero)
0c42 : 206144          >        jsr sp4_trap_fail 
                       >
0c45 :                 >skip0469
                       >
0c45 : 28              >            plp         ;restore status
                        
0c46 : b8                       clv
                                tst_stat 0
0c47 : 08              >            php         ;save status
0c48 : 68              >            pla         ;use stack to retrieve status
0c49 : 48              >            pha
                       >            cmp_flag 0
0c4a : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0c4c : f003            >        beq skip0473
                       >        trap            ;failed not equal (non zero)
0c4e : 206144          >        jsr sp4_trap_fail 
                       >
0c51 :                 >skip0473
                       >
0c51 : 28              >            plp         ;restore status
                        
                                next_test
0c52 : ad0002          >            lda test_case   ;previous test
0c55 : c90c            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0c57 : f003            >        beq skip0476
                       >        trap            ;failed not equal (non zero)
0c59 : 206144          >        jsr sp4_trap_fail 
                       >
0c5c :                 >skip0476
                       >
000d =                 >test_num = test_num + 1
0c5c : a90d            >            lda #test_num   ;*** next tests' number
0c5e : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        ; testing index register increment/decrement and transfer
                        ; INX INY DEX DEY TAX TXA TAY TYA 
0c61 : a2fe                     ldx #$fe
                                set_stat $ff
                       >            load_flag $ff
0c63 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0c65 : 48              >            pha         ;use stack to load status
0c66 : 28              >            plp
                        
0c67 : e8                       inx             ;ff
                                tst_x $ff,$ff-zero
0c68 : 08              >            php         ;save flags
0c69 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0c6b : f003            >        beq skip0481
                       >        trap            ;failed not equal (non zero)
0c6d : 206144          >        jsr sp4_trap_fail 
                       >
0c70 :                 >skip0481
                       >
0c70 : 68              >            pla         ;load status
0c71 : 48              >            pha
                       >            cmp_flag $ff-zero
0c72 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0c74 : f003            >        beq skip0484
                       >        trap            ;failed not equal (non zero)
0c76 : 206144          >        jsr sp4_trap_fail 
                       >
0c79 :                 >skip0484
                       >
0c79 : 28              >            plp         ;restore status
                        
0c7a : e8                       inx             ;00
                                tst_x 0,$ff-minus
0c7b : 08              >            php         ;save flags
0c7c : e000            >            cpx #0     ;test result
                       >            trap_ne
0c7e : f003            >        beq skip0487
                       >        trap            ;failed not equal (non zero)
0c80 : 206144          >        jsr sp4_trap_fail 
                       >
0c83 :                 >skip0487
                       >
0c83 : 68              >            pla         ;load status
0c84 : 48              >            pha
                       >            cmp_flag $ff-minus
0c85 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0c87 : f003            >        beq skip0490
                       >        trap            ;failed not equal (non zero)
0c89 : 206144          >        jsr sp4_trap_fail 
                       >
0c8c :                 >skip0490
                       >
0c8c : 28              >            plp         ;restore status
                        
0c8d : e8                       inx             ;01
                                tst_x 1,$ff-minus-zero
0c8e : 08              >            php         ;save flags
0c8f : e001            >            cpx #1     ;test result
                       >            trap_ne
0c91 : f003            >        beq skip0493
                       >        trap            ;failed not equal (non zero)
0c93 : 206144          >        jsr sp4_trap_fail 
                       >
0c96 :                 >skip0493
                       >
0c96 : 68              >            pla         ;load status
0c97 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0c98 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0c9a : f003            >        beq skip0496
                       >        trap            ;failed not equal (non zero)
0c9c : 206144          >        jsr sp4_trap_fail 
                       >
0c9f :                 >skip0496
                       >
0c9f : 28              >            plp         ;restore status
                        
0ca0 : ca                       dex             ;00
                                tst_x 0,$ff-minus
0ca1 : 08              >            php         ;save flags
0ca2 : e000            >            cpx #0     ;test result
                       >            trap_ne
0ca4 : f003            >        beq skip0499
                       >        trap            ;failed not equal (non zero)
0ca6 : 206144          >        jsr sp4_trap_fail 
                       >
0ca9 :                 >skip0499
                       >
0ca9 : 68              >            pla         ;load status
0caa : 48              >            pha
                       >            cmp_flag $ff-minus
0cab : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0cad : f003            >        beq skip0502
                       >        trap            ;failed not equal (non zero)
0caf : 206144          >        jsr sp4_trap_fail 
                       >
0cb2 :                 >skip0502
                       >
0cb2 : 28              >            plp         ;restore status
                        
0cb3 : ca                       dex             ;ff
                                tst_x $ff,$ff-zero
0cb4 : 08              >            php         ;save flags
0cb5 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0cb7 : f003            >        beq skip0505
                       >        trap            ;failed not equal (non zero)
0cb9 : 206144          >        jsr sp4_trap_fail 
                       >
0cbc :                 >skip0505
                       >
0cbc : 68              >            pla         ;load status
0cbd : 48              >            pha
                       >            cmp_flag $ff-zero
0cbe : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0cc0 : f003            >        beq skip0508
                       >        trap            ;failed not equal (non zero)
0cc2 : 206144          >        jsr sp4_trap_fail 
                       >
0cc5 :                 >skip0508
                       >
0cc5 : 28              >            plp         ;restore status
                        
0cc6 : ca                       dex             ;fe
                                set_stat 0
                       >            load_flag 0
0cc7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0cc9 : 48              >            pha         ;use stack to load status
0cca : 28              >            plp
                        
0ccb : e8                       inx             ;ff
                                tst_x $ff,minus
0ccc : 08              >            php         ;save flags
0ccd : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0ccf : f003            >        beq skip0513
                       >        trap            ;failed not equal (non zero)
0cd1 : 206144          >        jsr sp4_trap_fail 
                       >
0cd4 :                 >skip0513
                       >
0cd4 : 68              >            pla         ;load status
0cd5 : 48              >            pha
                       >            cmp_flag minus
0cd6 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0cd8 : f003            >        beq skip0516
                       >        trap            ;failed not equal (non zero)
0cda : 206144          >        jsr sp4_trap_fail 
                       >
0cdd :                 >skip0516
                       >
0cdd : 28              >            plp         ;restore status
                        
0cde : e8                       inx             ;00
                                tst_x 0,zero
0cdf : 08              >            php         ;save flags
0ce0 : e000            >            cpx #0     ;test result
                       >            trap_ne
0ce2 : f003            >        beq skip0519
                       >        trap            ;failed not equal (non zero)
0ce4 : 206144          >        jsr sp4_trap_fail 
                       >
0ce7 :                 >skip0519
                       >
0ce7 : 68              >            pla         ;load status
0ce8 : 48              >            pha
                       >            cmp_flag zero
0ce9 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0ceb : f003            >        beq skip0522
                       >        trap            ;failed not equal (non zero)
0ced : 206144          >        jsr sp4_trap_fail 
                       >
0cf0 :                 >skip0522
                       >
0cf0 : 28              >            plp         ;restore status
                        
0cf1 : e8                       inx             ;01
                                tst_x 1,0
0cf2 : 08              >            php         ;save flags
0cf3 : e001            >            cpx #1     ;test result
                       >            trap_ne
0cf5 : f003            >        beq skip0525
                       >        trap            ;failed not equal (non zero)
0cf7 : 206144          >        jsr sp4_trap_fail 
                       >
0cfa :                 >skip0525
                       >
0cfa : 68              >            pla         ;load status
0cfb : 48              >            pha
                       >            cmp_flag 0
0cfc : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0cfe : f003            >        beq skip0528
                       >        trap            ;failed not equal (non zero)
0d00 : 206144          >        jsr sp4_trap_fail 
                       >
0d03 :                 >skip0528
                       >
0d03 : 28              >            plp         ;restore status
                        
0d04 : ca                       dex             ;00
                                tst_x 0,zero
0d05 : 08              >            php         ;save flags
0d06 : e000            >            cpx #0     ;test result
                       >            trap_ne
0d08 : f003            >        beq skip0531
                       >        trap            ;failed not equal (non zero)
0d0a : 206144          >        jsr sp4_trap_fail 
                       >
0d0d :                 >skip0531
                       >
0d0d : 68              >            pla         ;load status
0d0e : 48              >            pha
                       >            cmp_flag zero
0d0f : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0d11 : f003            >        beq skip0534
                       >        trap            ;failed not equal (non zero)
0d13 : 206144          >        jsr sp4_trap_fail 
                       >
0d16 :                 >skip0534
                       >
0d16 : 28              >            plp         ;restore status
                        
0d17 : ca                       dex             ;ff
                                tst_x $ff,minus
0d18 : 08              >            php         ;save flags
0d19 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0d1b : f003            >        beq skip0537
                       >        trap            ;failed not equal (non zero)
0d1d : 206144          >        jsr sp4_trap_fail 
                       >
0d20 :                 >skip0537
                       >
0d20 : 68              >            pla         ;load status
0d21 : 48              >            pha
                       >            cmp_flag minus
0d22 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0d24 : f003            >        beq skip0540
                       >        trap            ;failed not equal (non zero)
0d26 : 206144          >        jsr sp4_trap_fail 
                       >
0d29 :                 >skip0540
                       >
0d29 : 28              >            plp         ;restore status
                        
                        
0d2a : a0fe                     ldy #$fe
                                set_stat $ff
                       >            load_flag $ff
0d2c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0d2e : 48              >            pha         ;use stack to load status
0d2f : 28              >            plp
                        
0d30 : c8                       iny             ;ff
                                tst_y $ff,$ff-zero
0d31 : 08              >            php         ;save flags
0d32 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0d34 : f003            >        beq skip0545
                       >        trap            ;failed not equal (non zero)
0d36 : 206144          >        jsr sp4_trap_fail 
                       >
0d39 :                 >skip0545
                       >
0d39 : 68              >            pla         ;load status
0d3a : 48              >            pha
                       >            cmp_flag $ff-zero
0d3b : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0d3d : f003            >        beq skip0548
                       >        trap            ;failed not equal (non zero)
0d3f : 206144          >        jsr sp4_trap_fail 
                       >
0d42 :                 >skip0548
                       >
0d42 : 28              >            plp         ;restore status
                        
0d43 : c8                       iny             ;00
                                tst_y 0,$ff-minus
0d44 : 08              >            php         ;save flags
0d45 : c000            >            cpy #0     ;test result
                       >            trap_ne
0d47 : f003            >        beq skip0551
                       >        trap            ;failed not equal (non zero)
0d49 : 206144          >        jsr sp4_trap_fail 
                       >
0d4c :                 >skip0551
                       >
0d4c : 68              >            pla         ;load status
0d4d : 48              >            pha
                       >            cmp_flag $ff-minus
0d4e : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0d50 : f003            >        beq skip0554
                       >        trap            ;failed not equal (non zero)
0d52 : 206144          >        jsr sp4_trap_fail 
                       >
0d55 :                 >skip0554
                       >
0d55 : 28              >            plp         ;restore status
                        
0d56 : c8                       iny             ;01
                                tst_y 1,$ff-minus-zero
0d57 : 08              >            php         ;save flags
0d58 : c001            >            cpy #1     ;test result
                       >            trap_ne
0d5a : f003            >        beq skip0557
                       >        trap            ;failed not equal (non zero)
0d5c : 206144          >        jsr sp4_trap_fail 
                       >
0d5f :                 >skip0557
                       >
0d5f : 68              >            pla         ;load status
0d60 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0d61 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0d63 : f003            >        beq skip0560
                       >        trap            ;failed not equal (non zero)
0d65 : 206144          >        jsr sp4_trap_fail 
                       >
0d68 :                 >skip0560
                       >
0d68 : 28              >            plp         ;restore status
                        
0d69 : 88                       dey             ;00
                                tst_y 0,$ff-minus
0d6a : 08              >            php         ;save flags
0d6b : c000            >            cpy #0     ;test result
                       >            trap_ne
0d6d : f003            >        beq skip0563
                       >        trap            ;failed not equal (non zero)
0d6f : 206144          >        jsr sp4_trap_fail 
                       >
0d72 :                 >skip0563
                       >
0d72 : 68              >            pla         ;load status
0d73 : 48              >            pha
                       >            cmp_flag $ff-minus
0d74 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0d76 : f003            >        beq skip0566
                       >        trap            ;failed not equal (non zero)
0d78 : 206144          >        jsr sp4_trap_fail 
                       >
0d7b :                 >skip0566
                       >
0d7b : 28              >            plp         ;restore status
                        
0d7c : 88                       dey             ;ff
                                tst_y $ff,$ff-zero
0d7d : 08              >            php         ;save flags
0d7e : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0d80 : f003            >        beq skip0569
                       >        trap            ;failed not equal (non zero)
0d82 : 206144          >        jsr sp4_trap_fail 
                       >
0d85 :                 >skip0569
                       >
0d85 : 68              >            pla         ;load status
0d86 : 48              >            pha
                       >            cmp_flag $ff-zero
0d87 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0d89 : f003            >        beq skip0572
                       >        trap            ;failed not equal (non zero)
0d8b : 206144          >        jsr sp4_trap_fail 
                       >
0d8e :                 >skip0572
                       >
0d8e : 28              >            plp         ;restore status
                        
0d8f : 88                       dey             ;fe
                                set_stat 0
                       >            load_flag 0
0d90 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0d92 : 48              >            pha         ;use stack to load status
0d93 : 28              >            plp
                        
0d94 : c8                       iny             ;ff
                                tst_y $ff,0+minus
0d95 : 08              >            php         ;save flags
0d96 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0d98 : f003            >        beq skip0577
                       >        trap            ;failed not equal (non zero)
0d9a : 206144          >        jsr sp4_trap_fail 
                       >
0d9d :                 >skip0577
                       >
0d9d : 68              >            pla         ;load status
0d9e : 48              >            pha
                       >            cmp_flag 0+minus
0d9f : c9b0            >            cmp #(0+minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0da1 : f003            >        beq skip0580
                       >        trap            ;failed not equal (non zero)
0da3 : 206144          >        jsr sp4_trap_fail 
                       >
0da6 :                 >skip0580
                       >
0da6 : 28              >            plp         ;restore status
                        
0da7 : c8                       iny             ;00
                                tst_y 0,zero
0da8 : 08              >            php         ;save flags
0da9 : c000            >            cpy #0     ;test result
                       >            trap_ne
0dab : f003            >        beq skip0583
                       >        trap            ;failed not equal (non zero)
0dad : 206144          >        jsr sp4_trap_fail 
                       >
0db0 :                 >skip0583
                       >
0db0 : 68              >            pla         ;load status
0db1 : 48              >            pha
                       >            cmp_flag zero
0db2 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0db4 : f003            >        beq skip0586
                       >        trap            ;failed not equal (non zero)
0db6 : 206144          >        jsr sp4_trap_fail 
                       >
0db9 :                 >skip0586
                       >
0db9 : 28              >            plp         ;restore status
                        
0dba : c8                       iny             ;01
                                tst_y 1,0
0dbb : 08              >            php         ;save flags
0dbc : c001            >            cpy #1     ;test result
                       >            trap_ne
0dbe : f003            >        beq skip0589
                       >        trap            ;failed not equal (non zero)
0dc0 : 206144          >        jsr sp4_trap_fail 
                       >
0dc3 :                 >skip0589
                       >
0dc3 : 68              >            pla         ;load status
0dc4 : 48              >            pha
                       >            cmp_flag 0
0dc5 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0dc7 : f003            >        beq skip0592
                       >        trap            ;failed not equal (non zero)
0dc9 : 206144          >        jsr sp4_trap_fail 
                       >
0dcc :                 >skip0592
                       >
0dcc : 28              >            plp         ;restore status
                        
0dcd : 88                       dey             ;00
                                tst_y 0,zero
0dce : 08              >            php         ;save flags
0dcf : c000            >            cpy #0     ;test result
                       >            trap_ne
0dd1 : f003            >        beq skip0595
                       >        trap            ;failed not equal (non zero)
0dd3 : 206144          >        jsr sp4_trap_fail 
                       >
0dd6 :                 >skip0595
                       >
0dd6 : 68              >            pla         ;load status
0dd7 : 48              >            pha
                       >            cmp_flag zero
0dd8 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0dda : f003            >        beq skip0598
                       >        trap            ;failed not equal (non zero)
0ddc : 206144          >        jsr sp4_trap_fail 
                       >
0ddf :                 >skip0598
                       >
0ddf : 28              >            plp         ;restore status
                        
0de0 : 88                       dey             ;ff
                                tst_y $ff,minus
0de1 : 08              >            php         ;save flags
0de2 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0de4 : f003            >        beq skip0601
                       >        trap            ;failed not equal (non zero)
0de6 : 206144          >        jsr sp4_trap_fail 
                       >
0de9 :                 >skip0601
                       >
0de9 : 68              >            pla         ;load status
0dea : 48              >            pha
                       >            cmp_flag minus
0deb : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0ded : f003            >        beq skip0604
                       >        trap            ;failed not equal (non zero)
0def : 206144          >        jsr sp4_trap_fail 
                       >
0df2 :                 >skip0604
                       >
0df2 : 28              >            plp         ;restore status
                        
                                        
0df3 : a2ff                     ldx #$ff
                                set_stat $ff
                       >            load_flag $ff
0df5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0df7 : 48              >            pha         ;use stack to load status
0df8 : 28              >            plp
                        
0df9 : 8a                       txa
                                tst_a $ff,$ff-zero
0dfa : 08              >            php         ;save flags
0dfb : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0dfd : f003            >        beq skip0609
                       >        trap            ;failed not equal (non zero)
0dff : 206144          >        jsr sp4_trap_fail 
                       >
0e02 :                 >skip0609
                       >
0e02 : 68              >            pla         ;load status
0e03 : 48              >            pha
                       >            cmp_flag $ff-zero
0e04 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0e06 : f003            >        beq skip0612
                       >        trap            ;failed not equal (non zero)
0e08 : 206144          >        jsr sp4_trap_fail 
                       >
0e0b :                 >skip0612
                       >
0e0b : 28              >            plp         ;restore status
                        
0e0c : 08                       php
0e0d : e8                       inx             ;00
0e0e : 28                       plp
0e0f : 8a                       txa
                                tst_a 0,$ff-minus
0e10 : 08              >            php         ;save flags
0e11 : c900            >            cmp #0     ;test result
                       >            trap_ne
0e13 : f003            >        beq skip0615
                       >        trap            ;failed not equal (non zero)
0e15 : 206144          >        jsr sp4_trap_fail 
                       >
0e18 :                 >skip0615
                       >
0e18 : 68              >            pla         ;load status
0e19 : 48              >            pha
                       >            cmp_flag $ff-minus
0e1a : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0e1c : f003            >        beq skip0618
                       >        trap            ;failed not equal (non zero)
0e1e : 206144          >        jsr sp4_trap_fail 
                       >
0e21 :                 >skip0618
                       >
0e21 : 28              >            plp         ;restore status
                        
0e22 : 08                       php
0e23 : e8                       inx             ;01
0e24 : 28                       plp
0e25 : 8a                       txa
                                tst_a 1,$ff-minus-zero
0e26 : 08              >            php         ;save flags
0e27 : c901            >            cmp #1     ;test result
                       >            trap_ne
0e29 : f003            >        beq skip0621
                       >        trap            ;failed not equal (non zero)
0e2b : 206144          >        jsr sp4_trap_fail 
                       >
0e2e :                 >skip0621
                       >
0e2e : 68              >            pla         ;load status
0e2f : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0e30 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0e32 : f003            >        beq skip0624
                       >        trap            ;failed not equal (non zero)
0e34 : 206144          >        jsr sp4_trap_fail 
                       >
0e37 :                 >skip0624
                       >
0e37 : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
0e38 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0e3a : 48              >            pha         ;use stack to load status
0e3b : 28              >            plp
                        
0e3c : 8a                       txa
                                tst_a 1,0
0e3d : 08              >            php         ;save flags
0e3e : c901            >            cmp #1     ;test result
                       >            trap_ne
0e40 : f003            >        beq skip0629
                       >        trap            ;failed not equal (non zero)
0e42 : 206144          >        jsr sp4_trap_fail 
                       >
0e45 :                 >skip0629
                       >
0e45 : 68              >            pla         ;load status
0e46 : 48              >            pha
                       >            cmp_flag 0
0e47 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0e49 : f003            >        beq skip0632
                       >        trap            ;failed not equal (non zero)
0e4b : 206144          >        jsr sp4_trap_fail 
                       >
0e4e :                 >skip0632
                       >
0e4e : 28              >            plp         ;restore status
                        
0e4f : 08                       php
0e50 : ca                       dex             ;00
0e51 : 28                       plp
0e52 : 8a                       txa
                                tst_a 0,zero
0e53 : 08              >            php         ;save flags
0e54 : c900            >            cmp #0     ;test result
                       >            trap_ne
0e56 : f003            >        beq skip0635
                       >        trap            ;failed not equal (non zero)
0e58 : 206144          >        jsr sp4_trap_fail 
                       >
0e5b :                 >skip0635
                       >
0e5b : 68              >            pla         ;load status
0e5c : 48              >            pha
                       >            cmp_flag zero
0e5d : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0e5f : f003            >        beq skip0638
                       >        trap            ;failed not equal (non zero)
0e61 : 206144          >        jsr sp4_trap_fail 
                       >
0e64 :                 >skip0638
                       >
0e64 : 28              >            plp         ;restore status
                        
0e65 : 08                       php
0e66 : ca                       dex             ;ff
0e67 : 28                       plp
0e68 : 8a                       txa
                                tst_a $ff,minus
0e69 : 08              >            php         ;save flags
0e6a : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0e6c : f003            >        beq skip0641
                       >        trap            ;failed not equal (non zero)
0e6e : 206144          >        jsr sp4_trap_fail 
                       >
0e71 :                 >skip0641
                       >
0e71 : 68              >            pla         ;load status
0e72 : 48              >            pha
                       >            cmp_flag minus
0e73 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0e75 : f003            >        beq skip0644
                       >        trap            ;failed not equal (non zero)
0e77 : 206144          >        jsr sp4_trap_fail 
                       >
0e7a :                 >skip0644
                       >
0e7a : 28              >            plp         ;restore status
                        
                                                
0e7b : a0ff                     ldy #$ff
                                set_stat $ff
                       >            load_flag $ff
0e7d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0e7f : 48              >            pha         ;use stack to load status
0e80 : 28              >            plp
                        
0e81 : 98                       tya
                                tst_a $ff,$ff-zero
0e82 : 08              >            php         ;save flags
0e83 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0e85 : f003            >        beq skip0649
                       >        trap            ;failed not equal (non zero)
0e87 : 206144          >        jsr sp4_trap_fail 
                       >
0e8a :                 >skip0649
                       >
0e8a : 68              >            pla         ;load status
0e8b : 48              >            pha
                       >            cmp_flag $ff-zero
0e8c : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0e8e : f003            >        beq skip0652
                       >        trap            ;failed not equal (non zero)
0e90 : 206144          >        jsr sp4_trap_fail 
                       >
0e93 :                 >skip0652
                       >
0e93 : 28              >            plp         ;restore status
                        
0e94 : 08                       php
0e95 : c8                       iny             ;00
0e96 : 28                       plp
0e97 : 98                       tya
                                tst_a 0,$ff-minus
0e98 : 08              >            php         ;save flags
0e99 : c900            >            cmp #0     ;test result
                       >            trap_ne
0e9b : f003            >        beq skip0655
                       >        trap            ;failed not equal (non zero)
0e9d : 206144          >        jsr sp4_trap_fail 
                       >
0ea0 :                 >skip0655
                       >
0ea0 : 68              >            pla         ;load status
0ea1 : 48              >            pha
                       >            cmp_flag $ff-minus
0ea2 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0ea4 : f003            >        beq skip0658
                       >        trap            ;failed not equal (non zero)
0ea6 : 206144          >        jsr sp4_trap_fail 
                       >
0ea9 :                 >skip0658
                       >
0ea9 : 28              >            plp         ;restore status
                        
0eaa : 08                       php
0eab : c8                       iny             ;01
0eac : 28                       plp
0ead : 98                       tya
                                tst_a 1,$ff-minus-zero
0eae : 08              >            php         ;save flags
0eaf : c901            >            cmp #1     ;test result
                       >            trap_ne
0eb1 : f003            >        beq skip0661
                       >        trap            ;failed not equal (non zero)
0eb3 : 206144          >        jsr sp4_trap_fail 
                       >
0eb6 :                 >skip0661
                       >
0eb6 : 68              >            pla         ;load status
0eb7 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0eb8 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0eba : f003            >        beq skip0664
                       >        trap            ;failed not equal (non zero)
0ebc : 206144          >        jsr sp4_trap_fail 
                       >
0ebf :                 >skip0664
                       >
0ebf : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
0ec0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0ec2 : 48              >            pha         ;use stack to load status
0ec3 : 28              >            plp
                        
0ec4 : 98                       tya
                                tst_a 1,0
0ec5 : 08              >            php         ;save flags
0ec6 : c901            >            cmp #1     ;test result
                       >            trap_ne
0ec8 : f003            >        beq skip0669
                       >        trap            ;failed not equal (non zero)
0eca : 206144          >        jsr sp4_trap_fail 
                       >
0ecd :                 >skip0669
                       >
0ecd : 68              >            pla         ;load status
0ece : 48              >            pha
                       >            cmp_flag 0
0ecf : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0ed1 : f003            >        beq skip0672
                       >        trap            ;failed not equal (non zero)
0ed3 : 206144          >        jsr sp4_trap_fail 
                       >
0ed6 :                 >skip0672
                       >
0ed6 : 28              >            plp         ;restore status
                        
0ed7 : 08                       php
0ed8 : 88                       dey             ;00
0ed9 : 28                       plp
0eda : 98                       tya
                                tst_a 0,zero
0edb : 08              >            php         ;save flags
0edc : c900            >            cmp #0     ;test result
                       >            trap_ne
0ede : f003            >        beq skip0675
                       >        trap            ;failed not equal (non zero)
0ee0 : 206144          >        jsr sp4_trap_fail 
                       >
0ee3 :                 >skip0675
                       >
0ee3 : 68              >            pla         ;load status
0ee4 : 48              >            pha
                       >            cmp_flag zero
0ee5 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0ee7 : f003            >        beq skip0678
                       >        trap            ;failed not equal (non zero)
0ee9 : 206144          >        jsr sp4_trap_fail 
                       >
0eec :                 >skip0678
                       >
0eec : 28              >            plp         ;restore status
                        
0eed : 08                       php
0eee : 88                       dey             ;ff
0eef : 28                       plp
0ef0 : 98                       tya
                                tst_a $ff,minus
0ef1 : 08              >            php         ;save flags
0ef2 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0ef4 : f003            >        beq skip0681
                       >        trap            ;failed not equal (non zero)
0ef6 : 206144          >        jsr sp4_trap_fail 
                       >
0ef9 :                 >skip0681
                       >
0ef9 : 68              >            pla         ;load status
0efa : 48              >            pha
                       >            cmp_flag minus
0efb : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0efd : f003            >        beq skip0684
                       >        trap            ;failed not equal (non zero)
0eff : 206144          >        jsr sp4_trap_fail 
                       >
0f02 :                 >skip0684
                       >
0f02 : 28              >            plp         ;restore status
                        
                        
                                load_flag $ff
0f03 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                        
0f05 : 48                       pha
0f06 : a2ff                     ldx #$ff        ;ff
0f08 : 8a                       txa
0f09 : 28                       plp             
0f0a : a8                       tay
                                tst_y $ff,$ff-zero
0f0b : 08              >            php         ;save flags
0f0c : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0f0e : f003            >        beq skip0688
                       >        trap            ;failed not equal (non zero)
0f10 : 206144          >        jsr sp4_trap_fail 
                       >
0f13 :                 >skip0688
                       >
0f13 : 68              >            pla         ;load status
0f14 : 48              >            pha
                       >            cmp_flag $ff-zero
0f15 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0f17 : f003            >        beq skip0691
                       >        trap            ;failed not equal (non zero)
0f19 : 206144          >        jsr sp4_trap_fail 
                       >
0f1c :                 >skip0691
                       >
0f1c : 28              >            plp         ;restore status
                        
0f1d : 08                       php
0f1e : e8                       inx             ;00
0f1f : 8a                       txa
0f20 : 28                       plp
0f21 : a8                       tay
                                tst_y 0,$ff-minus
0f22 : 08              >            php         ;save flags
0f23 : c000            >            cpy #0     ;test result
                       >            trap_ne
0f25 : f003            >        beq skip0694
                       >        trap            ;failed not equal (non zero)
0f27 : 206144          >        jsr sp4_trap_fail 
                       >
0f2a :                 >skip0694
                       >
0f2a : 68              >            pla         ;load status
0f2b : 48              >            pha
                       >            cmp_flag $ff-minus
0f2c : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0f2e : f003            >        beq skip0697
                       >        trap            ;failed not equal (non zero)
0f30 : 206144          >        jsr sp4_trap_fail 
                       >
0f33 :                 >skip0697
                       >
0f33 : 28              >            plp         ;restore status
                        
0f34 : 08                       php
0f35 : e8                       inx             ;01
0f36 : 8a                       txa
0f37 : 28                       plp
0f38 : a8                       tay
                                tst_y 1,$ff-minus-zero
0f39 : 08              >            php         ;save flags
0f3a : c001            >            cpy #1     ;test result
                       >            trap_ne
0f3c : f003            >        beq skip0700
                       >        trap            ;failed not equal (non zero)
0f3e : 206144          >        jsr sp4_trap_fail 
                       >
0f41 :                 >skip0700
                       >
0f41 : 68              >            pla         ;load status
0f42 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0f43 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0f45 : f003            >        beq skip0703
                       >        trap            ;failed not equal (non zero)
0f47 : 206144          >        jsr sp4_trap_fail 
                       >
0f4a :                 >skip0703
                       >
0f4a : 28              >            plp         ;restore status
                        
                                load_flag 0
0f4b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                        
0f4d : 48                       pha
0f4e : a900                     lda #0
0f50 : 8a                       txa
0f51 : 28                       plp
0f52 : a8                       tay
                                tst_y 1,0
0f53 : 08              >            php         ;save flags
0f54 : c001            >            cpy #1     ;test result
                       >            trap_ne
0f56 : f003            >        beq skip0707
                       >        trap            ;failed not equal (non zero)
0f58 : 206144          >        jsr sp4_trap_fail 
                       >
0f5b :                 >skip0707
                       >
0f5b : 68              >            pla         ;load status
0f5c : 48              >            pha
                       >            cmp_flag 0
0f5d : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0f5f : f003            >        beq skip0710
                       >        trap            ;failed not equal (non zero)
0f61 : 206144          >        jsr sp4_trap_fail 
                       >
0f64 :                 >skip0710
                       >
0f64 : 28              >            plp         ;restore status
                        
0f65 : 08                       php
0f66 : ca                       dex             ;00
0f67 : 8a                       txa
0f68 : 28                       plp
0f69 : a8                       tay
                                tst_y 0,zero
0f6a : 08              >            php         ;save flags
0f6b : c000            >            cpy #0     ;test result
                       >            trap_ne
0f6d : f003            >        beq skip0713
                       >        trap            ;failed not equal (non zero)
0f6f : 206144          >        jsr sp4_trap_fail 
                       >
0f72 :                 >skip0713
                       >
0f72 : 68              >            pla         ;load status
0f73 : 48              >            pha
                       >            cmp_flag zero
0f74 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0f76 : f003            >        beq skip0716
                       >        trap            ;failed not equal (non zero)
0f78 : 206144          >        jsr sp4_trap_fail 
                       >
0f7b :                 >skip0716
                       >
0f7b : 28              >            plp         ;restore status
                        
0f7c : 08                       php
0f7d : ca                       dex             ;ff
0f7e : 8a                       txa
0f7f : 28                       plp
0f80 : a8                       tay
                                tst_y $ff,minus
0f81 : 08              >            php         ;save flags
0f82 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0f84 : f003            >        beq skip0719
                       >        trap            ;failed not equal (non zero)
0f86 : 206144          >        jsr sp4_trap_fail 
                       >
0f89 :                 >skip0719
                       >
0f89 : 68              >            pla         ;load status
0f8a : 48              >            pha
                       >            cmp_flag minus
0f8b : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0f8d : f003            >        beq skip0722
                       >        trap            ;failed not equal (non zero)
0f8f : 206144          >        jsr sp4_trap_fail 
                       >
0f92 :                 >skip0722
                       >
0f92 : 28              >            plp         ;restore status
                        
                        
                        
                                load_flag $ff
0f93 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                        
0f95 : 48                       pha
0f96 : a0ff                     ldy #$ff        ;ff
0f98 : 98                       tya
0f99 : 28                       plp
0f9a : aa                       tax
                                tst_x $ff,$ff-zero
0f9b : 08              >            php         ;save flags
0f9c : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0f9e : f003            >        beq skip0726
                       >        trap            ;failed not equal (non zero)
0fa0 : 206144          >        jsr sp4_trap_fail 
                       >
0fa3 :                 >skip0726
                       >
0fa3 : 68              >            pla         ;load status
0fa4 : 48              >            pha
                       >            cmp_flag $ff-zero
0fa5 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0fa7 : f003            >        beq skip0729
                       >        trap            ;failed not equal (non zero)
0fa9 : 206144          >        jsr sp4_trap_fail 
                       >
0fac :                 >skip0729
                       >
0fac : 28              >            plp         ;restore status
                        
0fad : 08                       php
0fae : c8                       iny             ;00
0faf : 98                       tya
0fb0 : 28                       plp
0fb1 : aa                       tax
                                tst_x 0,$ff-minus
0fb2 : 08              >            php         ;save flags
0fb3 : e000            >            cpx #0     ;test result
                       >            trap_ne
0fb5 : f003            >        beq skip0732
                       >        trap            ;failed not equal (non zero)
0fb7 : 206144          >        jsr sp4_trap_fail 
                       >
0fba :                 >skip0732
                       >
0fba : 68              >            pla         ;load status
0fbb : 48              >            pha
                       >            cmp_flag $ff-minus
0fbc : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0fbe : f003            >        beq skip0735
                       >        trap            ;failed not equal (non zero)
0fc0 : 206144          >        jsr sp4_trap_fail 
                       >
0fc3 :                 >skip0735
                       >
0fc3 : 28              >            plp         ;restore status
                        
0fc4 : 08                       php
0fc5 : c8                       iny             ;01
0fc6 : 98                       tya
0fc7 : 28                       plp
0fc8 : aa                       tax
                                tst_x 1,$ff-minus-zero
0fc9 : 08              >            php         ;save flags
0fca : e001            >            cpx #1     ;test result
                       >            trap_ne
0fcc : f003            >        beq skip0738
                       >        trap            ;failed not equal (non zero)
0fce : 206144          >        jsr sp4_trap_fail 
                       >
0fd1 :                 >skip0738
                       >
0fd1 : 68              >            pla         ;load status
0fd2 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0fd3 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0fd5 : f003            >        beq skip0741
                       >        trap            ;failed not equal (non zero)
0fd7 : 206144          >        jsr sp4_trap_fail 
                       >
0fda :                 >skip0741
                       >
0fda : 28              >            plp         ;restore status
                        
                                load_flag 0
0fdb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                        
0fdd : 48                       pha
0fde : a900                     lda #0          ;preset status
0fe0 : 98                       tya
0fe1 : 28                       plp
0fe2 : aa                       tax
                                tst_x 1,0
0fe3 : 08              >            php         ;save flags
0fe4 : e001            >            cpx #1     ;test result
                       >            trap_ne
0fe6 : f003            >        beq skip0745
                       >        trap            ;failed not equal (non zero)
0fe8 : 206144          >        jsr sp4_trap_fail 
                       >
0feb :                 >skip0745
                       >
0feb : 68              >            pla         ;load status
0fec : 48              >            pha
                       >            cmp_flag 0
0fed : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0fef : f003            >        beq skip0748
                       >        trap            ;failed not equal (non zero)
0ff1 : 206144          >        jsr sp4_trap_fail 
                       >
0ff4 :                 >skip0748
                       >
0ff4 : 28              >            plp         ;restore status
                        
0ff5 : 08                       php
0ff6 : 88                       dey             ;00
0ff7 : 98                       tya
0ff8 : 28                       plp
0ff9 : aa                       tax
                                tst_x 0,zero
0ffa : 08              >            php         ;save flags
0ffb : e000            >            cpx #0     ;test result
                       >            trap_ne
0ffd : f003            >        beq skip0751
                       >        trap            ;failed not equal (non zero)
0fff : 206144          >        jsr sp4_trap_fail 
                       >
1002 :                 >skip0751
                       >
1002 : 68              >            pla         ;load status
1003 : 48              >            pha
                       >            cmp_flag zero
1004 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1006 : f003            >        beq skip0754
                       >        trap            ;failed not equal (non zero)
1008 : 206144          >        jsr sp4_trap_fail 
                       >
100b :                 >skip0754
                       >
100b : 28              >            plp         ;restore status
                        
100c : 08                       php
100d : 88                       dey             ;ff
100e : 98                       tya
100f : 28                       plp
1010 : aa                       tax
                                tst_x $ff,minus
1011 : 08              >            php         ;save flags
1012 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
1014 : f003            >        beq skip0757
                       >        trap            ;failed not equal (non zero)
1016 : 206144          >        jsr sp4_trap_fail 
                       >
1019 :                 >skip0757
                       >
1019 : 68              >            pla         ;load status
101a : 48              >            pha
                       >            cmp_flag minus
101b : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
101d : f003            >        beq skip0760
                       >        trap            ;failed not equal (non zero)
101f : 206144          >        jsr sp4_trap_fail 
                       >
1022 :                 >skip0760
                       >
1022 : 28              >            plp         ;restore status
                        
                                next_test
1023 : ad0002          >            lda test_case   ;previous test
1026 : c90d            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1028 : f003            >        beq skip0763
                       >        trap            ;failed not equal (non zero)
102a : 206144          >        jsr sp4_trap_fail 
                       >
102d :                 >skip0763
                       >
000e =                 >test_num = test_num + 1
102d : a90e            >            lda #test_num   ;*** next tests' number
102f : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                             
                        ;TSX sets NZ - TXS does not
                        ;  This section also tests for proper stack wrap around.
1032 : a201                     ldx #1          ;01
                                set_stat $ff
                       >            load_flag $ff
1034 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1036 : 48              >            pha         ;use stack to load status
1037 : 28              >            plp
                        
1038 : 9a                       txs
1039 : 08                       php
103a : ad0101                   lda $101
                                cmp_flag $ff
103d : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
103f : f003            >        beq skip0768
                       >        trap            ;failed not equal (non zero)
1041 : 206144          >        jsr sp4_trap_fail 
                       >
1044 :                 >skip0768
                        
                                set_stat 0
                       >            load_flag 0
1044 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1046 : 48              >            pha         ;use stack to load status
1047 : 28              >            plp
                        
1048 : 9a                       txs
1049 : 08                       php
104a : ad0101                   lda $101
                                cmp_flag 0
104d : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
104f : f003            >        beq skip0773
                       >        trap            ;failed not equal (non zero)
1051 : 206144          >        jsr sp4_trap_fail 
                       >
1054 :                 >skip0773
                        
1054 : ca                       dex             ;00
                                set_stat $ff
                       >            load_flag $ff
1055 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1057 : 48              >            pha         ;use stack to load status
1058 : 28              >            plp
                        
1059 : 9a                       txs
105a : 08                       php
105b : ad0001                   lda $100
                                cmp_flag $ff
105e : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
1060 : f003            >        beq skip0778
                       >        trap            ;failed not equal (non zero)
1062 : 206144          >        jsr sp4_trap_fail 
                       >
1065 :                 >skip0778
                        
                                set_stat 0
                       >            load_flag 0
1065 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1067 : 48              >            pha         ;use stack to load status
1068 : 28              >            plp
                        
1069 : 9a                       txs
106a : 08                       php
106b : ad0001                   lda $100
                                cmp_flag 0
106e : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
1070 : f003            >        beq skip0783
                       >        trap            ;failed not equal (non zero)
1072 : 206144          >        jsr sp4_trap_fail 
                       >
1075 :                 >skip0783
                        
1075 : ca                       dex             ;ff
                                set_stat $ff
                       >            load_flag $ff
1076 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1078 : 48              >            pha         ;use stack to load status
1079 : 28              >            plp
                        
107a : 9a                       txs
107b : 08                       php
107c : adff01                   lda $1ff
                                cmp_flag $ff
107f : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
1081 : f003            >        beq skip0788
                       >        trap            ;failed not equal (non zero)
1083 : 206144          >        jsr sp4_trap_fail 
                       >
1086 :                 >skip0788
                        
                                set_stat 0
                       >            load_flag 0
1086 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1088 : 48              >            pha         ;use stack to load status
1089 : 28              >            plp
                        
108a : 9a                       txs
108b : 08                       php
108c : adff01                   lda $1ff
                                cmp_flag 0
108f : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                
1091 : a201                     ldx #1
1093 : 9a                       txs             ;sp=01
                                set_stat $ff
                       >            load_flag $ff
1094 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1096 : 48              >            pha         ;use stack to load status
1097 : 28              >            plp
                        
1098 : ba                       tsx             ;clears Z, N
1099 : 08                       php             ;sp=00
109a : e001                     cpx #1
                                trap_ne
109c : f003            >        beq skip0795
                       >        trap            ;failed not equal (non zero)
109e : 206144          >        jsr sp4_trap_fail 
                       >
10a1 :                 >skip0795
                        
10a1 : ad0101                   lda $101
                                cmp_flag $ff-minus-zero
10a4 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
10a6 : f003            >        beq skip0798
                       >        trap            ;failed not equal (non zero)
10a8 : 206144          >        jsr sp4_trap_fail 
                       >
10ab :                 >skip0798
                        
                                set_stat $ff
                       >            load_flag $ff
10ab : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
10ad : 48              >            pha         ;use stack to load status
10ae : 28              >            plp
                        
10af : ba                       tsx             ;clears N, sets Z
10b0 : 08                       php             ;sp=ff
10b1 : e000                     cpx #0
                                trap_ne
10b3 : f003            >        beq skip0802
                       >        trap            ;failed not equal (non zero)
10b5 : 206144          >        jsr sp4_trap_fail 
                       >
10b8 :                 >skip0802
                        
10b8 : ad0001                   lda $100
                                cmp_flag $ff-minus
10bb : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
10bd : f003            >        beq skip0805
                       >        trap            ;failed not equal (non zero)
10bf : 206144          >        jsr sp4_trap_fail 
                       >
10c2 :                 >skip0805
                        
                                set_stat $ff
                       >            load_flag $ff
10c2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
10c4 : 48              >            pha         ;use stack to load status
10c5 : 28              >            plp
                        
10c6 : ba                       tsx             ;clears N, sets Z
10c7 : 08                       php             ;sp=fe
10c8 : e0ff                     cpx #$ff
                                trap_ne
10ca : f003            >        beq skip0809
                       >        trap            ;failed not equal (non zero)
10cc : 206144          >        jsr sp4_trap_fail 
                       >
10cf :                 >skip0809
                        
10cf : adff01                   lda $1ff
                                cmp_flag $ff-zero
10d2 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
10d4 : f003            >        beq skip0812
                       >        trap            ;failed not equal (non zero)
10d6 : 206144          >        jsr sp4_trap_fail 
                       >
10d9 :                 >skip0812
                        
                                
10d9 : a201                     ldx #1
10db : 9a                       txs             ;sp=01
                                set_stat 0
                       >            load_flag 0
10dc : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
10de : 48              >            pha         ;use stack to load status
10df : 28              >            plp
                        
10e0 : ba                       tsx             ;clears Z, N
10e1 : 08                       php             ;sp=00
10e2 : e001                     cpx #1
                                trap_ne
10e4 : f003            >        beq skip0816
                       >        trap            ;failed not equal (non zero)
10e6 : 206144          >        jsr sp4_trap_fail 
                       >
10e9 :                 >skip0816
                        
10e9 : ad0101                   lda $101
                                cmp_flag 0
10ec : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
10ee : f003            >        beq skip0819
                       >        trap            ;failed not equal (non zero)
10f0 : 206144          >        jsr sp4_trap_fail 
                       >
10f3 :                 >skip0819
                        
                                set_stat 0
                       >            load_flag 0
10f3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
10f5 : 48              >            pha         ;use stack to load status
10f6 : 28              >            plp
                        
10f7 : ba                       tsx             ;clears N, sets Z
10f8 : 08                       php             ;sp=ff
10f9 : e000                     cpx #0
                                trap_ne
10fb : f003            >        beq skip0823
                       >        trap            ;failed not equal (non zero)
10fd : 206144          >        jsr sp4_trap_fail 
                       >
1100 :                 >skip0823
                        
1100 : ad0001                   lda $100
                                cmp_flag zero
1103 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
1105 : f003            >        beq skip0826
                       >        trap            ;failed not equal (non zero)
1107 : 206144          >        jsr sp4_trap_fail 
                       >
110a :                 >skip0826
                        
                                set_stat 0
                       >            load_flag 0
110a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
110c : 48              >            pha         ;use stack to load status
110d : 28              >            plp
                        
110e : ba                       tsx             ;clears N, sets Z
110f : 08                       php             ;sp=fe
1110 : e0ff                     cpx #$ff
                                trap_ne
1112 : f003            >        beq skip0830
                       >        trap            ;failed not equal (non zero)
1114 : 206144          >        jsr sp4_trap_fail 
                       >
1117 :                 >skip0830
                        
1117 : adff01                   lda $1ff
                                cmp_flag minus
111a : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
111c : f003            >        beq skip0833
                       >        trap            ;failed not equal (non zero)
111e : 206144          >        jsr sp4_trap_fail 
                       >
1121 :                 >skip0833
                        
1121 : 68                       pla             ;sp=ff
                                next_test
1122 : ad0002          >            lda test_case   ;previous test
1125 : c90e            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1127 : f003            >        beq skip0836
                       >        trap            ;failed not equal (non zero)
1129 : 206144          >        jsr sp4_trap_fail 
                       >
112c :                 >skip0836
                       >
000f =                 >test_num = test_num + 1
112c : a90f            >            lda #test_num   ;*** next tests' number
112e : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; testing index register load & store LDY LDX STY STX all addressing modes
                        ; LDX / STX - zp,y / abs,y
1131 : a003                     ldy #3
1133 :                  tldx    
                                set_stat 0
                       >            load_flag 0
1133 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1135 : 48              >            pha         ;use stack to load status
1136 : 28              >            plp
                        
1137 : b60b                     ldx zp1,y
1139 : 08                       php         ;test stores do not alter flags
113a : 8a                       txa
113b : 49c3                     eor #$c3
113d : 28                       plp
113e : 990302                   sta abst,y
1141 : 08                       php         ;flags after load/store sequence
1142 : 49c3                     eor #$c3
1144 : d91802                   cmp abs1,y  ;test result
                                trap_ne
1147 : f003            >        beq skip0840
                       >        trap            ;failed not equal (non zero)
1149 : 206144          >        jsr sp4_trap_fail 
                       >
114c :                 >skip0840
                        
114c : 68                       pla         ;load status
                                eor_flag 0
114d : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
114f : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
1152 : f003            >        beq skip0843
                       >        trap            ;failed not equal (non zero)
1154 : 206144          >        jsr sp4_trap_fail 
                       >
1157 :                 >skip0843
                        
1157 : 88                       dey
1158 : 10d9                     bpl tldx                  
                        
115a : a003                     ldy #3
115c :                  tldx1   
                                set_stat $ff
                       >            load_flag $ff
115c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
115e : 48              >            pha         ;use stack to load status
115f : 28              >            plp
                        
1160 : b60b                     ldx zp1,y
1162 : 08                       php         ;test stores do not alter flags
1163 : 8a                       txa
1164 : 49c3                     eor #$c3
1166 : 28                       plp
1167 : 990302                   sta abst,y
116a : 08                       php         ;flags after load/store sequence
116b : 49c3                     eor #$c3
116d : d91802                   cmp abs1,y  ;test result
                                trap_ne
1170 : f003            >        beq skip0847
                       >        trap            ;failed not equal (non zero)
1172 : 206144          >        jsr sp4_trap_fail 
                       >
1175 :                 >skip0847
                        
1175 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1176 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1178 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
117b : f003            >        beq skip0850
                       >        trap            ;failed not equal (non zero)
117d : 206144          >        jsr sp4_trap_fail 
                       >
1180 :                 >skip0850
                        
1180 : 88                       dey
1181 : 10d9                     bpl tldx1                  
                        
1183 : a003                     ldy #3
1185 :                  tldx2   
                                set_stat 0
                       >            load_flag 0
1185 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1187 : 48              >            pha         ;use stack to load status
1188 : 28              >            plp
                        
1189 : be1802                   ldx abs1,y
118c : 08                       php         ;test stores do not alter flags
118d : 8a                       txa
118e : 49c3                     eor #$c3
1190 : aa                       tax
1191 : 28                       plp
1192 : 9602                     stx zpt,y
1194 : 08                       php         ;flags after load/store sequence
1195 : 49c3                     eor #$c3
1197 : d90b00                   cmp zp1,y   ;test result
                                trap_ne
119a : f003            >        beq skip0854
                       >        trap            ;failed not equal (non zero)
119c : 206144          >        jsr sp4_trap_fail 
                       >
119f :                 >skip0854
                        
119f : 68                       pla         ;load status
                                eor_flag 0
11a0 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
11a2 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
11a5 : f003            >        beq skip0857
                       >        trap            ;failed not equal (non zero)
11a7 : 206144          >        jsr sp4_trap_fail 
                       >
11aa :                 >skip0857
                        
11aa : 88                       dey
11ab : 10d8                     bpl tldx2                  
                        
11ad : a003                     ldy #3
11af :                  tldx3   
                                set_stat $ff
                       >            load_flag $ff
11af : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
11b1 : 48              >            pha         ;use stack to load status
11b2 : 28              >            plp
                        
11b3 : be1802                   ldx abs1,y
11b6 : 08                       php         ;test stores do not alter flags
11b7 : 8a                       txa
11b8 : 49c3                     eor #$c3
11ba : aa                       tax
11bb : 28                       plp
11bc : 9602                     stx zpt,y
11be : 08                       php         ;flags after load/store sequence
11bf : 49c3                     eor #$c3
11c1 : d90b00                   cmp zp1,y   ;test result
                                trap_ne
11c4 : f003            >        beq skip0861
                       >        trap            ;failed not equal (non zero)
11c6 : 206144          >        jsr sp4_trap_fail 
                       >
11c9 :                 >skip0861
                        
11c9 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
11ca : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
11cc : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
11cf : f003            >        beq skip0864
                       >        trap            ;failed not equal (non zero)
11d1 : 206144          >        jsr sp4_trap_fail 
                       >
11d4 :                 >skip0864
                        
11d4 : 88                       dey
11d5 : 10d8                     bpl tldx3
                                
11d7 : a003                     ldy #3      ;testing store result
11d9 : a200                     ldx #0
11db : b90200           tstx    lda zpt,y
11de : 49c3                     eor #$c3
11e0 : d90b00                   cmp zp1,y
                                trap_ne     ;store to zp data
11e3 : f003            >        beq skip0866
                       >        trap            ;failed not equal (non zero)
11e5 : 206144          >        jsr sp4_trap_fail 
                       >
11e8 :                 >skip0866
                        
11e8 : 9602                     stx zpt,y   ;clear                
11ea : b90302                   lda abst,y
11ed : 49c3                     eor #$c3
11ef : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
11f2 : f003            >        beq skip0868
                       >        trap            ;failed not equal (non zero)
11f4 : 206144          >        jsr sp4_trap_fail 
                       >
11f7 :                 >skip0868
                        
11f7 : 8a                       txa
11f8 : 990302                   sta abst,y  ;clear                
11fb : 88                       dey
11fc : 10dd                     bpl tstx
                                next_test
11fe : ad0002          >            lda test_case   ;previous test
1201 : c90f            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1203 : f003            >        beq skip0871
                       >        trap            ;failed not equal (non zero)
1205 : 206144          >        jsr sp4_trap_fail 
                       >
1208 :                 >skip0871
                       >
0010 =                 >test_num = test_num + 1
1208 : a910            >            lda #test_num   ;*** next tests' number
120a : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; indexed wraparound test (only zp should wrap)
120d : a0fd                     ldy #3+$fa
120f : b611             tldx4   ldx zp1-$fa&$ff,y   ;wrap on indexed zp
1211 : 8a                       txa
1212 : 990901                   sta abst-$fa,y      ;no STX abs,y!
1215 : 88                       dey
1216 : c0fa                     cpy #$fa
1218 : b0f5                     bcs tldx4                  
121a : a0fd                     ldy #3+$fa
121c : be1e01           tldx5   ldx abs1-$fa,y      ;no wrap on indexed abs
121f : 9608                     stx zpt-$fa&$ff,y
1221 : 88                       dey
1222 : c0fa                     cpy #$fa
1224 : b0f6                     bcs tldx5                  
1226 : a003                     ldy #3      ;testing wraparound result
1228 : a200                     ldx #0
122a : b90200           tstx1   lda zpt,y
122d : d90b00                   cmp zp1,y
                                trap_ne     ;store to zp data
1230 : f003            >        beq skip0873
                       >        trap            ;failed not equal (non zero)
1232 : 206144          >        jsr sp4_trap_fail 
                       >
1235 :                 >skip0873
                        
1235 : 9602                     stx zpt,y   ;clear                
1237 : b90302                   lda abst,y
123a : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
123d : f003            >        beq skip0875
                       >        trap            ;failed not equal (non zero)
123f : 206144          >        jsr sp4_trap_fail 
                       >
1242 :                 >skip0875
                        
1242 : 8a                       txa
1243 : 990302                   sta abst,y  ;clear                
1246 : 88                       dey
1247 : 10e1                     bpl tstx1
                                next_test
1249 : ad0002          >            lda test_case   ;previous test
124c : c910            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
124e : f003            >        beq skip0878
                       >        trap            ;failed not equal (non zero)
1250 : 206144          >        jsr sp4_trap_fail 
                       >
1253 :                 >skip0878
                       >
0011 =                 >test_num = test_num + 1
1253 : a911            >            lda #test_num   ;*** next tests' number
1255 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; LDY / STY - zp,x / abs,x
1258 : a203                     ldx #3
125a :                  tldy    
                                set_stat 0
                       >            load_flag 0
125a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
125c : 48              >            pha         ;use stack to load status
125d : 28              >            plp
                        
125e : b40b                     ldy zp1,x
1260 : 08                       php         ;test stores do not alter flags
1261 : 98                       tya
1262 : 49c3                     eor #$c3
1264 : 28                       plp
1265 : 9d0302                   sta abst,x
1268 : 08                       php         ;flags after load/store sequence
1269 : 49c3                     eor #$c3
126b : dd1802                   cmp abs1,x  ;test result
                                trap_ne
126e : f003            >        beq skip0882
                       >        trap            ;failed not equal (non zero)
1270 : 206144          >        jsr sp4_trap_fail 
                       >
1273 :                 >skip0882
                        
1273 : 68                       pla         ;load status
                                eor_flag 0
1274 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1276 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
1279 : f003            >        beq skip0885
                       >        trap            ;failed not equal (non zero)
127b : 206144          >        jsr sp4_trap_fail 
                       >
127e :                 >skip0885
                        
127e : ca                       dex
127f : 10d9                     bpl tldy                  
                        
1281 : a203                     ldx #3
1283 :                  tldy1   
                                set_stat $ff
                       >            load_flag $ff
1283 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1285 : 48              >            pha         ;use stack to load status
1286 : 28              >            plp
                        
1287 : b40b                     ldy zp1,x
1289 : 08                       php         ;test stores do not alter flags
128a : 98                       tya
128b : 49c3                     eor #$c3
128d : 28                       plp
128e : 9d0302                   sta abst,x
1291 : 08                       php         ;flags after load/store sequence
1292 : 49c3                     eor #$c3
1294 : dd1802                   cmp abs1,x  ;test result
                                trap_ne
1297 : f003            >        beq skip0889
                       >        trap            ;failed not equal (non zero)
1299 : 206144          >        jsr sp4_trap_fail 
                       >
129c :                 >skip0889
                        
129c : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
129d : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
129f : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
12a2 : f003            >        beq skip0892
                       >        trap            ;failed not equal (non zero)
12a4 : 206144          >        jsr sp4_trap_fail 
                       >
12a7 :                 >skip0892
                        
12a7 : ca                       dex
12a8 : 10d9                     bpl tldy1                  
                        
12aa : a203                     ldx #3
12ac :                  tldy2   
                                set_stat 0
                       >            load_flag 0
12ac : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
12ae : 48              >            pha         ;use stack to load status
12af : 28              >            plp
                        
12b0 : bc1802                   ldy abs1,x
12b3 : 08                       php         ;test stores do not alter flags
12b4 : 98                       tya
12b5 : 49c3                     eor #$c3
12b7 : a8                       tay
12b8 : 28                       plp
12b9 : 9402                     sty zpt,x
12bb : 08                       php         ;flags after load/store sequence
12bc : 49c3                     eor #$c3
12be : d50b                     cmp zp1,x   ;test result
                                trap_ne
12c0 : f003            >        beq skip0896
                       >        trap            ;failed not equal (non zero)
12c2 : 206144          >        jsr sp4_trap_fail 
                       >
12c5 :                 >skip0896
                        
12c5 : 68                       pla         ;load status
                                eor_flag 0
12c6 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
12c8 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
12cb : f003            >        beq skip0899
                       >        trap            ;failed not equal (non zero)
12cd : 206144          >        jsr sp4_trap_fail 
                       >
12d0 :                 >skip0899
                        
12d0 : ca                       dex
12d1 : 10d9                     bpl tldy2                  
                        
12d3 : a203                     ldx #3
12d5 :                  tldy3
                                set_stat $ff
                       >            load_flag $ff
12d5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
12d7 : 48              >            pha         ;use stack to load status
12d8 : 28              >            plp
                        
12d9 : bc1802                   ldy abs1,x
12dc : 08                       php         ;test stores do not alter flags
12dd : 98                       tya
12de : 49c3                     eor #$c3
12e0 : a8                       tay
12e1 : 28                       plp
12e2 : 9402                     sty zpt,x
12e4 : 08                       php         ;flags after load/store sequence
12e5 : 49c3                     eor #$c3
12e7 : d50b                     cmp zp1,x   ;test result
                                trap_ne
12e9 : f003            >        beq skip0903
                       >        trap            ;failed not equal (non zero)
12eb : 206144          >        jsr sp4_trap_fail 
                       >
12ee :                 >skip0903
                        
12ee : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
12ef : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
12f1 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
12f4 : f003            >        beq skip0906
                       >        trap            ;failed not equal (non zero)
12f6 : 206144          >        jsr sp4_trap_fail 
                       >
12f9 :                 >skip0906
                        
12f9 : ca                       dex
12fa : 10d9                     bpl tldy3
                        
12fc : a203                     ldx #3      ;testing store result
12fe : a000                     ldy #0
1300 : b502             tsty    lda zpt,x
1302 : 49c3                     eor #$c3
1304 : d50b                     cmp zp1,x
                                trap_ne     ;store to zp,x data
1306 : f003            >        beq skip0908
                       >        trap            ;failed not equal (non zero)
1308 : 206144          >        jsr sp4_trap_fail 
                       >
130b :                 >skip0908
                        
130b : 9402                     sty zpt,x   ;clear                
130d : bd0302                   lda abst,x
1310 : 49c3                     eor #$c3
1312 : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
1315 : f003            >        beq skip0910
                       >        trap            ;failed not equal (non zero)
1317 : 206144          >        jsr sp4_trap_fail 
                       >
131a :                 >skip0910
                        
131a : 8a                       txa
131b : 9d0302                   sta abst,x  ;clear                
131e : ca                       dex
131f : 10df                     bpl tsty
                                next_test
1321 : ad0002          >            lda test_case   ;previous test
1324 : c911            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1326 : f003            >        beq skip0913
                       >        trap            ;failed not equal (non zero)
1328 : 206144          >        jsr sp4_trap_fail 
                       >
132b :                 >skip0913
                       >
0012 =                 >test_num = test_num + 1
132b : a912            >            lda #test_num   ;*** next tests' number
132d : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; indexed wraparound test (only zp should wrap)
1330 : a2fd                     ldx #3+$fa
1332 : b411             tldy4   ldy zp1-$fa&$ff,x   ;wrap on indexed zp
1334 : 98                       tya
1335 : 9d0901                   sta abst-$fa,x      ;no STX abs,x!
1338 : ca                       dex
1339 : e0fa                     cpx #$fa
133b : b0f5                     bcs tldy4                  
133d : a2fd                     ldx #3+$fa
133f : bc1e01           tldy5   ldy abs1-$fa,x      ;no wrap on indexed abs
1342 : 9408                     sty zpt-$fa&$ff,x
1344 : ca                       dex
1345 : e0fa                     cpx #$fa
1347 : b0f6                     bcs tldy5                  
1349 : a203                     ldx #3      ;testing wraparound result
134b : a000                     ldy #0
134d : b502             tsty1   lda zpt,x
134f : d50b                     cmp zp1,x
                                trap_ne     ;store to zp,x data
1351 : f003            >        beq skip0915
                       >        trap            ;failed not equal (non zero)
1353 : 206144          >        jsr sp4_trap_fail 
                       >
1356 :                 >skip0915
                        
1356 : 9402                     sty zpt,x   ;clear                
1358 : bd0302                   lda abst,x
135b : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
135e : f003            >        beq skip0917
                       >        trap            ;failed not equal (non zero)
1360 : 206144          >        jsr sp4_trap_fail 
                       >
1363 :                 >skip0917
                        
1363 : 8a                       txa
1364 : 9d0302                   sta abst,x  ;clear                
1367 : ca                       dex
1368 : 10e3                     bpl tsty1
                                next_test
136a : ad0002          >            lda test_case   ;previous test
136d : c912            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
136f : f003            >        beq skip0920
                       >        trap            ;failed not equal (non zero)
1371 : 206144          >        jsr sp4_trap_fail 
                       >
1374 :                 >skip0920
                       >
0013 =                 >test_num = test_num + 1
1374 : a913            >            lda #test_num   ;*** next tests' number
1376 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDX / STX - zp / abs / #
                                set_stat 0  
                       >            load_flag 0  
1379 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
137b : 48              >            pha         ;use stack to load status
137c : 28              >            plp
                        
137d : a60b                     ldx zp1
137f : 08                       php         ;test stores do not alter flags
1380 : 8a                       txa
1381 : 49c3                     eor #$c3
1383 : aa                       tax
1384 : 28                       plp
1385 : 8e0302                   stx abst
1388 : 08                       php         ;flags after load/store sequence
1389 : 49c3                     eor #$c3
138b : aa                       tax
138c : e0c3                     cpx #$c3    ;test result
                                trap_ne
138e : f003            >        beq skip0924
                       >        trap            ;failed not equal (non zero)
1390 : 206144          >        jsr sp4_trap_fail 
                       >
1393 :                 >skip0924
                        
1393 : 68                       pla         ;load status
                                eor_flag 0
1394 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1396 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1399 : f003            >        beq skip0927
                       >        trap            ;failed not equal (non zero)
139b : 206144          >        jsr sp4_trap_fail 
                       >
139e :                 >skip0927
                        
                                set_stat 0
                       >            load_flag 0
139e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
13a0 : 48              >            pha         ;use stack to load status
13a1 : 28              >            plp
                        
13a2 : a60c                     ldx zp1+1
13a4 : 08                       php         ;test stores do not alter flags
13a5 : 8a                       txa
13a6 : 49c3                     eor #$c3
13a8 : aa                       tax
13a9 : 28                       plp
13aa : 8e0402                   stx abst+1
13ad : 08                       php         ;flags after load/store sequence
13ae : 49c3                     eor #$c3
13b0 : aa                       tax
13b1 : e082                     cpx #$82    ;test result
                                trap_ne
13b3 : f003            >        beq skip0931
                       >        trap            ;failed not equal (non zero)
13b5 : 206144          >        jsr sp4_trap_fail 
                       >
13b8 :                 >skip0931
                        
13b8 : 68                       pla         ;load status
                                eor_flag 0
13b9 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
13bb : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
13be : f003            >        beq skip0934
                       >        trap            ;failed not equal (non zero)
13c0 : 206144          >        jsr sp4_trap_fail 
                       >
13c3 :                 >skip0934
                        
                                set_stat 0
                       >            load_flag 0
13c3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
13c5 : 48              >            pha         ;use stack to load status
13c6 : 28              >            plp
                        
13c7 : a60d                     ldx zp1+2
13c9 : 08                       php         ;test stores do not alter flags
13ca : 8a                       txa
13cb : 49c3                     eor #$c3
13cd : aa                       tax
13ce : 28                       plp
13cf : 8e0502                   stx abst+2
13d2 : 08                       php         ;flags after load/store sequence
13d3 : 49c3                     eor #$c3
13d5 : aa                       tax
13d6 : e041                     cpx #$41    ;test result
                                trap_ne
13d8 : f003            >        beq skip0938
                       >        trap            ;failed not equal (non zero)
13da : 206144          >        jsr sp4_trap_fail 
                       >
13dd :                 >skip0938
                        
13dd : 68                       pla         ;load status
                                eor_flag 0
13de : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
13e0 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
13e3 : f003            >        beq skip0941
                       >        trap            ;failed not equal (non zero)
13e5 : 206144          >        jsr sp4_trap_fail 
                       >
13e8 :                 >skip0941
                        
                                set_stat 0
                       >            load_flag 0
13e8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
13ea : 48              >            pha         ;use stack to load status
13eb : 28              >            plp
                        
13ec : a60e                     ldx zp1+3
13ee : 08                       php         ;test stores do not alter flags
13ef : 8a                       txa
13f0 : 49c3                     eor #$c3
13f2 : aa                       tax
13f3 : 28                       plp
13f4 : 8e0602                   stx abst+3
13f7 : 08                       php         ;flags after load/store sequence
13f8 : 49c3                     eor #$c3
13fa : aa                       tax
13fb : e000                     cpx #0      ;test result
                                trap_ne
13fd : f003            >        beq skip0945
                       >        trap            ;failed not equal (non zero)
13ff : 206144          >        jsr sp4_trap_fail 
                       >
1402 :                 >skip0945
                        
1402 : 68                       pla         ;load status
                                eor_flag 0
1403 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1405 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1408 : f003            >        beq skip0948
                       >        trap            ;failed not equal (non zero)
140a : 206144          >        jsr sp4_trap_fail 
                       >
140d :                 >skip0948
                        
                        
                                set_stat $ff
                       >            load_flag $ff
140d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
140f : 48              >            pha         ;use stack to load status
1410 : 28              >            plp
                        
1411 : a60b                     ldx zp1  
1413 : 08                       php         ;test stores do not alter flags
1414 : 8a                       txa
1415 : 49c3                     eor #$c3
1417 : aa                       tax
1418 : 28                       plp
1419 : 8e0302                   stx abst  
141c : 08                       php         ;flags after load/store sequence
141d : 49c3                     eor #$c3
141f : aa                       tax
1420 : e0c3                     cpx #$c3    ;test result
                                trap_ne     ;
1422 : f003            >        beq skip0952
                       >        trap            ;failed not equal (non zero)
1424 : 206144          >        jsr sp4_trap_fail 
                       >
1427 :                 >skip0952
                        
1427 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1428 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
142a : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
142d : f003            >        beq skip0955
                       >        trap            ;failed not equal (non zero)
142f : 206144          >        jsr sp4_trap_fail 
                       >
1432 :                 >skip0955
                        
                                set_stat $ff
                       >            load_flag $ff
1432 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1434 : 48              >            pha         ;use stack to load status
1435 : 28              >            plp
                        
1436 : a60c                     ldx zp1+1
1438 : 08                       php         ;test stores do not alter flags
1439 : 8a                       txa
143a : 49c3                     eor #$c3
143c : aa                       tax
143d : 28                       plp
143e : 8e0402                   stx abst+1
1441 : 08                       php         ;flags after load/store sequence
1442 : 49c3                     eor #$c3
1444 : aa                       tax
1445 : e082                     cpx #$82    ;test result
                                trap_ne
1447 : f003            >        beq skip0959
                       >        trap            ;failed not equal (non zero)
1449 : 206144          >        jsr sp4_trap_fail 
                       >
144c :                 >skip0959
                        
144c : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
144d : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
144f : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1452 : f003            >        beq skip0962
                       >        trap            ;failed not equal (non zero)
1454 : 206144          >        jsr sp4_trap_fail 
                       >
1457 :                 >skip0962
                        
                                set_stat $ff
                       >            load_flag $ff
1457 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1459 : 48              >            pha         ;use stack to load status
145a : 28              >            plp
                        
145b : a60d                     ldx zp1+2
145d : 08                       php         ;test stores do not alter flags
145e : 8a                       txa
145f : 49c3                     eor #$c3
1461 : aa                       tax
1462 : 28                       plp
1463 : 8e0502                   stx abst+2
1466 : 08                       php         ;flags after load/store sequence
1467 : 49c3                     eor #$c3
1469 : aa                       tax
146a : e041                     cpx #$41    ;test result
                                trap_ne     ;
146c : f003            >        beq skip0966
                       >        trap            ;failed not equal (non zero)
146e : 206144          >        jsr sp4_trap_fail 
                       >
1471 :                 >skip0966
                        
1471 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1472 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1474 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1477 : f003            >        beq skip0969
                       >        trap            ;failed not equal (non zero)
1479 : 206144          >        jsr sp4_trap_fail 
                       >
147c :                 >skip0969
                        
                                set_stat $ff
                       >            load_flag $ff
147c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
147e : 48              >            pha         ;use stack to load status
147f : 28              >            plp
                        
1480 : a60e                     ldx zp1+3
1482 : 08                       php         ;test stores do not alter flags
1483 : 8a                       txa
1484 : 49c3                     eor #$c3
1486 : aa                       tax
1487 : 28                       plp
1488 : 8e0602                   stx abst+3
148b : 08                       php         ;flags after load/store sequence
148c : 49c3                     eor #$c3
148e : aa                       tax
148f : e000                     cpx #0      ;test result
                                trap_ne
1491 : f003            >        beq skip0973
                       >        trap            ;failed not equal (non zero)
1493 : 206144          >        jsr sp4_trap_fail 
                       >
1496 :                 >skip0973
                        
1496 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1497 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1499 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
149c : f003            >        beq skip0976
                       >        trap            ;failed not equal (non zero)
149e : 206144          >        jsr sp4_trap_fail 
                       >
14a1 :                 >skip0976
                        
                        
                                set_stat 0
                       >            load_flag 0
14a1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
14a3 : 48              >            pha         ;use stack to load status
14a4 : 28              >            plp
                        
14a5 : ae1802                   ldx abs1  
14a8 : 08                       php         ;test stores do not alter flags
14a9 : 8a                       txa
14aa : 49c3                     eor #$c3
14ac : aa                       tax
14ad : 28                       plp
14ae : 8602                     stx zpt  
14b0 : 08                       php         ;flags after load/store sequence
14b1 : 49c3                     eor #$c3
14b3 : c50b                     cmp zp1     ;test result
                                trap_ne
14b5 : f003            >        beq skip0980
                       >        trap            ;failed not equal (non zero)
14b7 : 206144          >        jsr sp4_trap_fail 
                       >
14ba :                 >skip0980
                        
14ba : 68                       pla         ;load status
                                eor_flag 0
14bb : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
14bd : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
14c0 : f003            >        beq skip0983
                       >        trap            ;failed not equal (non zero)
14c2 : 206144          >        jsr sp4_trap_fail 
                       >
14c5 :                 >skip0983
                        
                                set_stat 0
                       >            load_flag 0
14c5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
14c7 : 48              >            pha         ;use stack to load status
14c8 : 28              >            plp
                        
14c9 : ae1902                   ldx abs1+1
14cc : 08                       php         ;test stores do not alter flags
14cd : 8a                       txa
14ce : 49c3                     eor #$c3
14d0 : aa                       tax
14d1 : 28                       plp
14d2 : 8603                     stx zpt+1
14d4 : 08                       php         ;flags after load/store sequence
14d5 : 49c3                     eor #$c3
14d7 : c50c                     cmp zp1+1   ;test result
                                trap_ne
14d9 : f003            >        beq skip0987
                       >        trap            ;failed not equal (non zero)
14db : 206144          >        jsr sp4_trap_fail 
                       >
14de :                 >skip0987
                        
14de : 68                       pla         ;load status
                                eor_flag 0
14df : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
14e1 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
14e4 : f003            >        beq skip0990
                       >        trap            ;failed not equal (non zero)
14e6 : 206144          >        jsr sp4_trap_fail 
                       >
14e9 :                 >skip0990
                        
                                set_stat 0
                       >            load_flag 0
14e9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
14eb : 48              >            pha         ;use stack to load status
14ec : 28              >            plp
                        
14ed : ae1a02                   ldx abs1+2
14f0 : 08                       php         ;test stores do not alter flags
14f1 : 8a                       txa
14f2 : 49c3                     eor #$c3
14f4 : aa                       tax
14f5 : 28                       plp
14f6 : 8604                     stx zpt+2
14f8 : 08                       php         ;flags after load/store sequence
14f9 : 49c3                     eor #$c3
14fb : c50d                     cmp zp1+2   ;test result
                                trap_ne
14fd : f003            >        beq skip0994
                       >        trap            ;failed not equal (non zero)
14ff : 206144          >        jsr sp4_trap_fail 
                       >
1502 :                 >skip0994
                        
1502 : 68                       pla         ;load status
                                eor_flag 0
1503 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1505 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1508 : f003            >        beq skip0997
                       >        trap            ;failed not equal (non zero)
150a : 206144          >        jsr sp4_trap_fail 
                       >
150d :                 >skip0997
                        
                                set_stat 0
                       >            load_flag 0
150d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
150f : 48              >            pha         ;use stack to load status
1510 : 28              >            plp
                        
1511 : ae1b02                   ldx abs1+3
1514 : 08                       php         ;test stores do not alter flags
1515 : 8a                       txa
1516 : 49c3                     eor #$c3
1518 : aa                       tax
1519 : 28                       plp
151a : 8605                     stx zpt+3
151c : 08                       php         ;flags after load/store sequence
151d : 49c3                     eor #$c3
151f : c50e                     cmp zp1+3   ;test result
                                trap_ne
1521 : f003            >        beq skip1001
                       >        trap            ;failed not equal (non zero)
1523 : 206144          >        jsr sp4_trap_fail 
                       >
1526 :                 >skip1001
                        
1526 : 68                       pla         ;load status
                                eor_flag 0
1527 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1529 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
152c : f003            >        beq skip1004
                       >        trap            ;failed not equal (non zero)
152e : 206144          >        jsr sp4_trap_fail 
                       >
1531 :                 >skip1004
                        
                        
                                set_stat $ff
                       >            load_flag $ff
1531 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1533 : 48              >            pha         ;use stack to load status
1534 : 28              >            plp
                        
1535 : ae1802                   ldx abs1  
1538 : 08                       php         ;test stores do not alter flags
1539 : 8a                       txa
153a : 49c3                     eor #$c3
153c : aa                       tax
153d : 28                       plp
153e : 8602                     stx zpt  
1540 : 08                       php         ;flags after load/store sequence
1541 : 49c3                     eor #$c3
1543 : aa                       tax
1544 : e40b                     cpx zp1     ;test result
                                trap_ne
1546 : f003            >        beq skip1008
                       >        trap            ;failed not equal (non zero)
1548 : 206144          >        jsr sp4_trap_fail 
                       >
154b :                 >skip1008
                        
154b : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
154c : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
154e : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1551 : f003            >        beq skip1011
                       >        trap            ;failed not equal (non zero)
1553 : 206144          >        jsr sp4_trap_fail 
                       >
1556 :                 >skip1011
                        
                                set_stat $ff
                       >            load_flag $ff
1556 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1558 : 48              >            pha         ;use stack to load status
1559 : 28              >            plp
                        
155a : ae1902                   ldx abs1+1
155d : 08                       php         ;test stores do not alter flags
155e : 8a                       txa
155f : 49c3                     eor #$c3
1561 : aa                       tax
1562 : 28                       plp
1563 : 8603                     stx zpt+1
1565 : 08                       php         ;flags after load/store sequence
1566 : 49c3                     eor #$c3
1568 : aa                       tax
1569 : e40c                     cpx zp1+1   ;test result
                                trap_ne
156b : f003            >        beq skip1015
                       >        trap            ;failed not equal (non zero)
156d : 206144          >        jsr sp4_trap_fail 
                       >
1570 :                 >skip1015
                        
1570 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1571 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1573 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1576 : f003            >        beq skip1018
                       >        trap            ;failed not equal (non zero)
1578 : 206144          >        jsr sp4_trap_fail 
                       >
157b :                 >skip1018
                        
                                set_stat $ff
                       >            load_flag $ff
157b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
157d : 48              >            pha         ;use stack to load status
157e : 28              >            plp
                        
157f : ae1a02                   ldx abs1+2
1582 : 08                       php         ;test stores do not alter flags
1583 : 8a                       txa
1584 : 49c3                     eor #$c3
1586 : aa                       tax
1587 : 28                       plp
1588 : 8604                     stx zpt+2
158a : 08                       php         ;flags after load/store sequence
158b : 49c3                     eor #$c3
158d : aa                       tax
158e : e40d                     cpx zp1+2   ;test result
                                trap_ne
1590 : f003            >        beq skip1022
                       >        trap            ;failed not equal (non zero)
1592 : 206144          >        jsr sp4_trap_fail 
                       >
1595 :                 >skip1022
                        
1595 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1596 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1598 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
159b : f003            >        beq skip1025
                       >        trap            ;failed not equal (non zero)
159d : 206144          >        jsr sp4_trap_fail 
                       >
15a0 :                 >skip1025
                        
                                set_stat $ff
                       >            load_flag $ff
15a0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
15a2 : 48              >            pha         ;use stack to load status
15a3 : 28              >            plp
                        
15a4 : ae1b02                   ldx abs1+3
15a7 : 08                       php         ;test stores do not alter flags
15a8 : 8a                       txa
15a9 : 49c3                     eor #$c3
15ab : aa                       tax
15ac : 28                       plp
15ad : 8605                     stx zpt+3
15af : 08                       php         ;flags after load/store sequence
15b0 : 49c3                     eor #$c3
15b2 : aa                       tax
15b3 : e40e                     cpx zp1+3   ;test result
                                trap_ne
15b5 : f003            >        beq skip1029
                       >        trap            ;failed not equal (non zero)
15b7 : 206144          >        jsr sp4_trap_fail 
                       >
15ba :                 >skip1029
                        
15ba : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
15bb : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
15bd : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
15c0 : f003            >        beq skip1032
                       >        trap            ;failed not equal (non zero)
15c2 : 206144          >        jsr sp4_trap_fail 
                       >
15c5 :                 >skip1032
                        
                        
                                set_stat 0  
                       >            load_flag 0  
15c5 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
15c7 : 48              >            pha         ;use stack to load status
15c8 : 28              >            plp
                        
15c9 : a2c3                     ldx #$c3
15cb : 08                       php
15cc : ec1802                   cpx abs1    ;test result
                                trap_ne
15cf : f003            >        beq skip1036
                       >        trap            ;failed not equal (non zero)
15d1 : 206144          >        jsr sp4_trap_fail 
                       >
15d4 :                 >skip1036
                        
15d4 : 68                       pla         ;load status
                                eor_flag 0
15d5 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
15d7 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
15da : f003            >        beq skip1039
                       >        trap            ;failed not equal (non zero)
15dc : 206144          >        jsr sp4_trap_fail 
                       >
15df :                 >skip1039
                        
                                set_stat 0
                       >            load_flag 0
15df : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
15e1 : 48              >            pha         ;use stack to load status
15e2 : 28              >            plp
                        
15e3 : a282                     ldx #$82
15e5 : 08                       php
15e6 : ec1902                   cpx abs1+1  ;test result
                                trap_ne
15e9 : f003            >        beq skip1043
                       >        trap            ;failed not equal (non zero)
15eb : 206144          >        jsr sp4_trap_fail 
                       >
15ee :                 >skip1043
                        
15ee : 68                       pla         ;load status
                                eor_flag 0
15ef : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
15f1 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
15f4 : f003            >        beq skip1046
                       >        trap            ;failed not equal (non zero)
15f6 : 206144          >        jsr sp4_trap_fail 
                       >
15f9 :                 >skip1046
                        
                                set_stat 0
                       >            load_flag 0
15f9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
15fb : 48              >            pha         ;use stack to load status
15fc : 28              >            plp
                        
15fd : a241                     ldx #$41
15ff : 08                       php
1600 : ec1a02                   cpx abs1+2  ;test result
                                trap_ne
1603 : f003            >        beq skip1050
                       >        trap            ;failed not equal (non zero)
1605 : 206144          >        jsr sp4_trap_fail 
                       >
1608 :                 >skip1050
                        
1608 : 68                       pla         ;load status
                                eor_flag 0
1609 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
160b : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
160e : f003            >        beq skip1053
                       >        trap            ;failed not equal (non zero)
1610 : 206144          >        jsr sp4_trap_fail 
                       >
1613 :                 >skip1053
                        
                                set_stat 0
                       >            load_flag 0
1613 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1615 : 48              >            pha         ;use stack to load status
1616 : 28              >            plp
                        
1617 : a200                     ldx #0
1619 : 08                       php
161a : ec1b02                   cpx abs1+3  ;test result
                                trap_ne
161d : f003            >        beq skip1057
                       >        trap            ;failed not equal (non zero)
161f : 206144          >        jsr sp4_trap_fail 
                       >
1622 :                 >skip1057
                        
1622 : 68                       pla         ;load status
                                eor_flag 0
1623 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1625 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1628 : f003            >        beq skip1060
                       >        trap            ;failed not equal (non zero)
162a : 206144          >        jsr sp4_trap_fail 
                       >
162d :                 >skip1060
                        
                        
                                set_stat $ff
                       >            load_flag $ff
162d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
162f : 48              >            pha         ;use stack to load status
1630 : 28              >            plp
                        
1631 : a2c3                     ldx #$c3  
1633 : 08                       php
1634 : ec1802                   cpx abs1    ;test result
                                trap_ne
1637 : f003            >        beq skip1064
                       >        trap            ;failed not equal (non zero)
1639 : 206144          >        jsr sp4_trap_fail 
                       >
163c :                 >skip1064
                        
163c : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
163d : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
163f : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1642 : f003            >        beq skip1067
                       >        trap            ;failed not equal (non zero)
1644 : 206144          >        jsr sp4_trap_fail 
                       >
1647 :                 >skip1067
                        
                                set_stat $ff
                       >            load_flag $ff
1647 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1649 : 48              >            pha         ;use stack to load status
164a : 28              >            plp
                        
164b : a282                     ldx #$82
164d : 08                       php
164e : ec1902                   cpx abs1+1  ;test result
                                trap_ne
1651 : f003            >        beq skip1071
                       >        trap            ;failed not equal (non zero)
1653 : 206144          >        jsr sp4_trap_fail 
                       >
1656 :                 >skip1071
                        
1656 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1657 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1659 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
165c : f003            >        beq skip1074
                       >        trap            ;failed not equal (non zero)
165e : 206144          >        jsr sp4_trap_fail 
                       >
1661 :                 >skip1074
                        
                                set_stat $ff
                       >            load_flag $ff
1661 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1663 : 48              >            pha         ;use stack to load status
1664 : 28              >            plp
                        
1665 : a241                     ldx #$41
1667 : 08                       php
1668 : ec1a02                   cpx abs1+2  ;test result
                                trap_ne
166b : f003            >        beq skip1078
                       >        trap            ;failed not equal (non zero)
166d : 206144          >        jsr sp4_trap_fail 
                       >
1670 :                 >skip1078
                        
1670 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1671 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1673 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1676 : f003            >        beq skip1081
                       >        trap            ;failed not equal (non zero)
1678 : 206144          >        jsr sp4_trap_fail 
                       >
167b :                 >skip1081
                        
                                set_stat $ff
                       >            load_flag $ff
167b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
167d : 48              >            pha         ;use stack to load status
167e : 28              >            plp
                        
167f : a200                     ldx #0
1681 : 08                       php
1682 : ec1b02                   cpx abs1+3  ;test result
                                trap_ne
1685 : f003            >        beq skip1085
                       >        trap            ;failed not equal (non zero)
1687 : 206144          >        jsr sp4_trap_fail 
                       >
168a :                 >skip1085
                        
168a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
168b : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
168d : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1690 : f003            >        beq skip1088
                       >        trap            ;failed not equal (non zero)
1692 : 206144          >        jsr sp4_trap_fail 
                       >
1695 :                 >skip1088
                        
                        
1695 : a200                     ldx #0
1697 : a502                     lda zpt  
1699 : 49c3                     eor #$c3
169b : c50b                     cmp zp1  
                                trap_ne     ;store to zp data
169d : f003            >        beq skip1090
                       >        trap            ;failed not equal (non zero)
169f : 206144          >        jsr sp4_trap_fail 
                       >
16a2 :                 >skip1090
                        
16a2 : 8602                     stx zpt     ;clear                
16a4 : ad0302                   lda abst  
16a7 : 49c3                     eor #$c3
16a9 : cd1802                   cmp abs1  
                                trap_ne     ;store to abs data
16ac : f003            >        beq skip1092
                       >        trap            ;failed not equal (non zero)
16ae : 206144          >        jsr sp4_trap_fail 
                       >
16b1 :                 >skip1092
                        
16b1 : 8e0302                   stx abst    ;clear                
16b4 : a503                     lda zpt+1
16b6 : 49c3                     eor #$c3
16b8 : c50c                     cmp zp1+1
                                trap_ne     ;store to zp data
16ba : f003            >        beq skip1094
                       >        trap            ;failed not equal (non zero)
16bc : 206144          >        jsr sp4_trap_fail 
                       >
16bf :                 >skip1094
                        
16bf : 8603                     stx zpt+1   ;clear                
16c1 : ad0402                   lda abst+1
16c4 : 49c3                     eor #$c3
16c6 : cd1902                   cmp abs1+1
                                trap_ne     ;store to abs data
16c9 : f003            >        beq skip1096
                       >        trap            ;failed not equal (non zero)
16cb : 206144          >        jsr sp4_trap_fail 
                       >
16ce :                 >skip1096
                        
16ce : 8e0402                   stx abst+1  ;clear                
16d1 : a504                     lda zpt+2
16d3 : 49c3                     eor #$c3
16d5 : c50d                     cmp zp1+2
                                trap_ne     ;store to zp data
16d7 : f003            >        beq skip1098
                       >        trap            ;failed not equal (non zero)
16d9 : 206144          >        jsr sp4_trap_fail 
                       >
16dc :                 >skip1098
                        
16dc : 8604                     stx zpt+2   ;clear                
16de : ad0502                   lda abst+2
16e1 : 49c3                     eor #$c3
16e3 : cd1a02                   cmp abs1+2
                                trap_ne     ;store to abs data
16e6 : f003            >        beq skip1100
                       >        trap            ;failed not equal (non zero)
16e8 : 206144          >        jsr sp4_trap_fail 
                       >
16eb :                 >skip1100
                        
16eb : 8e0502                   stx abst+2  ;clear                
16ee : a505                     lda zpt+3
16f0 : 49c3                     eor #$c3
16f2 : c50e                     cmp zp1+3
                                trap_ne     ;store to zp data
16f4 : f003            >        beq skip1102
                       >        trap            ;failed not equal (non zero)
16f6 : 206144          >        jsr sp4_trap_fail 
                       >
16f9 :                 >skip1102
                        
16f9 : 8605                     stx zpt+3   ;clear                
16fb : ad0602                   lda abst+3
16fe : 49c3                     eor #$c3
1700 : cd1b02                   cmp abs1+3
                                trap_ne     ;store to abs data
1703 : f003            >        beq skip1104
                       >        trap            ;failed not equal (non zero)
1705 : 206144          >        jsr sp4_trap_fail 
                       >
1708 :                 >skip1104
                        
1708 : 8e0602                   stx abst+3  ;clear                
                                next_test
170b : ad0002          >            lda test_case   ;previous test
170e : c913            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1710 : f003            >        beq skip1107
                       >        trap            ;failed not equal (non zero)
1712 : 206144          >        jsr sp4_trap_fail 
                       >
1715 :                 >skip1107
                       >
0014 =                 >test_num = test_num + 1
1715 : a914            >            lda #test_num   ;*** next tests' number
1717 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDY / STY - zp / abs / #
                                set_stat 0
                       >            load_flag 0
171a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
171c : 48              >            pha         ;use stack to load status
171d : 28              >            plp
                        
171e : a40b                     ldy zp1  
1720 : 08                       php         ;test stores do not alter flags
1721 : 98                       tya
1722 : 49c3                     eor #$c3
1724 : a8                       tay
1725 : 28                       plp
1726 : 8c0302                   sty abst  
1729 : 08                       php         ;flags after load/store sequence
172a : 49c3                     eor #$c3
172c : a8                       tay
172d : c0c3                     cpy #$c3    ;test result
                                trap_ne
172f : f003            >        beq skip1111
                       >        trap            ;failed not equal (non zero)
1731 : 206144          >        jsr sp4_trap_fail 
                       >
1734 :                 >skip1111
                        
1734 : 68                       pla         ;load status
                                eor_flag 0
1735 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1737 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
173a : f003            >        beq skip1114
                       >        trap            ;failed not equal (non zero)
173c : 206144          >        jsr sp4_trap_fail 
                       >
173f :                 >skip1114
                        
                                set_stat 0
                       >            load_flag 0
173f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1741 : 48              >            pha         ;use stack to load status
1742 : 28              >            plp
                        
1743 : a40c                     ldy zp1+1
1745 : 08                       php         ;test stores do not alter flags
1746 : 98                       tya
1747 : 49c3                     eor #$c3
1749 : a8                       tay
174a : 28                       plp
174b : 8c0402                   sty abst+1
174e : 08                       php         ;flags after load/store sequence
174f : 49c3                     eor #$c3
1751 : a8                       tay
1752 : c082                     cpy #$82    ;test result
                                trap_ne
1754 : f003            >        beq skip1118
                       >        trap            ;failed not equal (non zero)
1756 : 206144          >        jsr sp4_trap_fail 
                       >
1759 :                 >skip1118
                        
1759 : 68                       pla         ;load status
                                eor_flag 0
175a : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
175c : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
175f : f003            >        beq skip1121
                       >        trap            ;failed not equal (non zero)
1761 : 206144          >        jsr sp4_trap_fail 
                       >
1764 :                 >skip1121
                        
                                set_stat 0
                       >            load_flag 0
1764 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1766 : 48              >            pha         ;use stack to load status
1767 : 28              >            plp
                        
1768 : a40d                     ldy zp1+2
176a : 08                       php         ;test stores do not alter flags
176b : 98                       tya
176c : 49c3                     eor #$c3
176e : a8                       tay
176f : 28                       plp
1770 : 8c0502                   sty abst+2
1773 : 08                       php         ;flags after load/store sequence
1774 : 49c3                     eor #$c3
1776 : a8                       tay
1777 : c041                     cpy #$41    ;test result
                                trap_ne
1779 : f003            >        beq skip1125
                       >        trap            ;failed not equal (non zero)
177b : 206144          >        jsr sp4_trap_fail 
                       >
177e :                 >skip1125
                        
177e : 68                       pla         ;load status
                                eor_flag 0
177f : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1781 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1784 : f003            >        beq skip1128
                       >        trap            ;failed not equal (non zero)
1786 : 206144          >        jsr sp4_trap_fail 
                       >
1789 :                 >skip1128
                        
                                set_stat 0
                       >            load_flag 0
1789 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
178b : 48              >            pha         ;use stack to load status
178c : 28              >            plp
                        
178d : a40e                     ldy zp1+3
178f : 08                       php         ;test stores do not alter flags
1790 : 98                       tya
1791 : 49c3                     eor #$c3
1793 : a8                       tay
1794 : 28                       plp
1795 : 8c0602                   sty abst+3
1798 : 08                       php         ;flags after load/store sequence
1799 : 49c3                     eor #$c3
179b : a8                       tay
179c : c000                     cpy #0      ;test result
                                trap_ne
179e : f003            >        beq skip1132
                       >        trap            ;failed not equal (non zero)
17a0 : 206144          >        jsr sp4_trap_fail 
                       >
17a3 :                 >skip1132
                        
17a3 : 68                       pla         ;load status
                                eor_flag 0
17a4 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
17a6 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
17a9 : f003            >        beq skip1135
                       >        trap            ;failed not equal (non zero)
17ab : 206144          >        jsr sp4_trap_fail 
                       >
17ae :                 >skip1135
                        
                        
                                set_stat $ff
                       >            load_flag $ff
17ae : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
17b0 : 48              >            pha         ;use stack to load status
17b1 : 28              >            plp
                        
17b2 : a40b                     ldy zp1  
17b4 : 08                       php         ;test stores do not alter flags
17b5 : 98                       tya
17b6 : 49c3                     eor #$c3
17b8 : a8                       tay
17b9 : 28                       plp
17ba : 8c0302                   sty abst  
17bd : 08                       php         ;flags after load/store sequence
17be : 49c3                     eor #$c3
17c0 : a8                       tay
17c1 : c0c3                     cpy #$c3    ;test result
                                trap_ne
17c3 : f003            >        beq skip1139
                       >        trap            ;failed not equal (non zero)
17c5 : 206144          >        jsr sp4_trap_fail 
                       >
17c8 :                 >skip1139
                        
17c8 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
17c9 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
17cb : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
17ce : f003            >        beq skip1142
                       >        trap            ;failed not equal (non zero)
17d0 : 206144          >        jsr sp4_trap_fail 
                       >
17d3 :                 >skip1142
                        
                                set_stat $ff
                       >            load_flag $ff
17d3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
17d5 : 48              >            pha         ;use stack to load status
17d6 : 28              >            plp
                        
17d7 : a40c                     ldy zp1+1
17d9 : 08                       php         ;test stores do not alter flags
17da : 98                       tya
17db : 49c3                     eor #$c3
17dd : a8                       tay
17de : 28                       plp
17df : 8c0402                   sty abst+1
17e2 : 08                       php         ;flags after load/store sequence
17e3 : 49c3                     eor #$c3
17e5 : a8                       tay
17e6 : c082                     cpy #$82   ;test result
                                trap_ne
17e8 : f003            >        beq skip1146
                       >        trap            ;failed not equal (non zero)
17ea : 206144          >        jsr sp4_trap_fail 
                       >
17ed :                 >skip1146
                        
17ed : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
17ee : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
17f0 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
17f3 : f003            >        beq skip1149
                       >        trap            ;failed not equal (non zero)
17f5 : 206144          >        jsr sp4_trap_fail 
                       >
17f8 :                 >skip1149
                        
                                set_stat $ff
                       >            load_flag $ff
17f8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
17fa : 48              >            pha         ;use stack to load status
17fb : 28              >            plp
                        
17fc : a40d                     ldy zp1+2
17fe : 08                       php         ;test stores do not alter flags
17ff : 98                       tya
1800 : 49c3                     eor #$c3
1802 : a8                       tay
1803 : 28                       plp
1804 : 8c0502                   sty abst+2
1807 : 08                       php         ;flags after load/store sequence
1808 : 49c3                     eor #$c3
180a : a8                       tay
180b : c041                     cpy #$41    ;test result
                                trap_ne
180d : f003            >        beq skip1153
                       >        trap            ;failed not equal (non zero)
180f : 206144          >        jsr sp4_trap_fail 
                       >
1812 :                 >skip1153
                        
1812 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1813 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1815 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1818 : f003            >        beq skip1156
                       >        trap            ;failed not equal (non zero)
181a : 206144          >        jsr sp4_trap_fail 
                       >
181d :                 >skip1156
                        
                                set_stat $ff
                       >            load_flag $ff
181d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
181f : 48              >            pha         ;use stack to load status
1820 : 28              >            plp
                        
1821 : a40e                     ldy zp1+3
1823 : 08                       php         ;test stores do not alter flags
1824 : 98                       tya
1825 : 49c3                     eor #$c3
1827 : a8                       tay
1828 : 28                       plp
1829 : 8c0602                   sty abst+3
182c : 08                       php         ;flags after load/store sequence
182d : 49c3                     eor #$c3
182f : a8                       tay
1830 : c000                     cpy #0      ;test result
                                trap_ne
1832 : f003            >        beq skip1160
                       >        trap            ;failed not equal (non zero)
1834 : 206144          >        jsr sp4_trap_fail 
                       >
1837 :                 >skip1160
                        
1837 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1838 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
183a : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
183d : f003            >        beq skip1163
                       >        trap            ;failed not equal (non zero)
183f : 206144          >        jsr sp4_trap_fail 
                       >
1842 :                 >skip1163
                        
                                
                                set_stat 0
                       >            load_flag 0
1842 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1844 : 48              >            pha         ;use stack to load status
1845 : 28              >            plp
                        
1846 : ac1802                   ldy abs1  
1849 : 08                       php         ;test stores do not alter flags
184a : 98                       tya
184b : 49c3                     eor #$c3
184d : a8                       tay
184e : 28                       plp
184f : 8402                     sty zpt  
1851 : 08                       php         ;flags after load/store sequence
1852 : 49c3                     eor #$c3
1854 : a8                       tay
1855 : c40b                     cpy zp1     ;test result
                                trap_ne
1857 : f003            >        beq skip1167
                       >        trap            ;failed not equal (non zero)
1859 : 206144          >        jsr sp4_trap_fail 
                       >
185c :                 >skip1167
                        
185c : 68                       pla         ;load status
                                eor_flag 0
185d : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
185f : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1862 : f003            >        beq skip1170
                       >        trap            ;failed not equal (non zero)
1864 : 206144          >        jsr sp4_trap_fail 
                       >
1867 :                 >skip1170
                        
                                set_stat 0
                       >            load_flag 0
1867 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1869 : 48              >            pha         ;use stack to load status
186a : 28              >            plp
                        
186b : ac1902                   ldy abs1+1
186e : 08                       php         ;test stores do not alter flags
186f : 98                       tya
1870 : 49c3                     eor #$c3
1872 : a8                       tay
1873 : 28                       plp
1874 : 8403                     sty zpt+1
1876 : 08                       php         ;flags after load/store sequence
1877 : 49c3                     eor #$c3
1879 : a8                       tay
187a : c40c                     cpy zp1+1   ;test result
                                trap_ne
187c : f003            >        beq skip1174
                       >        trap            ;failed not equal (non zero)
187e : 206144          >        jsr sp4_trap_fail 
                       >
1881 :                 >skip1174
                        
1881 : 68                       pla         ;load status
                                eor_flag 0
1882 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1884 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1887 : f003            >        beq skip1177
                       >        trap            ;failed not equal (non zero)
1889 : 206144          >        jsr sp4_trap_fail 
                       >
188c :                 >skip1177
                        
                                set_stat 0
                       >            load_flag 0
188c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
188e : 48              >            pha         ;use stack to load status
188f : 28              >            plp
                        
1890 : ac1a02                   ldy abs1+2
1893 : 08                       php         ;test stores do not alter flags
1894 : 98                       tya
1895 : 49c3                     eor #$c3
1897 : a8                       tay
1898 : 28                       plp
1899 : 8404                     sty zpt+2
189b : 08                       php         ;flags after load/store sequence
189c : 49c3                     eor #$c3
189e : a8                       tay
189f : c40d                     cpy zp1+2   ;test result
                                trap_ne
18a1 : f003            >        beq skip1181
                       >        trap            ;failed not equal (non zero)
18a3 : 206144          >        jsr sp4_trap_fail 
                       >
18a6 :                 >skip1181
                        
18a6 : 68                       pla         ;load status
                                eor_flag 0
18a7 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
18a9 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
18ac : f003            >        beq skip1184
                       >        trap            ;failed not equal (non zero)
18ae : 206144          >        jsr sp4_trap_fail 
                       >
18b1 :                 >skip1184
                        
                                set_stat 0
                       >            load_flag 0
18b1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
18b3 : 48              >            pha         ;use stack to load status
18b4 : 28              >            plp
                        
18b5 : ac1b02                   ldy abs1+3
18b8 : 08                       php         ;test stores do not alter flags
18b9 : 98                       tya
18ba : 49c3                     eor #$c3
18bc : a8                       tay
18bd : 28                       plp
18be : 8405                     sty zpt+3
18c0 : 08                       php         ;flags after load/store sequence
18c1 : 49c3                     eor #$c3
18c3 : a8                       tay
18c4 : c40e                     cpy zp1+3   ;test result
                                trap_ne
18c6 : f003            >        beq skip1188
                       >        trap            ;failed not equal (non zero)
18c8 : 206144          >        jsr sp4_trap_fail 
                       >
18cb :                 >skip1188
                        
18cb : 68                       pla         ;load status
                                eor_flag 0
18cc : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
18ce : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
18d1 : f003            >        beq skip1191
                       >        trap            ;failed not equal (non zero)
18d3 : 206144          >        jsr sp4_trap_fail 
                       >
18d6 :                 >skip1191
                        
                        
                                set_stat $ff
                       >            load_flag $ff
18d6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
18d8 : 48              >            pha         ;use stack to load status
18d9 : 28              >            plp
                        
18da : ac1802                   ldy abs1  
18dd : 08                       php         ;test stores do not alter flags
18de : 98                       tya
18df : 49c3                     eor #$c3
18e1 : a8                       tay
18e2 : 28                       plp
18e3 : 8402                     sty zpt  
18e5 : 08                       php         ;flags after load/store sequence
18e6 : 49c3                     eor #$c3
18e8 : a8                       tay
18e9 : c50b                     cmp zp1     ;test result
                                trap_ne
18eb : f003            >        beq skip1195
                       >        trap            ;failed not equal (non zero)
18ed : 206144          >        jsr sp4_trap_fail 
                       >
18f0 :                 >skip1195
                        
18f0 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
18f1 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
18f3 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
18f6 : f003            >        beq skip1198
                       >        trap            ;failed not equal (non zero)
18f8 : 206144          >        jsr sp4_trap_fail 
                       >
18fb :                 >skip1198
                        
                                set_stat $ff
                       >            load_flag $ff
18fb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
18fd : 48              >            pha         ;use stack to load status
18fe : 28              >            plp
                        
18ff : ac1902                   ldy abs1+1
1902 : 08                       php         ;test stores do not alter flags
1903 : 98                       tya
1904 : 49c3                     eor #$c3
1906 : a8                       tay
1907 : 28                       plp
1908 : 8403                     sty zpt+1
190a : 08                       php         ;flags after load/store sequence
190b : 49c3                     eor #$c3
190d : a8                       tay
190e : c50c                     cmp zp1+1   ;test result
                                trap_ne
1910 : f003            >        beq skip1202
                       >        trap            ;failed not equal (non zero)
1912 : 206144          >        jsr sp4_trap_fail 
                       >
1915 :                 >skip1202
                        
1915 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1916 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1918 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
191b : f003            >        beq skip1205
                       >        trap            ;failed not equal (non zero)
191d : 206144          >        jsr sp4_trap_fail 
                       >
1920 :                 >skip1205
                        
                                set_stat $ff
                       >            load_flag $ff
1920 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1922 : 48              >            pha         ;use stack to load status
1923 : 28              >            plp
                        
1924 : ac1a02                   ldy abs1+2
1927 : 08                       php         ;test stores do not alter flags
1928 : 98                       tya
1929 : 49c3                     eor #$c3
192b : a8                       tay
192c : 28                       plp
192d : 8404                     sty zpt+2
192f : 08                       php         ;flags after load/store sequence
1930 : 49c3                     eor #$c3
1932 : a8                       tay
1933 : c50d                     cmp zp1+2   ;test result
                                trap_ne
1935 : f003            >        beq skip1209
                       >        trap            ;failed not equal (non zero)
1937 : 206144          >        jsr sp4_trap_fail 
                       >
193a :                 >skip1209
                        
193a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
193b : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
193d : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1940 : f003            >        beq skip1212
                       >        trap            ;failed not equal (non zero)
1942 : 206144          >        jsr sp4_trap_fail 
                       >
1945 :                 >skip1212
                        
                                set_stat $ff
                       >            load_flag $ff
1945 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1947 : 48              >            pha         ;use stack to load status
1948 : 28              >            plp
                        
1949 : ac1b02                   ldy abs1+3
194c : 08                       php         ;test stores do not alter flags
194d : 98                       tya
194e : 49c3                     eor #$c3
1950 : a8                       tay
1951 : 28                       plp
1952 : 8405                     sty zpt+3
1954 : 08                       php         ;flags after load/store sequence
1955 : 49c3                     eor #$c3
1957 : a8                       tay
1958 : c50e                     cmp zp1+3   ;test result
                                trap_ne
195a : f003            >        beq skip1216
                       >        trap            ;failed not equal (non zero)
195c : 206144          >        jsr sp4_trap_fail 
                       >
195f :                 >skip1216
                        
195f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1960 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1962 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1965 : f003            >        beq skip1219
                       >        trap            ;failed not equal (non zero)
1967 : 206144          >        jsr sp4_trap_fail 
                       >
196a :                 >skip1219
                        
                        
                        
                                set_stat 0
                       >            load_flag 0
196a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
196c : 48              >            pha         ;use stack to load status
196d : 28              >            plp
                        
196e : a0c3                     ldy #$c3  
1970 : 08                       php
1971 : cc1802                   cpy abs1    ;test result
                                trap_ne
1974 : f003            >        beq skip1223
                       >        trap            ;failed not equal (non zero)
1976 : 206144          >        jsr sp4_trap_fail 
                       >
1979 :                 >skip1223
                        
1979 : 68                       pla         ;load status
                                eor_flag 0
197a : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
197c : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
197f : f003            >        beq skip1226
                       >        trap            ;failed not equal (non zero)
1981 : 206144          >        jsr sp4_trap_fail 
                       >
1984 :                 >skip1226
                        
                                set_stat 0
                       >            load_flag 0
1984 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1986 : 48              >            pha         ;use stack to load status
1987 : 28              >            plp
                        
1988 : a082                     ldy #$82
198a : 08                       php
198b : cc1902                   cpy abs1+1  ;test result
                                trap_ne
198e : f003            >        beq skip1230
                       >        trap            ;failed not equal (non zero)
1990 : 206144          >        jsr sp4_trap_fail 
                       >
1993 :                 >skip1230
                        
1993 : 68                       pla         ;load status
                                eor_flag 0
1994 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1996 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1999 : f003            >        beq skip1233
                       >        trap            ;failed not equal (non zero)
199b : 206144          >        jsr sp4_trap_fail 
                       >
199e :                 >skip1233
                        
                                set_stat 0
                       >            load_flag 0
199e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
19a0 : 48              >            pha         ;use stack to load status
19a1 : 28              >            plp
                        
19a2 : a041                     ldy #$41
19a4 : 08                       php
19a5 : cc1a02                   cpy abs1+2  ;test result
                                trap_ne
19a8 : f003            >        beq skip1237
                       >        trap            ;failed not equal (non zero)
19aa : 206144          >        jsr sp4_trap_fail 
                       >
19ad :                 >skip1237
                        
19ad : 68                       pla         ;load status
                                eor_flag 0
19ae : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
19b0 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
19b3 : f003            >        beq skip1240
                       >        trap            ;failed not equal (non zero)
19b5 : 206144          >        jsr sp4_trap_fail 
                       >
19b8 :                 >skip1240
                        
                                set_stat 0
                       >            load_flag 0
19b8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
19ba : 48              >            pha         ;use stack to load status
19bb : 28              >            plp
                        
19bc : a000                     ldy #0
19be : 08                       php
19bf : cc1b02                   cpy abs1+3  ;test result
                                trap_ne
19c2 : f003            >        beq skip1244
                       >        trap            ;failed not equal (non zero)
19c4 : 206144          >        jsr sp4_trap_fail 
                       >
19c7 :                 >skip1244
                        
19c7 : 68                       pla         ;load status
                                eor_flag 0
19c8 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
19ca : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
19cd : f003            >        beq skip1247
                       >        trap            ;failed not equal (non zero)
19cf : 206144          >        jsr sp4_trap_fail 
                       >
19d2 :                 >skip1247
                        
                        
                                set_stat $ff
                       >            load_flag $ff
19d2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
19d4 : 48              >            pha         ;use stack to load status
19d5 : 28              >            plp
                        
19d6 : a0c3                     ldy #$c3  
19d8 : 08                       php
19d9 : cc1802                   cpy abs1    ;test result
                                trap_ne
19dc : f003            >        beq skip1251
                       >        trap            ;failed not equal (non zero)
19de : 206144          >        jsr sp4_trap_fail 
                       >
19e1 :                 >skip1251
                        
19e1 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
19e2 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
19e4 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
19e7 : f003            >        beq skip1254
                       >        trap            ;failed not equal (non zero)
19e9 : 206144          >        jsr sp4_trap_fail 
                       >
19ec :                 >skip1254
                        
                                set_stat $ff
                       >            load_flag $ff
19ec : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
19ee : 48              >            pha         ;use stack to load status
19ef : 28              >            plp
                        
19f0 : a082                     ldy #$82
19f2 : 08                       php
19f3 : cc1902                   cpy abs1+1  ;test result
                                trap_ne
19f6 : f003            >        beq skip1258
                       >        trap            ;failed not equal (non zero)
19f8 : 206144          >        jsr sp4_trap_fail 
                       >
19fb :                 >skip1258
                        
19fb : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
19fc : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
19fe : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1a01 : f003            >        beq skip1261
                       >        trap            ;failed not equal (non zero)
1a03 : 206144          >        jsr sp4_trap_fail 
                       >
1a06 :                 >skip1261
                        
                                set_stat $ff
                       >            load_flag $ff
1a06 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1a08 : 48              >            pha         ;use stack to load status
1a09 : 28              >            plp
                        
1a0a : a041                     ldy #$41
1a0c : 08                       php
1a0d : cc1a02                   cpy abs1+2   ;test result
                                trap_ne
1a10 : f003            >        beq skip1265
                       >        trap            ;failed not equal (non zero)
1a12 : 206144          >        jsr sp4_trap_fail 
                       >
1a15 :                 >skip1265
                        
1a15 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1a16 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1a18 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1a1b : f003            >        beq skip1268
                       >        trap            ;failed not equal (non zero)
1a1d : 206144          >        jsr sp4_trap_fail 
                       >
1a20 :                 >skip1268
                        
                                set_stat $ff
                       >            load_flag $ff
1a20 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1a22 : 48              >            pha         ;use stack to load status
1a23 : 28              >            plp
                        
1a24 : a000                     ldy #0
1a26 : 08                       php
1a27 : cc1b02                   cpy abs1+3  ;test result
                                trap_ne
1a2a : f003            >        beq skip1272
                       >        trap            ;failed not equal (non zero)
1a2c : 206144          >        jsr sp4_trap_fail 
                       >
1a2f :                 >skip1272
                        
1a2f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1a30 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1a32 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1a35 : f003            >        beq skip1275
                       >        trap            ;failed not equal (non zero)
1a37 : 206144          >        jsr sp4_trap_fail 
                       >
1a3a :                 >skip1275
                        
                                
1a3a : a000                     ldy #0
1a3c : a502                     lda zpt  
1a3e : 49c3                     eor #$c3
1a40 : c50b                     cmp zp1  
                                trap_ne     ;store to zp   data
1a42 : f003            >        beq skip1277
                       >        trap            ;failed not equal (non zero)
1a44 : 206144          >        jsr sp4_trap_fail 
                       >
1a47 :                 >skip1277
                        
1a47 : 8402                     sty zpt     ;clear                
1a49 : ad0302                   lda abst  
1a4c : 49c3                     eor #$c3
1a4e : cd1802                   cmp abs1  
                                trap_ne     ;store to abs   data
1a51 : f003            >        beq skip1279
                       >        trap            ;failed not equal (non zero)
1a53 : 206144          >        jsr sp4_trap_fail 
                       >
1a56 :                 >skip1279
                        
1a56 : 8c0302                   sty abst    ;clear                
1a59 : a503                     lda zpt+1
1a5b : 49c3                     eor #$c3
1a5d : c50c                     cmp zp1+1
                                trap_ne     ;store to zp+1 data
1a5f : f003            >        beq skip1281
                       >        trap            ;failed not equal (non zero)
1a61 : 206144          >        jsr sp4_trap_fail 
                       >
1a64 :                 >skip1281
                        
1a64 : 8403                     sty zpt+1   ;clear                
1a66 : ad0402                   lda abst+1
1a69 : 49c3                     eor #$c3
1a6b : cd1902                   cmp abs1+1
                                trap_ne     ;store to abs+1 data
1a6e : f003            >        beq skip1283
                       >        trap            ;failed not equal (non zero)
1a70 : 206144          >        jsr sp4_trap_fail 
                       >
1a73 :                 >skip1283
                        
1a73 : 8c0402                   sty abst+1  ;clear                
1a76 : a504                     lda zpt+2
1a78 : 49c3                     eor #$c3
1a7a : c50d                     cmp zp1+2
                                trap_ne     ;store to zp+2 data
1a7c : f003            >        beq skip1285
                       >        trap            ;failed not equal (non zero)
1a7e : 206144          >        jsr sp4_trap_fail 
                       >
1a81 :                 >skip1285
                        
1a81 : 8404                     sty zpt+2   ;clear                
1a83 : ad0502                   lda abst+2
1a86 : 49c3                     eor #$c3
1a88 : cd1a02                   cmp abs1+2
                                trap_ne     ;store to abs+2 data
1a8b : f003            >        beq skip1287
                       >        trap            ;failed not equal (non zero)
1a8d : 206144          >        jsr sp4_trap_fail 
                       >
1a90 :                 >skip1287
                        
1a90 : 8c0502                   sty abst+2  ;clear                
1a93 : a505                     lda zpt+3
1a95 : 49c3                     eor #$c3
1a97 : c50e                     cmp zp1+3
                                trap_ne     ;store to zp+3 data
1a99 : f003            >        beq skip1289
                       >        trap            ;failed not equal (non zero)
1a9b : 206144          >        jsr sp4_trap_fail 
                       >
1a9e :                 >skip1289
                        
1a9e : 8405                     sty zpt+3   ;clear                
1aa0 : ad0602                   lda abst+3
1aa3 : 49c3                     eor #$c3
1aa5 : cd1b02                   cmp abs1+3
                                trap_ne     ;store to abs+3 data
1aa8 : f003            >        beq skip1291
                       >        trap            ;failed not equal (non zero)
1aaa : 206144          >        jsr sp4_trap_fail 
                       >
1aad :                 >skip1291
                        
1aad : 8c0602                   sty abst+3  ;clear                
                                next_test
1ab0 : ad0002          >            lda test_case   ;previous test
1ab3 : c914            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1ab5 : f003            >        beq skip1294
                       >        trap            ;failed not equal (non zero)
1ab7 : 206144          >        jsr sp4_trap_fail 
                       >
1aba :                 >skip1294
                       >
0015 =                 >test_num = test_num + 1
1aba : a915            >            lda #test_num   ;*** next tests' number
1abc : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing load / store accumulator LDA / STA all addressing modes
                        ; LDA / STA - zp,x / abs,x
1abf : a203                     ldx #3
1ac1 :                  tldax    
                                set_stat 0
                       >            load_flag 0
1ac1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1ac3 : 48              >            pha         ;use stack to load status
1ac4 : 28              >            plp
                        
1ac5 : b50b                     lda zp1,x
1ac7 : 08                       php         ;test stores do not alter flags
1ac8 : 49c3                     eor #$c3
1aca : 28                       plp
1acb : 9d0302                   sta abst,x
1ace : 08                       php         ;flags after load/store sequence
1acf : 49c3                     eor #$c3
1ad1 : dd1802                   cmp abs1,x  ;test result
                                trap_ne
1ad4 : f003            >        beq skip1298
                       >        trap            ;failed not equal (non zero)
1ad6 : 206144          >        jsr sp4_trap_fail 
                       >
1ad9 :                 >skip1298
                        
1ad9 : 68                       pla         ;load status
                                eor_flag 0
1ada : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1adc : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
1adf : f003            >        beq skip1301
                       >        trap            ;failed not equal (non zero)
1ae1 : 206144          >        jsr sp4_trap_fail 
                       >
1ae4 :                 >skip1301
                        
1ae4 : ca                       dex
1ae5 : 10da                     bpl tldax                  
                        
1ae7 : a203                     ldx #3
1ae9 :                  tldax1   
                                set_stat $ff
                       >            load_flag $ff
1ae9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1aeb : 48              >            pha         ;use stack to load status
1aec : 28              >            plp
                        
1aed : b50b                     lda zp1,x
1aef : 08                       php         ;test stores do not alter flags
1af0 : 49c3                     eor #$c3
1af2 : 28                       plp
1af3 : 9d0302                   sta abst,x
1af6 : 08                       php         ;flags after load/store sequence
1af7 : 49c3                     eor #$c3
1af9 : dd1802                   cmp abs1,x   ;test result
                                trap_ne
1afc : f003            >        beq skip1305
                       >        trap            ;failed not equal (non zero)
1afe : 206144          >        jsr sp4_trap_fail 
                       >
1b01 :                 >skip1305
                        
1b01 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1b02 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1b04 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
1b07 : f003            >        beq skip1308
                       >        trap            ;failed not equal (non zero)
1b09 : 206144          >        jsr sp4_trap_fail 
                       >
1b0c :                 >skip1308
                        
1b0c : ca                       dex
1b0d : 10da                     bpl tldax1                  
                        
1b0f : a203                     ldx #3
1b11 :                  tldax2   
                                set_stat 0
                       >            load_flag 0
1b11 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1b13 : 48              >            pha         ;use stack to load status
1b14 : 28              >            plp
                        
1b15 : bd1802                   lda abs1,x
1b18 : 08                       php         ;test stores do not alter flags
1b19 : 49c3                     eor #$c3
1b1b : 28                       plp
1b1c : 9502                     sta zpt,x
1b1e : 08                       php         ;flags after load/store sequence
1b1f : 49c3                     eor #$c3
1b21 : d50b                     cmp zp1,x   ;test result
                                trap_ne
1b23 : f003            >        beq skip1312
                       >        trap            ;failed not equal (non zero)
1b25 : 206144          >        jsr sp4_trap_fail 
                       >
1b28 :                 >skip1312
                        
1b28 : 68                       pla         ;load status
                                eor_flag 0
1b29 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1b2b : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
1b2e : f003            >        beq skip1315
                       >        trap            ;failed not equal (non zero)
1b30 : 206144          >        jsr sp4_trap_fail 
                       >
1b33 :                 >skip1315
                        
1b33 : ca                       dex
1b34 : 10db                     bpl tldax2                  
                        
1b36 : a203                     ldx #3
1b38 :                  tldax3
                                set_stat $ff
                       >            load_flag $ff
1b38 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1b3a : 48              >            pha         ;use stack to load status
1b3b : 28              >            plp
                        
1b3c : bd1802                   lda abs1,x
1b3f : 08                       php         ;test stores do not alter flags
1b40 : 49c3                     eor #$c3
1b42 : 28                       plp
1b43 : 9502                     sta zpt,x
1b45 : 08                       php         ;flags after load/store sequence
1b46 : 49c3                     eor #$c3
1b48 : d50b                     cmp zp1,x   ;test result
                                trap_ne
1b4a : f003            >        beq skip1319
                       >        trap            ;failed not equal (non zero)
1b4c : 206144          >        jsr sp4_trap_fail 
                       >
1b4f :                 >skip1319
                        
1b4f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1b50 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1b52 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
1b55 : f003            >        beq skip1322
                       >        trap            ;failed not equal (non zero)
1b57 : 206144          >        jsr sp4_trap_fail 
                       >
1b5a :                 >skip1322
                        
1b5a : ca                       dex
1b5b : 10db                     bpl tldax3
                        
1b5d : a203                     ldx #3      ;testing store result
1b5f : a000                     ldy #0
1b61 : b502             tstax   lda zpt,x
1b63 : 49c3                     eor #$c3
1b65 : d50b                     cmp zp1,x
                                trap_ne     ;store to zp,x data
1b67 : f003            >        beq skip1324
                       >        trap            ;failed not equal (non zero)
1b69 : 206144          >        jsr sp4_trap_fail 
                       >
1b6c :                 >skip1324
                        
1b6c : 9402                     sty zpt,x   ;clear                
1b6e : bd0302                   lda abst,x
1b71 : 49c3                     eor #$c3
1b73 : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
1b76 : f003            >        beq skip1326
                       >        trap            ;failed not equal (non zero)
1b78 : 206144          >        jsr sp4_trap_fail 
                       >
1b7b :                 >skip1326
                        
1b7b : 8a                       txa
1b7c : 9d0302                   sta abst,x  ;clear                
1b7f : ca                       dex
1b80 : 10df                     bpl tstax
                                next_test
1b82 : ad0002          >            lda test_case   ;previous test
1b85 : c915            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1b87 : f003            >        beq skip1329
                       >        trap            ;failed not equal (non zero)
1b89 : 206144          >        jsr sp4_trap_fail 
                       >
1b8c :                 >skip1329
                       >
0016 =                 >test_num = test_num + 1
1b8c : a916            >            lda #test_num   ;*** next tests' number
1b8e : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDA / STA - (zp),y / abs,y / (zp,x)
1b91 : a003                     ldy #3
1b93 :                  tlday    
                                set_stat 0
                       >            load_flag 0
1b93 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1b95 : 48              >            pha         ;use stack to load status
1b96 : 28              >            plp
                        
1b97 : b11c                     lda (ind1),y
1b99 : 08                       php         ;test stores do not alter flags
1b9a : 49c3                     eor #$c3
1b9c : 28                       plp
1b9d : 990302                   sta abst,y
1ba0 : 08                       php         ;flags after load/store sequence
1ba1 : 49c3                     eor #$c3
1ba3 : d91802                   cmp abs1,y  ;test result
                                trap_ne
1ba6 : f003            >        beq skip1333
                       >        trap            ;failed not equal (non zero)
1ba8 : 206144          >        jsr sp4_trap_fail 
                       >
1bab :                 >skip1333
                        
1bab : 68                       pla         ;load status
                                eor_flag 0
1bac : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1bae : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
1bb1 : f003            >        beq skip1336
                       >        trap            ;failed not equal (non zero)
1bb3 : 206144          >        jsr sp4_trap_fail 
                       >
1bb6 :                 >skip1336
                        
1bb6 : 88                       dey
1bb7 : 10da                     bpl tlday                  
                        
1bb9 : a003                     ldy #3
1bbb :                  tlday1   
                                set_stat $ff
                       >            load_flag $ff
1bbb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1bbd : 48              >            pha         ;use stack to load status
1bbe : 28              >            plp
                        
1bbf : b11c                     lda (ind1),y
1bc1 : 08                       php         ;test stores do not alter flags
1bc2 : 49c3                     eor #$c3
1bc4 : 28                       plp
1bc5 : 990302                   sta abst,y
1bc8 : 08                       php         ;flags after load/store sequence
1bc9 : 49c3                     eor #$c3
1bcb : d91802                   cmp abs1,y  ;test result
                                trap_ne
1bce : f003            >        beq skip1340
                       >        trap            ;failed not equal (non zero)
1bd0 : 206144          >        jsr sp4_trap_fail 
                       >
1bd3 :                 >skip1340
                        
1bd3 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1bd4 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1bd6 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
1bd9 : f003            >        beq skip1343
                       >        trap            ;failed not equal (non zero)
1bdb : 206144          >        jsr sp4_trap_fail 
                       >
1bde :                 >skip1343
                        
1bde : 88                       dey
1bdf : 10da                     bpl tlday1                  
                        
1be1 : a003                     ldy #3      ;testing store result
1be3 : a200                     ldx #0
1be5 : b90302           tstay   lda abst,y
1be8 : 49c3                     eor #$c3
1bea : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
1bed : f003            >        beq skip1345
                       >        trap            ;failed not equal (non zero)
1bef : 206144          >        jsr sp4_trap_fail 
                       >
1bf2 :                 >skip1345
                        
1bf2 : 8a                       txa
1bf3 : 990302                   sta abst,y  ;clear                
1bf6 : 88                       dey
1bf7 : 10ec                     bpl tstay
                        
1bf9 : a003                     ldy #3
1bfb :                  tlday2   
                                set_stat 0
                       >            load_flag 0
1bfb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1bfd : 48              >            pha         ;use stack to load status
1bfe : 28              >            plp
                        
1bff : b91802                   lda abs1,y
1c02 : 08                       php         ;test stores do not alter flags
1c03 : 49c3                     eor #$c3
1c05 : 28                       plp
1c06 : 9128                     sta (indt),y
1c08 : 08                       php         ;flags after load/store sequence
1c09 : 49c3                     eor #$c3
1c0b : d11c                     cmp (ind1),y    ;test result
                                trap_ne
1c0d : f003            >        beq skip1349
                       >        trap            ;failed not equal (non zero)
1c0f : 206144          >        jsr sp4_trap_fail 
                       >
1c12 :                 >skip1349
                        
1c12 : 68                       pla         ;load status
                                eor_flag 0
1c13 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1c15 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
1c18 : f003            >        beq skip1352
                       >        trap            ;failed not equal (non zero)
1c1a : 206144          >        jsr sp4_trap_fail 
                       >
1c1d :                 >skip1352
                        
1c1d : 88                       dey
1c1e : 10db                     bpl tlday2                  
                        
1c20 : a003                     ldy #3
1c22 :                  tlday3   
                                set_stat $ff
                       >            load_flag $ff
1c22 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1c24 : 48              >            pha         ;use stack to load status
1c25 : 28              >            plp
                        
1c26 : b91802                   lda abs1,y
1c29 : 08                       php         ;test stores do not alter flags
1c2a : 49c3                     eor #$c3
1c2c : 28                       plp
1c2d : 9128                     sta (indt),y
1c2f : 08                       php         ;flags after load/store sequence
1c30 : 49c3                     eor #$c3
1c32 : d11c                     cmp (ind1),y   ;test result
                                trap_ne
1c34 : f003            >        beq skip1356
                       >        trap            ;failed not equal (non zero)
1c36 : 206144          >        jsr sp4_trap_fail 
                       >
1c39 :                 >skip1356
                        
1c39 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1c3a : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1c3c : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
1c3f : f003            >        beq skip1359
                       >        trap            ;failed not equal (non zero)
1c41 : 206144          >        jsr sp4_trap_fail 
                       >
1c44 :                 >skip1359
                        
1c44 : 88                       dey
1c45 : 10db                     bpl tlday3
                                
1c47 : a003                     ldy #3      ;testing store result
1c49 : a200                     ldx #0
1c4b : b90302           tstay1  lda abst,y
1c4e : 49c3                     eor #$c3
1c50 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
1c53 : f003            >        beq skip1361
                       >        trap            ;failed not equal (non zero)
1c55 : 206144          >        jsr sp4_trap_fail 
                       >
1c58 :                 >skip1361
                        
1c58 : 8a                       txa
1c59 : 990302                   sta abst,y  ;clear                
1c5c : 88                       dey
1c5d : 10ec                     bpl tstay1
                                
1c5f : a206                     ldx #6
1c61 : a003                     ldy #3
1c63 :                  tldax4   
                                set_stat 0
                       >            load_flag 0
1c63 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1c65 : 48              >            pha         ;use stack to load status
1c66 : 28              >            plp
                        
1c67 : a11c                     lda (ind1,x)
1c69 : 08                       php         ;test stores do not alter flags
1c6a : 49c3                     eor #$c3
1c6c : 28                       plp
1c6d : 8128                     sta (indt,x)
1c6f : 08                       php         ;flags after load/store sequence
1c70 : 49c3                     eor #$c3
1c72 : d91802                   cmp abs1,y  ;test result
                                trap_ne
1c75 : f003            >        beq skip1365
                       >        trap            ;failed not equal (non zero)
1c77 : 206144          >        jsr sp4_trap_fail 
                       >
1c7a :                 >skip1365
                        
1c7a : 68                       pla         ;load status
                                eor_flag 0
1c7b : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1c7d : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
1c80 : f003            >        beq skip1368
                       >        trap            ;failed not equal (non zero)
1c82 : 206144          >        jsr sp4_trap_fail 
                       >
1c85 :                 >skip1368
                        
1c85 : ca                       dex
1c86 : ca                       dex
1c87 : 88                       dey
1c88 : 10d9                     bpl tldax4                  
                        
1c8a : a206                     ldx #6
1c8c : a003                     ldy #3
1c8e :                  tldax5
                                set_stat $ff
                       >            load_flag $ff
1c8e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1c90 : 48              >            pha         ;use stack to load status
1c91 : 28              >            plp
                        
1c92 : a11c                     lda (ind1,x)
1c94 : 08                       php         ;test stores do not alter flags
1c95 : 49c3                     eor #$c3
1c97 : 28                       plp
1c98 : 8128                     sta (indt,x)
1c9a : 08                       php         ;flags after load/store sequence
1c9b : 49c3                     eor #$c3
1c9d : d91802                   cmp abs1,y  ;test result
                                trap_ne
1ca0 : f003            >        beq skip1372
                       >        trap            ;failed not equal (non zero)
1ca2 : 206144          >        jsr sp4_trap_fail 
                       >
1ca5 :                 >skip1372
                        
1ca5 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1ca6 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1ca8 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
1cab : f003            >        beq skip1375
                       >        trap            ;failed not equal (non zero)
1cad : 206144          >        jsr sp4_trap_fail 
                       >
1cb0 :                 >skip1375
                        
1cb0 : ca                       dex
1cb1 : ca                       dex
1cb2 : 88                       dey
1cb3 : 10d9                     bpl tldax5
                        
1cb5 : a003                     ldy #3      ;testing store result
1cb7 : a200                     ldx #0
1cb9 : b90302           tstay2  lda abst,y
1cbc : 49c3                     eor #$c3
1cbe : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
1cc1 : f003            >        beq skip1377
                       >        trap            ;failed not equal (non zero)
1cc3 : 206144          >        jsr sp4_trap_fail 
                       >
1cc6 :                 >skip1377
                        
1cc6 : 8a                       txa
1cc7 : 990302                   sta abst,y  ;clear                
1cca : 88                       dey
1ccb : 10ec                     bpl tstay2
                                next_test
1ccd : ad0002          >            lda test_case   ;previous test
1cd0 : c916            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1cd2 : f003            >        beq skip1380
                       >        trap            ;failed not equal (non zero)
1cd4 : 206144          >        jsr sp4_trap_fail 
                       >
1cd7 :                 >skip1380
                       >
0017 =                 >test_num = test_num + 1
1cd7 : a917            >            lda #test_num   ;*** next tests' number
1cd9 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; indexed wraparound test (only zp should wrap)
1cdc : a2fd                     ldx #3+$fa
1cde : b511             tldax6  lda zp1-$fa&$ff,x   ;wrap on indexed zp
1ce0 : 9d0901                   sta abst-$fa,x      ;no STX abs,x!
1ce3 : ca                       dex
1ce4 : e0fa                     cpx #$fa
1ce6 : b0f6                     bcs tldax6                  
1ce8 : a2fd                     ldx #3+$fa
1cea : bd1e01           tldax7  lda abs1-$fa,x      ;no wrap on indexed abs
1ced : 9508                     sta zpt-$fa&$ff,x
1cef : ca                       dex
1cf0 : e0fa                     cpx #$fa
1cf2 : b0f6                     bcs tldax7
                                                  
1cf4 : a203                     ldx #3      ;testing wraparound result
1cf6 : a000                     ldy #0
1cf8 : b502             tstax1  lda zpt,x
1cfa : d50b                     cmp zp1,x
                                trap_ne     ;store to zp,x data
1cfc : f003            >        beq skip1382
                       >        trap            ;failed not equal (non zero)
1cfe : 206144          >        jsr sp4_trap_fail 
                       >
1d01 :                 >skip1382
                        
1d01 : 9402                     sty zpt,x   ;clear                
1d03 : bd0302                   lda abst,x
1d06 : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
1d09 : f003            >        beq skip1384
                       >        trap            ;failed not equal (non zero)
1d0b : 206144          >        jsr sp4_trap_fail 
                       >
1d0e :                 >skip1384
                        
1d0e : 8a                       txa
1d0f : 9d0302                   sta abst,x  ;clear                
1d12 : ca                       dex
1d13 : 10e3                     bpl tstax1
                        
1d15 : a0fb                     ldy #3+$f8
1d17 : a2fe                     ldx #6+$f8
1d19 : a124             tlday4  lda (ind1-$f8&$ff,x) ;wrap on indexed zp indirect
1d1b : 990b01                   sta abst-$f8,y
1d1e : ca                       dex
1d1f : ca                       dex
1d20 : 88                       dey
1d21 : c0f8                     cpy #$f8
1d23 : b0f4                     bcs tlday4
1d25 : a003                     ldy #3      ;testing wraparound result
1d27 : a200                     ldx #0
1d29 : b90302           tstay4  lda abst,y
1d2c : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
1d2f : f003            >        beq skip1386
                       >        trap            ;failed not equal (non zero)
1d31 : 206144          >        jsr sp4_trap_fail 
                       >
1d34 :                 >skip1386
                        
1d34 : 8a                       txa
1d35 : 990302                   sta abst,y  ;clear                
1d38 : 88                       dey
1d39 : 10ee                     bpl tstay4
                                
1d3b : a0fb                     ldy #3+$f8
1d3d : b92001           tlday5  lda abs1-$f8,y  ;no wrap on indexed abs
1d40 : 9130                     sta (inwt),y
1d42 : 88                       dey
1d43 : c0f8                     cpy #$f8
1d45 : b0f6                     bcs tlday5                  
1d47 : a003                     ldy #3      ;testing wraparound result
1d49 : a200                     ldx #0
1d4b : b90302           tstay5  lda abst,y
1d4e : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
1d51 : f003            >        beq skip1388
                       >        trap            ;failed not equal (non zero)
1d53 : 206144          >        jsr sp4_trap_fail 
                       >
1d56 :                 >skip1388
                        
1d56 : 8a                       txa
1d57 : 990302                   sta abst,y  ;clear                
1d5a : 88                       dey
1d5b : 10ee                     bpl tstay5
                        
1d5d : a0fb                     ldy #3+$f8
1d5f : a2fe                     ldx #6+$f8
1d61 : b126             tlday6  lda (inw1),y    ;no wrap on zp indirect indexed 
1d63 : 8130                     sta (indt-$f8&$ff,x)
1d65 : ca                       dex
1d66 : ca                       dex
1d67 : 88                       dey
1d68 : c0f8                     cpy #$f8
1d6a : b0f5                     bcs tlday6
1d6c : a003                     ldy #3      ;testing wraparound result
1d6e : a200                     ldx #0
1d70 : b90302           tstay6  lda abst,y
1d73 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
1d76 : f003            >        beq skip1390
                       >        trap            ;failed not equal (non zero)
1d78 : 206144          >        jsr sp4_trap_fail 
                       >
1d7b :                 >skip1390
                        
1d7b : 8a                       txa
1d7c : 990302                   sta abst,y  ;clear                
1d7f : 88                       dey
1d80 : 10ee                     bpl tstay6
                                next_test
1d82 : ad0002          >            lda test_case   ;previous test
1d85 : c917            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1d87 : f003            >        beq skip1393
                       >        trap            ;failed not equal (non zero)
1d89 : 206144          >        jsr sp4_trap_fail 
                       >
1d8c :                 >skip1393
                       >
0018 =                 >test_num = test_num + 1
1d8c : a918            >            lda #test_num   ;*** next tests' number
1d8e : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDA / STA - zp / abs / #
                                set_stat 0  
                       >            load_flag 0  
1d91 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
1d93 : 48              >            pha         ;use stack to load status
1d94 : 28              >            plp
                        
1d95 : a50b                     lda zp1
1d97 : 08                       php         ;test stores do not alter flags
1d98 : 49c3                     eor #$c3
1d9a : 28                       plp
1d9b : 8d0302                   sta abst
1d9e : 08                       php         ;flags after load/store sequence
1d9f : 49c3                     eor #$c3
1da1 : c9c3                     cmp #$c3    ;test result
                                trap_ne
1da3 : f003            >        beq skip1397
                       >        trap            ;failed not equal (non zero)
1da5 : 206144          >        jsr sp4_trap_fail 
                       >
1da8 :                 >skip1397
                        
1da8 : 68                       pla         ;load status
                                eor_flag 0
1da9 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1dab : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1dae : f003            >        beq skip1400
                       >        trap            ;failed not equal (non zero)
1db0 : 206144          >        jsr sp4_trap_fail 
                       >
1db3 :                 >skip1400
                        
                                set_stat 0
                       >            load_flag 0
1db3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1db5 : 48              >            pha         ;use stack to load status
1db6 : 28              >            plp
                        
1db7 : a50c                     lda zp1+1
1db9 : 08                       php         ;test stores do not alter flags
1dba : 49c3                     eor #$c3
1dbc : 28                       plp
1dbd : 8d0402                   sta abst+1
1dc0 : 08                       php         ;flags after load/store sequence
1dc1 : 49c3                     eor #$c3
1dc3 : c982                     cmp #$82    ;test result
                                trap_ne
1dc5 : f003            >        beq skip1404
                       >        trap            ;failed not equal (non zero)
1dc7 : 206144          >        jsr sp4_trap_fail 
                       >
1dca :                 >skip1404
                        
1dca : 68                       pla         ;load status
                                eor_flag 0
1dcb : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1dcd : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1dd0 : f003            >        beq skip1407
                       >        trap            ;failed not equal (non zero)
1dd2 : 206144          >        jsr sp4_trap_fail 
                       >
1dd5 :                 >skip1407
                        
                                set_stat 0
                       >            load_flag 0
1dd5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1dd7 : 48              >            pha         ;use stack to load status
1dd8 : 28              >            plp
                        
1dd9 : a50d                     lda zp1+2
1ddb : 08                       php         ;test stores do not alter flags
1ddc : 49c3                     eor #$c3
1dde : 28                       plp
1ddf : 8d0502                   sta abst+2
1de2 : 08                       php         ;flags after load/store sequence
1de3 : 49c3                     eor #$c3
1de5 : c941                     cmp #$41    ;test result
                                trap_ne
1de7 : f003            >        beq skip1411
                       >        trap            ;failed not equal (non zero)
1de9 : 206144          >        jsr sp4_trap_fail 
                       >
1dec :                 >skip1411
                        
1dec : 68                       pla         ;load status
                                eor_flag 0
1ded : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1def : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1df2 : f003            >        beq skip1414
                       >        trap            ;failed not equal (non zero)
1df4 : 206144          >        jsr sp4_trap_fail 
                       >
1df7 :                 >skip1414
                        
                                set_stat 0
                       >            load_flag 0
1df7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1df9 : 48              >            pha         ;use stack to load status
1dfa : 28              >            plp
                        
1dfb : a50e                     lda zp1+3
1dfd : 08                       php         ;test stores do not alter flags
1dfe : 49c3                     eor #$c3
1e00 : 28                       plp
1e01 : 8d0602                   sta abst+3
1e04 : 08                       php         ;flags after load/store sequence
1e05 : 49c3                     eor #$c3
1e07 : c900                     cmp #0      ;test result
                                trap_ne
1e09 : f003            >        beq skip1418
                       >        trap            ;failed not equal (non zero)
1e0b : 206144          >        jsr sp4_trap_fail 
                       >
1e0e :                 >skip1418
                        
1e0e : 68                       pla         ;load status
                                eor_flag 0
1e0f : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1e11 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1e14 : f003            >        beq skip1421
                       >        trap            ;failed not equal (non zero)
1e16 : 206144          >        jsr sp4_trap_fail 
                       >
1e19 :                 >skip1421
                        
                                set_stat $ff
                       >            load_flag $ff
1e19 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1e1b : 48              >            pha         ;use stack to load status
1e1c : 28              >            plp
                        
1e1d : a50b                     lda zp1  
1e1f : 08                       php         ;test stores do not alter flags
1e20 : 49c3                     eor #$c3
1e22 : 28                       plp
1e23 : 8d0302                   sta abst  
1e26 : 08                       php         ;flags after load/store sequence
1e27 : 49c3                     eor #$c3
1e29 : c9c3                     cmp #$c3    ;test result
                                trap_ne
1e2b : f003            >        beq skip1425
                       >        trap            ;failed not equal (non zero)
1e2d : 206144          >        jsr sp4_trap_fail 
                       >
1e30 :                 >skip1425
                        
1e30 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1e31 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1e33 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1e36 : f003            >        beq skip1428
                       >        trap            ;failed not equal (non zero)
1e38 : 206144          >        jsr sp4_trap_fail 
                       >
1e3b :                 >skip1428
                        
                                set_stat $ff
                       >            load_flag $ff
1e3b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1e3d : 48              >            pha         ;use stack to load status
1e3e : 28              >            plp
                        
1e3f : a50c                     lda zp1+1
1e41 : 08                       php         ;test stores do not alter flags
1e42 : 49c3                     eor #$c3
1e44 : 28                       plp
1e45 : 8d0402                   sta abst+1
1e48 : 08                       php         ;flags after load/store sequence
1e49 : 49c3                     eor #$c3
1e4b : c982                     cmp #$82    ;test result
                                trap_ne
1e4d : f003            >        beq skip1432
                       >        trap            ;failed not equal (non zero)
1e4f : 206144          >        jsr sp4_trap_fail 
                       >
1e52 :                 >skip1432
                        
1e52 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1e53 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1e55 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1e58 : f003            >        beq skip1435
                       >        trap            ;failed not equal (non zero)
1e5a : 206144          >        jsr sp4_trap_fail 
                       >
1e5d :                 >skip1435
                        
                                set_stat $ff
                       >            load_flag $ff
1e5d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1e5f : 48              >            pha         ;use stack to load status
1e60 : 28              >            plp
                        
1e61 : a50d                     lda zp1+2
1e63 : 08                       php         ;test stores do not alter flags
1e64 : 49c3                     eor #$c3
1e66 : 28                       plp
1e67 : 8d0502                   sta abst+2
1e6a : 08                       php         ;flags after load/store sequence
1e6b : 49c3                     eor #$c3
1e6d : c941                     cmp #$41    ;test result
                                trap_ne
1e6f : f003            >        beq skip1439
                       >        trap            ;failed not equal (non zero)
1e71 : 206144          >        jsr sp4_trap_fail 
                       >
1e74 :                 >skip1439
                        
1e74 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1e75 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1e77 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1e7a : f003            >        beq skip1442
                       >        trap            ;failed not equal (non zero)
1e7c : 206144          >        jsr sp4_trap_fail 
                       >
1e7f :                 >skip1442
                        
                                set_stat $ff
                       >            load_flag $ff
1e7f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1e81 : 48              >            pha         ;use stack to load status
1e82 : 28              >            plp
                        
1e83 : a50e                     lda zp1+3
1e85 : 08                       php         ;test stores do not alter flags
1e86 : 49c3                     eor #$c3
1e88 : 28                       plp
1e89 : 8d0602                   sta abst+3
1e8c : 08                       php         ;flags after load/store sequence
1e8d : 49c3                     eor #$c3
1e8f : c900                     cmp #0      ;test result
                                trap_ne
1e91 : f003            >        beq skip1446
                       >        trap            ;failed not equal (non zero)
1e93 : 206144          >        jsr sp4_trap_fail 
                       >
1e96 :                 >skip1446
                        
1e96 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1e97 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1e99 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1e9c : f003            >        beq skip1449
                       >        trap            ;failed not equal (non zero)
1e9e : 206144          >        jsr sp4_trap_fail 
                       >
1ea1 :                 >skip1449
                        
                                set_stat 0
                       >            load_flag 0
1ea1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1ea3 : 48              >            pha         ;use stack to load status
1ea4 : 28              >            plp
                        
1ea5 : ad1802                   lda abs1  
1ea8 : 08                       php         ;test stores do not alter flags
1ea9 : 49c3                     eor #$c3
1eab : 28                       plp
1eac : 8502                     sta zpt  
1eae : 08                       php         ;flags after load/store sequence
1eaf : 49c3                     eor #$c3
1eb1 : c50b                     cmp zp1     ;test result
                                trap_ne
1eb3 : f003            >        beq skip1453
                       >        trap            ;failed not equal (non zero)
1eb5 : 206144          >        jsr sp4_trap_fail 
                       >
1eb8 :                 >skip1453
                        
1eb8 : 68                       pla         ;load status
                                eor_flag 0
1eb9 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1ebb : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1ebe : f003            >        beq skip1456
                       >        trap            ;failed not equal (non zero)
1ec0 : 206144          >        jsr sp4_trap_fail 
                       >
1ec3 :                 >skip1456
                        
                                set_stat 0
                       >            load_flag 0
1ec3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1ec5 : 48              >            pha         ;use stack to load status
1ec6 : 28              >            plp
                        
1ec7 : ad1902                   lda abs1+1
1eca : 08                       php         ;test stores do not alter flags
1ecb : 49c3                     eor #$c3
1ecd : 28                       plp
1ece : 8503                     sta zpt+1
1ed0 : 08                       php         ;flags after load/store sequence
1ed1 : 49c3                     eor #$c3
1ed3 : c50c                     cmp zp1+1   ;test result
                                trap_ne
1ed5 : f003            >        beq skip1460
                       >        trap            ;failed not equal (non zero)
1ed7 : 206144          >        jsr sp4_trap_fail 
                       >
1eda :                 >skip1460
                        
1eda : 68                       pla         ;load status
                                eor_flag 0
1edb : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1edd : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1ee0 : f003            >        beq skip1463
                       >        trap            ;failed not equal (non zero)
1ee2 : 206144          >        jsr sp4_trap_fail 
                       >
1ee5 :                 >skip1463
                        
                                set_stat 0
                       >            load_flag 0
1ee5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1ee7 : 48              >            pha         ;use stack to load status
1ee8 : 28              >            plp
                        
1ee9 : ad1a02                   lda abs1+2
1eec : 08                       php         ;test stores do not alter flags
1eed : 49c3                     eor #$c3
1eef : 28                       plp
1ef0 : 8504                     sta zpt+2
1ef2 : 08                       php         ;flags after load/store sequence
1ef3 : 49c3                     eor #$c3
1ef5 : c50d                     cmp zp1+2   ;test result
                                trap_ne
1ef7 : f003            >        beq skip1467
                       >        trap            ;failed not equal (non zero)
1ef9 : 206144          >        jsr sp4_trap_fail 
                       >
1efc :                 >skip1467
                        
1efc : 68                       pla         ;load status
                                eor_flag 0
1efd : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1eff : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1f02 : f003            >        beq skip1470
                       >        trap            ;failed not equal (non zero)
1f04 : 206144          >        jsr sp4_trap_fail 
                       >
1f07 :                 >skip1470
                        
                                set_stat 0
                       >            load_flag 0
1f07 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1f09 : 48              >            pha         ;use stack to load status
1f0a : 28              >            plp
                        
1f0b : ad1b02                   lda abs1+3
1f0e : 08                       php         ;test stores do not alter flags
1f0f : 49c3                     eor #$c3
1f11 : 28                       plp
1f12 : 8505                     sta zpt+3
1f14 : 08                       php         ;flags after load/store sequence
1f15 : 49c3                     eor #$c3
1f17 : c50e                     cmp zp1+3   ;test result
                                trap_ne
1f19 : f003            >        beq skip1474
                       >        trap            ;failed not equal (non zero)
1f1b : 206144          >        jsr sp4_trap_fail 
                       >
1f1e :                 >skip1474
                        
1f1e : 68                       pla         ;load status
                                eor_flag 0
1f1f : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1f21 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1f24 : f003            >        beq skip1477
                       >        trap            ;failed not equal (non zero)
1f26 : 206144          >        jsr sp4_trap_fail 
                       >
1f29 :                 >skip1477
                        
                                set_stat $ff
                       >            load_flag $ff
1f29 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1f2b : 48              >            pha         ;use stack to load status
1f2c : 28              >            plp
                        
1f2d : ad1802                   lda abs1  
1f30 : 08                       php         ;test stores do not alter flags
1f31 : 49c3                     eor #$c3
1f33 : 28                       plp
1f34 : 8502                     sta zpt  
1f36 : 08                       php         ;flags after load/store sequence
1f37 : 49c3                     eor #$c3
1f39 : c50b                     cmp zp1     ;test result
                                trap_ne
1f3b : f003            >        beq skip1481
                       >        trap            ;failed not equal (non zero)
1f3d : 206144          >        jsr sp4_trap_fail 
                       >
1f40 :                 >skip1481
                        
1f40 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1f41 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1f43 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1f46 : f003            >        beq skip1484
                       >        trap            ;failed not equal (non zero)
1f48 : 206144          >        jsr sp4_trap_fail 
                       >
1f4b :                 >skip1484
                        
                                set_stat $ff
                       >            load_flag $ff
1f4b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1f4d : 48              >            pha         ;use stack to load status
1f4e : 28              >            plp
                        
1f4f : ad1902                   lda abs1+1
1f52 : 08                       php         ;test stores do not alter flags
1f53 : 49c3                     eor #$c3
1f55 : 28                       plp
1f56 : 8503                     sta zpt+1
1f58 : 08                       php         ;flags after load/store sequence
1f59 : 49c3                     eor #$c3
1f5b : c50c                     cmp zp1+1   ;test result
                                trap_ne
1f5d : f003            >        beq skip1488
                       >        trap            ;failed not equal (non zero)
1f5f : 206144          >        jsr sp4_trap_fail 
                       >
1f62 :                 >skip1488
                        
1f62 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1f63 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1f65 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1f68 : f003            >        beq skip1491
                       >        trap            ;failed not equal (non zero)
1f6a : 206144          >        jsr sp4_trap_fail 
                       >
1f6d :                 >skip1491
                        
                                set_stat $ff
                       >            load_flag $ff
1f6d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1f6f : 48              >            pha         ;use stack to load status
1f70 : 28              >            plp
                        
1f71 : ad1a02                   lda abs1+2
1f74 : 08                       php         ;test stores do not alter flags
1f75 : 49c3                     eor #$c3
1f77 : 28                       plp
1f78 : 8504                     sta zpt+2
1f7a : 08                       php         ;flags after load/store sequence
1f7b : 49c3                     eor #$c3
1f7d : c50d                     cmp zp1+2   ;test result
                                trap_ne
1f7f : f003            >        beq skip1495
                       >        trap            ;failed not equal (non zero)
1f81 : 206144          >        jsr sp4_trap_fail 
                       >
1f84 :                 >skip1495
                        
1f84 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1f85 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1f87 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1f8a : f003            >        beq skip1498
                       >        trap            ;failed not equal (non zero)
1f8c : 206144          >        jsr sp4_trap_fail 
                       >
1f8f :                 >skip1498
                        
                                set_stat $ff
                       >            load_flag $ff
1f8f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1f91 : 48              >            pha         ;use stack to load status
1f92 : 28              >            plp
                        
1f93 : ad1b02                   lda abs1+3
1f96 : 08                       php         ;test stores do not alter flags
1f97 : 49c3                     eor #$c3
1f99 : 28                       plp
1f9a : 8505                     sta zpt+3
1f9c : 08                       php         ;flags after load/store sequence
1f9d : 49c3                     eor #$c3
1f9f : c50e                     cmp zp1+3   ;test result
                                trap_ne
1fa1 : f003            >        beq skip1502
                       >        trap            ;failed not equal (non zero)
1fa3 : 206144          >        jsr sp4_trap_fail 
                       >
1fa6 :                 >skip1502
                        
1fa6 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1fa7 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1fa9 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1fac : f003            >        beq skip1505
                       >        trap            ;failed not equal (non zero)
1fae : 206144          >        jsr sp4_trap_fail 
                       >
1fb1 :                 >skip1505
                        
                                set_stat 0  
                       >            load_flag 0  
1fb1 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
1fb3 : 48              >            pha         ;use stack to load status
1fb4 : 28              >            plp
                        
1fb5 : a9c3                     lda #$c3
1fb7 : 08                       php
1fb8 : cd1802                   cmp abs1    ;test result
                                trap_ne
1fbb : f003            >        beq skip1509
                       >        trap            ;failed not equal (non zero)
1fbd : 206144          >        jsr sp4_trap_fail 
                       >
1fc0 :                 >skip1509
                        
1fc0 : 68                       pla         ;load status
                                eor_flag 0
1fc1 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1fc3 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1fc6 : f003            >        beq skip1512
                       >        trap            ;failed not equal (non zero)
1fc8 : 206144          >        jsr sp4_trap_fail 
                       >
1fcb :                 >skip1512
                        
                                set_stat 0
                       >            load_flag 0
1fcb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1fcd : 48              >            pha         ;use stack to load status
1fce : 28              >            plp
                        
1fcf : a982                     lda #$82
1fd1 : 08                       php
1fd2 : cd1902                   cmp abs1+1  ;test result
                                trap_ne
1fd5 : f003            >        beq skip1516
                       >        trap            ;failed not equal (non zero)
1fd7 : 206144          >        jsr sp4_trap_fail 
                       >
1fda :                 >skip1516
                        
1fda : 68                       pla         ;load status
                                eor_flag 0
1fdb : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1fdd : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1fe0 : f003            >        beq skip1519
                       >        trap            ;failed not equal (non zero)
1fe2 : 206144          >        jsr sp4_trap_fail 
                       >
1fe5 :                 >skip1519
                        
                                set_stat 0
                       >            load_flag 0
1fe5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1fe7 : 48              >            pha         ;use stack to load status
1fe8 : 28              >            plp
                        
1fe9 : a941                     lda #$41
1feb : 08                       php
1fec : cd1a02                   cmp abs1+2  ;test result
                                trap_ne
1fef : f003            >        beq skip1523
                       >        trap            ;failed not equal (non zero)
1ff1 : 206144          >        jsr sp4_trap_fail 
                       >
1ff4 :                 >skip1523
                        
1ff4 : 68                       pla         ;load status
                                eor_flag 0
1ff5 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1ff7 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1ffa : f003            >        beq skip1526
                       >        trap            ;failed not equal (non zero)
1ffc : 206144          >        jsr sp4_trap_fail 
                       >
1fff :                 >skip1526
                        
                                set_stat 0
                       >            load_flag 0
1fff : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2001 : 48              >            pha         ;use stack to load status
2002 : 28              >            plp
                        
2003 : a900                     lda #0
2005 : 08                       php
2006 : cd1b02                   cmp abs1+3  ;test result
                                trap_ne
2009 : f003            >        beq skip1530
                       >        trap            ;failed not equal (non zero)
200b : 206144          >        jsr sp4_trap_fail 
                       >
200e :                 >skip1530
                        
200e : 68                       pla         ;load status
                                eor_flag 0
200f : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2011 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
2014 : f003            >        beq skip1533
                       >        trap            ;failed not equal (non zero)
2016 : 206144          >        jsr sp4_trap_fail 
                       >
2019 :                 >skip1533
                        
                        
                                set_stat $ff
                       >            load_flag $ff
2019 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
201b : 48              >            pha         ;use stack to load status
201c : 28              >            plp
                        
201d : a9c3                     lda #$c3  
201f : 08                       php
2020 : cd1802                   cmp abs1    ;test result
                                trap_ne
2023 : f003            >        beq skip1537
                       >        trap            ;failed not equal (non zero)
2025 : 206144          >        jsr sp4_trap_fail 
                       >
2028 :                 >skip1537
                        
2028 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
2029 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
202b : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
202e : f003            >        beq skip1540
                       >        trap            ;failed not equal (non zero)
2030 : 206144          >        jsr sp4_trap_fail 
                       >
2033 :                 >skip1540
                        
                                set_stat $ff
                       >            load_flag $ff
2033 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2035 : 48              >            pha         ;use stack to load status
2036 : 28              >            plp
                        
2037 : a982                     lda #$82
2039 : 08                       php
203a : cd1902                   cmp abs1+1  ;test result
                                trap_ne
203d : f003            >        beq skip1544
                       >        trap            ;failed not equal (non zero)
203f : 206144          >        jsr sp4_trap_fail 
                       >
2042 :                 >skip1544
                        
2042 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
2043 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
2045 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
2048 : f003            >        beq skip1547
                       >        trap            ;failed not equal (non zero)
204a : 206144          >        jsr sp4_trap_fail 
                       >
204d :                 >skip1547
                        
                                set_stat $ff
                       >            load_flag $ff
204d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
204f : 48              >            pha         ;use stack to load status
2050 : 28              >            plp
                        
2051 : a941                     lda #$41
2053 : 08                       php
2054 : cd1a02                   cmp abs1+2  ;test result
                                trap_ne
2057 : f003            >        beq skip1551
                       >        trap            ;failed not equal (non zero)
2059 : 206144          >        jsr sp4_trap_fail 
                       >
205c :                 >skip1551
                        
205c : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
205d : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
205f : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
2062 : f003            >        beq skip1554
                       >        trap            ;failed not equal (non zero)
2064 : 206144          >        jsr sp4_trap_fail 
                       >
2067 :                 >skip1554
                        
                                set_stat $ff
                       >            load_flag $ff
2067 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2069 : 48              >            pha         ;use stack to load status
206a : 28              >            plp
                        
206b : a900                     lda #0
206d : 08                       php
206e : cd1b02                   cmp abs1+3  ;test result
                                trap_ne
2071 : f003            >        beq skip1558
                       >        trap            ;failed not equal (non zero)
2073 : 206144          >        jsr sp4_trap_fail 
                       >
2076 :                 >skip1558
                        
2076 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
2077 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
2079 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
207c : f003            >        beq skip1561
                       >        trap            ;failed not equal (non zero)
207e : 206144          >        jsr sp4_trap_fail 
                       >
2081 :                 >skip1561
                        
                        
2081 : a200                     ldx #0
2083 : a502                     lda zpt  
2085 : 49c3                     eor #$c3
2087 : c50b                     cmp zp1  
                                trap_ne     ;store to zp data
2089 : f003            >        beq skip1563
                       >        trap            ;failed not equal (non zero)
208b : 206144          >        jsr sp4_trap_fail 
                       >
208e :                 >skip1563
                        
208e : 8602                     stx zpt     ;clear                
2090 : ad0302                   lda abst  
2093 : 49c3                     eor #$c3
2095 : cd1802                   cmp abs1  
                                trap_ne     ;store to abs data
2098 : f003            >        beq skip1565
                       >        trap            ;failed not equal (non zero)
209a : 206144          >        jsr sp4_trap_fail 
                       >
209d :                 >skip1565
                        
209d : 8e0302                   stx abst    ;clear                
20a0 : a503                     lda zpt+1
20a2 : 49c3                     eor #$c3
20a4 : c50c                     cmp zp1+1
                                trap_ne     ;store to zp data
20a6 : f003            >        beq skip1567
                       >        trap            ;failed not equal (non zero)
20a8 : 206144          >        jsr sp4_trap_fail 
                       >
20ab :                 >skip1567
                        
20ab : 8603                     stx zpt+1   ;clear                
20ad : ad0402                   lda abst+1
20b0 : 49c3                     eor #$c3
20b2 : cd1902                   cmp abs1+1
                                trap_ne     ;store to abs data
20b5 : f003            >        beq skip1569
                       >        trap            ;failed not equal (non zero)
20b7 : 206144          >        jsr sp4_trap_fail 
                       >
20ba :                 >skip1569
                        
20ba : 8e0402                   stx abst+1  ;clear                
20bd : a504                     lda zpt+2
20bf : 49c3                     eor #$c3
20c1 : c50d                     cmp zp1+2
                                trap_ne     ;store to zp data
20c3 : f003            >        beq skip1571
                       >        trap            ;failed not equal (non zero)
20c5 : 206144          >        jsr sp4_trap_fail 
                       >
20c8 :                 >skip1571
                        
20c8 : 8604                     stx zpt+2   ;clear                
20ca : ad0502                   lda abst+2
20cd : 49c3                     eor #$c3
20cf : cd1a02                   cmp abs1+2
                                trap_ne     ;store to abs data
20d2 : f003            >        beq skip1573
                       >        trap            ;failed not equal (non zero)
20d4 : 206144          >        jsr sp4_trap_fail 
                       >
20d7 :                 >skip1573
                        
20d7 : 8e0502                   stx abst+2  ;clear                
20da : a505                     lda zpt+3
20dc : 49c3                     eor #$c3
20de : c50e                     cmp zp1+3
                                trap_ne     ;store to zp data
20e0 : f003            >        beq skip1575
                       >        trap            ;failed not equal (non zero)
20e2 : 206144          >        jsr sp4_trap_fail 
                       >
20e5 :                 >skip1575
                        
20e5 : 8605                     stx zpt+3   ;clear                
20e7 : ad0602                   lda abst+3
20ea : 49c3                     eor #$c3
20ec : cd1b02                   cmp abs1+3
                                trap_ne     ;store to abs data
20ef : f003            >        beq skip1577
                       >        trap            ;failed not equal (non zero)
20f1 : 206144          >        jsr sp4_trap_fail 
                       >
20f4 :                 >skip1577
                        
20f4 : 8e0602                   stx abst+3  ;clear                
                                next_test
20f7 : ad0002          >            lda test_case   ;previous test
20fa : c918            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
20fc : f003            >        beq skip1580
                       >        trap            ;failed not equal (non zero)
20fe : 206144          >        jsr sp4_trap_fail 
                       >
2101 :                 >skip1580
                       >
0019 =                 >test_num = test_num + 1
2101 : a919            >            lda #test_num   ;*** next tests' number
2103 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing bit test & compares BIT CPX CPY CMP all addressing modes
                        ; BIT - zp / abs
                                set_a $ff,0
                       >            load_flag 0
2106 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2108 : 48              >            pha         ;use stack to load status
2109 : a9ff            >            lda #$ff     ;precharge accu
210b : 28              >            plp
                        
210c : 240e                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,fz 
210e : 08              >            php         ;save flags
210f : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
2111 : f003            >        beq skip1585
                       >        trap            ;failed not equal (non zero)
2113 : 206144          >        jsr sp4_trap_fail 
                       >
2116 :                 >skip1585
                       >
2116 : 68              >            pla         ;load status
2117 : 48              >            pha
                       >            cmp_flag fz 
2118 : c932            >            cmp #(fz |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
211a : f003            >        beq skip1588
                       >        trap            ;failed not equal (non zero)
211c : 206144          >        jsr sp4_trap_fail 
                       >
211f :                 >skip1588
                       >
211f : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
2120 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2122 : 48              >            pha         ;use stack to load status
2123 : a901            >            lda #1     ;precharge accu
2125 : 28              >            plp
                        
2126 : 240d                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
2128 : 08              >            php         ;save flags
2129 : c901            >            cmp #1     ;test result
                       >            trap_ne
212b : f003            >        beq skip1593
                       >        trap            ;failed not equal (non zero)
212d : 206144          >        jsr sp4_trap_fail 
                       >
2130 :                 >skip1593
                       >
2130 : 68              >            pla         ;load status
2131 : 48              >            pha
                       >            cmp_flag fv
2132 : c970            >            cmp #(fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2134 : f003            >        beq skip1596
                       >        trap            ;failed not equal (non zero)
2136 : 206144          >        jsr sp4_trap_fail 
                       >
2139 :                 >skip1596
                       >
2139 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
213a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
213c : 48              >            pha         ;use stack to load status
213d : a901            >            lda #1     ;precharge accu
213f : 28              >            plp
                        
2140 : 240c                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
2142 : 08              >            php         ;save flags
2143 : c901            >            cmp #1     ;test result
                       >            trap_ne
2145 : f003            >        beq skip1601
                       >        trap            ;failed not equal (non zero)
2147 : 206144          >        jsr sp4_trap_fail 
                       >
214a :                 >skip1601
                       >
214a : 68              >            pla         ;load status
214b : 48              >            pha
                       >            cmp_flag fnz
214c : c9b2            >            cmp #(fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
214e : f003            >        beq skip1604
                       >        trap            ;failed not equal (non zero)
2150 : 206144          >        jsr sp4_trap_fail 
                       >
2153 :                 >skip1604
                       >
2153 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
2154 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2156 : 48              >            pha         ;use stack to load status
2157 : a901            >            lda #1     ;precharge accu
2159 : 28              >            plp
                        
215a : 240b                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
215c : 08              >            php         ;save flags
215d : c901            >            cmp #1     ;test result
                       >            trap_ne
215f : f003            >        beq skip1609
                       >        trap            ;failed not equal (non zero)
2161 : 206144          >        jsr sp4_trap_fail 
                       >
2164 :                 >skip1609
                       >
2164 : 68              >            pla         ;load status
2165 : 48              >            pha
                       >            cmp_flag fnv
2166 : c9f0            >            cmp #(fnv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2168 : f003            >        beq skip1612
                       >        trap            ;failed not equal (non zero)
216a : 206144          >        jsr sp4_trap_fail 
                       >
216d :                 >skip1612
                       >
216d : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,$ff
                       >            load_flag $ff
216e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2170 : 48              >            pha         ;use stack to load status
2171 : a9ff            >            lda #$ff     ;precharge accu
2173 : 28              >            plp
                        
2174 : 240e                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv 
2176 : 08              >            php         ;save flags
2177 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
2179 : f003            >        beq skip1617
                       >        trap            ;failed not equal (non zero)
217b : 206144          >        jsr sp4_trap_fail 
                       >
217e :                 >skip1617
                       >
217e : 68              >            pla         ;load status
217f : 48              >            pha
                       >            cmp_flag ~fnv 
2180 : c93f            >            cmp #(~fnv |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2182 : f003            >        beq skip1620
                       >        trap            ;failed not equal (non zero)
2184 : 206144          >        jsr sp4_trap_fail 
                       >
2187 :                 >skip1620
                       >
2187 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
2188 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
218a : 48              >            pha         ;use stack to load status
218b : a901            >            lda #1     ;precharge accu
218d : 28              >            plp
                        
218e : 240d                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
2190 : 08              >            php         ;save flags
2191 : c901            >            cmp #1     ;test result
                       >            trap_ne
2193 : f003            >        beq skip1625
                       >        trap            ;failed not equal (non zero)
2195 : 206144          >        jsr sp4_trap_fail 
                       >
2198 :                 >skip1625
                       >
2198 : 68              >            pla         ;load status
2199 : 48              >            pha
                       >            cmp_flag ~fnz
219a : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
219c : f003            >        beq skip1628
                       >        trap            ;failed not equal (non zero)
219e : 206144          >        jsr sp4_trap_fail 
                       >
21a1 :                 >skip1628
                       >
21a1 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
21a2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
21a4 : 48              >            pha         ;use stack to load status
21a5 : a901            >            lda #1     ;precharge accu
21a7 : 28              >            plp
                        
21a8 : 240c                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
21aa : 08              >            php         ;save flags
21ab : c901            >            cmp #1     ;test result
                       >            trap_ne
21ad : f003            >        beq skip1633
                       >        trap            ;failed not equal (non zero)
21af : 206144          >        jsr sp4_trap_fail 
                       >
21b2 :                 >skip1633
                       >
21b2 : 68              >            pla         ;load status
21b3 : 48              >            pha
                       >            cmp_flag ~fv
21b4 : c9bf            >            cmp #(~fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
21b6 : f003            >        beq skip1636
                       >        trap            ;failed not equal (non zero)
21b8 : 206144          >        jsr sp4_trap_fail 
                       >
21bb :                 >skip1636
                       >
21bb : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
21bc : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
21be : 48              >            pha         ;use stack to load status
21bf : a901            >            lda #1     ;precharge accu
21c1 : 28              >            plp
                        
21c2 : 240b                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
21c4 : 08              >            php         ;save flags
21c5 : c901            >            cmp #1     ;test result
                       >            trap_ne
21c7 : f003            >        beq skip1641
                       >        trap            ;failed not equal (non zero)
21c9 : 206144          >        jsr sp4_trap_fail 
                       >
21cc :                 >skip1641
                       >
21cc : 68              >            pla         ;load status
21cd : 48              >            pha
                       >            cmp_flag ~fz
21ce : c9fd            >            cmp #(~fz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
21d0 : f003            >        beq skip1644
                       >        trap            ;failed not equal (non zero)
21d2 : 206144          >        jsr sp4_trap_fail 
                       >
21d5 :                 >skip1644
                       >
21d5 : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,0
                       >            load_flag 0
21d6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
21d8 : 48              >            pha         ;use stack to load status
21d9 : a9ff            >            lda #$ff     ;precharge accu
21db : 28              >            plp
                        
21dc : 2c1b02                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,fz 
21df : 08              >            php         ;save flags
21e0 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
21e2 : f003            >        beq skip1649
                       >        trap            ;failed not equal (non zero)
21e4 : 206144          >        jsr sp4_trap_fail 
                       >
21e7 :                 >skip1649
                       >
21e7 : 68              >            pla         ;load status
21e8 : 48              >            pha
                       >            cmp_flag fz 
21e9 : c932            >            cmp #(fz |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
21eb : f003            >        beq skip1652
                       >        trap            ;failed not equal (non zero)
21ed : 206144          >        jsr sp4_trap_fail 
                       >
21f0 :                 >skip1652
                       >
21f0 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
21f1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
21f3 : 48              >            pha         ;use stack to load status
21f4 : a901            >            lda #1     ;precharge accu
21f6 : 28              >            plp
                        
21f7 : 2c1a02                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
21fa : 08              >            php         ;save flags
21fb : c901            >            cmp #1     ;test result
                       >            trap_ne
21fd : f003            >        beq skip1657
                       >        trap            ;failed not equal (non zero)
21ff : 206144          >        jsr sp4_trap_fail 
                       >
2202 :                 >skip1657
                       >
2202 : 68              >            pla         ;load status
2203 : 48              >            pha
                       >            cmp_flag fv
2204 : c970            >            cmp #(fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2206 : f003            >        beq skip1660
                       >        trap            ;failed not equal (non zero)
2208 : 206144          >        jsr sp4_trap_fail 
                       >
220b :                 >skip1660
                       >
220b : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
220c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
220e : 48              >            pha         ;use stack to load status
220f : a901            >            lda #1     ;precharge accu
2211 : 28              >            plp
                        
2212 : 2c1902                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
2215 : 08              >            php         ;save flags
2216 : c901            >            cmp #1     ;test result
                       >            trap_ne
2218 : f003            >        beq skip1665
                       >        trap            ;failed not equal (non zero)
221a : 206144          >        jsr sp4_trap_fail 
                       >
221d :                 >skip1665
                       >
221d : 68              >            pla         ;load status
221e : 48              >            pha
                       >            cmp_flag fnz
221f : c9b2            >            cmp #(fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2221 : f003            >        beq skip1668
                       >        trap            ;failed not equal (non zero)
2223 : 206144          >        jsr sp4_trap_fail 
                       >
2226 :                 >skip1668
                       >
2226 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
2227 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2229 : 48              >            pha         ;use stack to load status
222a : a901            >            lda #1     ;precharge accu
222c : 28              >            plp
                        
222d : 2c1802                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
2230 : 08              >            php         ;save flags
2231 : c901            >            cmp #1     ;test result
                       >            trap_ne
2233 : f003            >        beq skip1673
                       >        trap            ;failed not equal (non zero)
2235 : 206144          >        jsr sp4_trap_fail 
                       >
2238 :                 >skip1673
                       >
2238 : 68              >            pla         ;load status
2239 : 48              >            pha
                       >            cmp_flag fnv
223a : c9f0            >            cmp #(fnv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
223c : f003            >        beq skip1676
                       >        trap            ;failed not equal (non zero)
223e : 206144          >        jsr sp4_trap_fail 
                       >
2241 :                 >skip1676
                       >
2241 : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,$ff
                       >            load_flag $ff
2242 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2244 : 48              >            pha         ;use stack to load status
2245 : a9ff            >            lda #$ff     ;precharge accu
2247 : 28              >            plp
                        
2248 : 2c1b02                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv 
224b : 08              >            php         ;save flags
224c : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
224e : f003            >        beq skip1681
                       >        trap            ;failed not equal (non zero)
2250 : 206144          >        jsr sp4_trap_fail 
                       >
2253 :                 >skip1681
                       >
2253 : 68              >            pla         ;load status
2254 : 48              >            pha
                       >            cmp_flag ~fnv 
2255 : c93f            >            cmp #(~fnv |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2257 : f003            >        beq skip1684
                       >        trap            ;failed not equal (non zero)
2259 : 206144          >        jsr sp4_trap_fail 
                       >
225c :                 >skip1684
                       >
225c : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
225d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
225f : 48              >            pha         ;use stack to load status
2260 : a901            >            lda #1     ;precharge accu
2262 : 28              >            plp
                        
2263 : 2c1a02                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
2266 : 08              >            php         ;save flags
2267 : c901            >            cmp #1     ;test result
                       >            trap_ne
2269 : f003            >        beq skip1689
                       >        trap            ;failed not equal (non zero)
226b : 206144          >        jsr sp4_trap_fail 
                       >
226e :                 >skip1689
                       >
226e : 68              >            pla         ;load status
226f : 48              >            pha
                       >            cmp_flag ~fnz
2270 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2272 : f003            >        beq skip1692
                       >        trap            ;failed not equal (non zero)
2274 : 206144          >        jsr sp4_trap_fail 
                       >
2277 :                 >skip1692
                       >
2277 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
2278 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
227a : 48              >            pha         ;use stack to load status
227b : a901            >            lda #1     ;precharge accu
227d : 28              >            plp
                        
227e : 2c1902                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
2281 : 08              >            php         ;save flags
2282 : c901            >            cmp #1     ;test result
                       >            trap_ne
2284 : f003            >        beq skip1697
                       >        trap            ;failed not equal (non zero)
2286 : 206144          >        jsr sp4_trap_fail 
                       >
2289 :                 >skip1697
                       >
2289 : 68              >            pla         ;load status
228a : 48              >            pha
                       >            cmp_flag ~fv
228b : c9bf            >            cmp #(~fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
228d : f003            >        beq skip1700
                       >        trap            ;failed not equal (non zero)
228f : 206144          >        jsr sp4_trap_fail 
                       >
2292 :                 >skip1700
                       >
2292 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
2293 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2295 : 48              >            pha         ;use stack to load status
2296 : a901            >            lda #1     ;precharge accu
2298 : 28              >            plp
                        
2299 : 2c1802                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
229c : 08              >            php         ;save flags
229d : c901            >            cmp #1     ;test result
                       >            trap_ne
229f : f003            >        beq skip1705
                       >        trap            ;failed not equal (non zero)
22a1 : 206144          >        jsr sp4_trap_fail 
                       >
22a4 :                 >skip1705
                       >
22a4 : 68              >            pla         ;load status
22a5 : 48              >            pha
                       >            cmp_flag ~fz
22a6 : c9fd            >            cmp #(~fz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
22a8 : f003            >        beq skip1708
                       >        trap            ;failed not equal (non zero)
22aa : 206144          >        jsr sp4_trap_fail 
                       >
22ad :                 >skip1708
                       >
22ad : 28              >            plp         ;restore status
                        
                                next_test
22ae : ad0002          >            lda test_case   ;previous test
22b1 : c919            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
22b3 : f003            >        beq skip1711
                       >        trap            ;failed not equal (non zero)
22b5 : 206144          >        jsr sp4_trap_fail 
                       >
22b8 :                 >skip1711
                       >
001a =                 >test_num = test_num + 1
22b8 : a91a            >            lda #test_num   ;*** next tests' number
22ba : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; CPX - zp / abs / #         
                                set_x $80,0
                       >            load_flag 0
22bd : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
22bf : 48              >            pha         ;use stack to load status
22c0 : a280            >            ldx #$80     ;precharge index x
22c2 : 28              >            plp
                        
22c3 : e40f                     cpx zp7f
                                tst_stat fc
22c5 : 08              >            php         ;save status
22c6 : 68              >            pla         ;use stack to retrieve status
22c7 : 48              >            pha
                       >            cmp_flag fc
22c8 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
22ca : f003            >        beq skip1717
                       >        trap            ;failed not equal (non zero)
22cc : 206144          >        jsr sp4_trap_fail 
                       >
22cf :                 >skip1717
                       >
22cf : 28              >            plp         ;restore status
                        
22d0 : ca                       dex
22d1 : e40f                     cpx zp7f
                                tst_stat fzc
22d3 : 08              >            php         ;save status
22d4 : 68              >            pla         ;use stack to retrieve status
22d5 : 48              >            pha
                       >            cmp_flag fzc
22d6 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
22d8 : f003            >        beq skip1721
                       >        trap            ;failed not equal (non zero)
22da : 206144          >        jsr sp4_trap_fail 
                       >
22dd :                 >skip1721
                       >
22dd : 28              >            plp         ;restore status
                        
22de : ca                       dex
22df : e40f                     cpx zp7f
                                tst_x $7e,fn
22e1 : 08              >            php         ;save flags
22e2 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
22e4 : f003            >        beq skip1724
                       >        trap            ;failed not equal (non zero)
22e6 : 206144          >        jsr sp4_trap_fail 
                       >
22e9 :                 >skip1724
                       >
22e9 : 68              >            pla         ;load status
22ea : 48              >            pha
                       >            cmp_flag fn
22eb : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
22ed : f003            >        beq skip1727
                       >        trap            ;failed not equal (non zero)
22ef : 206144          >        jsr sp4_trap_fail 
                       >
22f2 :                 >skip1727
                       >
22f2 : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
22f3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
22f5 : 48              >            pha         ;use stack to load status
22f6 : a280            >            ldx #$80     ;precharge index x
22f8 : 28              >            plp
                        
22f9 : e40f                     cpx zp7f
                                tst_stat ~fnz
22fb : 08              >            php         ;save status
22fc : 68              >            pla         ;use stack to retrieve status
22fd : 48              >            pha
                       >            cmp_flag ~fnz
22fe : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2300 : f003            >        beq skip1733
                       >        trap            ;failed not equal (non zero)
2302 : 206144          >        jsr sp4_trap_fail 
                       >
2305 :                 >skip1733
                       >
2305 : 28              >            plp         ;restore status
                        
2306 : ca                       dex
2307 : e40f                     cpx zp7f
                                tst_stat ~fn
2309 : 08              >            php         ;save status
230a : 68              >            pla         ;use stack to retrieve status
230b : 48              >            pha
                       >            cmp_flag ~fn
230c : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
230e : f003            >        beq skip1737
                       >        trap            ;failed not equal (non zero)
2310 : 206144          >        jsr sp4_trap_fail 
                       >
2313 :                 >skip1737
                       >
2313 : 28              >            plp         ;restore status
                        
2314 : ca                       dex
2315 : e40f                     cpx zp7f
                                tst_x $7e,~fzc
2317 : 08              >            php         ;save flags
2318 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
231a : f003            >        beq skip1740
                       >        trap            ;failed not equal (non zero)
231c : 206144          >        jsr sp4_trap_fail 
                       >
231f :                 >skip1740
                       >
231f : 68              >            pla         ;load status
2320 : 48              >            pha
                       >            cmp_flag ~fzc
2321 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2323 : f003            >        beq skip1743
                       >        trap            ;failed not equal (non zero)
2325 : 206144          >        jsr sp4_trap_fail 
                       >
2328 :                 >skip1743
                       >
2328 : 28              >            plp         ;restore status
                        
                        
                                set_x $80,0
                       >            load_flag 0
2329 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
232b : 48              >            pha         ;use stack to load status
232c : a280            >            ldx #$80     ;precharge index x
232e : 28              >            plp
                        
232f : ec1c02                   cpx abs7f
                                tst_stat fc
2332 : 08              >            php         ;save status
2333 : 68              >            pla         ;use stack to retrieve status
2334 : 48              >            pha
                       >            cmp_flag fc
2335 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2337 : f003            >        beq skip1749
                       >        trap            ;failed not equal (non zero)
2339 : 206144          >        jsr sp4_trap_fail 
                       >
233c :                 >skip1749
                       >
233c : 28              >            plp         ;restore status
                        
233d : ca                       dex
233e : ec1c02                   cpx abs7f
                                tst_stat fzc
2341 : 08              >            php         ;save status
2342 : 68              >            pla         ;use stack to retrieve status
2343 : 48              >            pha
                       >            cmp_flag fzc
2344 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2346 : f003            >        beq skip1753
                       >        trap            ;failed not equal (non zero)
2348 : 206144          >        jsr sp4_trap_fail 
                       >
234b :                 >skip1753
                       >
234b : 28              >            plp         ;restore status
                        
234c : ca                       dex
234d : ec1c02                   cpx abs7f
                                tst_x $7e,fn
2350 : 08              >            php         ;save flags
2351 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
2353 : f003            >        beq skip1756
                       >        trap            ;failed not equal (non zero)
2355 : 206144          >        jsr sp4_trap_fail 
                       >
2358 :                 >skip1756
                       >
2358 : 68              >            pla         ;load status
2359 : 48              >            pha
                       >            cmp_flag fn
235a : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
235c : f003            >        beq skip1759
                       >        trap            ;failed not equal (non zero)
235e : 206144          >        jsr sp4_trap_fail 
                       >
2361 :                 >skip1759
                       >
2361 : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
2362 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2364 : 48              >            pha         ;use stack to load status
2365 : a280            >            ldx #$80     ;precharge index x
2367 : 28              >            plp
                        
2368 : ec1c02                   cpx abs7f
                                tst_stat ~fnz
236b : 08              >            php         ;save status
236c : 68              >            pla         ;use stack to retrieve status
236d : 48              >            pha
                       >            cmp_flag ~fnz
236e : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2370 : f003            >        beq skip1765
                       >        trap            ;failed not equal (non zero)
2372 : 206144          >        jsr sp4_trap_fail 
                       >
2375 :                 >skip1765
                       >
2375 : 28              >            plp         ;restore status
                        
2376 : ca                       dex
2377 : ec1c02                   cpx abs7f
                                tst_stat ~fn
237a : 08              >            php         ;save status
237b : 68              >            pla         ;use stack to retrieve status
237c : 48              >            pha
                       >            cmp_flag ~fn
237d : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
237f : f003            >        beq skip1769
                       >        trap            ;failed not equal (non zero)
2381 : 206144          >        jsr sp4_trap_fail 
                       >
2384 :                 >skip1769
                       >
2384 : 28              >            plp         ;restore status
                        
2385 : ca                       dex
2386 : ec1c02                   cpx abs7f
                                tst_x $7e,~fzc
2389 : 08              >            php         ;save flags
238a : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
238c : f003            >        beq skip1772
                       >        trap            ;failed not equal (non zero)
238e : 206144          >        jsr sp4_trap_fail 
                       >
2391 :                 >skip1772
                       >
2391 : 68              >            pla         ;load status
2392 : 48              >            pha
                       >            cmp_flag ~fzc
2393 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2395 : f003            >        beq skip1775
                       >        trap            ;failed not equal (non zero)
2397 : 206144          >        jsr sp4_trap_fail 
                       >
239a :                 >skip1775
                       >
239a : 28              >            plp         ;restore status
                        
                        
                                set_x $80,0
                       >            load_flag 0
239b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
239d : 48              >            pha         ;use stack to load status
239e : a280            >            ldx #$80     ;precharge index x
23a0 : 28              >            plp
                        
23a1 : e07f                     cpx #$7f
                                tst_stat fc
23a3 : 08              >            php         ;save status
23a4 : 68              >            pla         ;use stack to retrieve status
23a5 : 48              >            pha
                       >            cmp_flag fc
23a6 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
23a8 : f003            >        beq skip1781
                       >        trap            ;failed not equal (non zero)
23aa : 206144          >        jsr sp4_trap_fail 
                       >
23ad :                 >skip1781
                       >
23ad : 28              >            plp         ;restore status
                        
23ae : ca                       dex
23af : e07f                     cpx #$7f
                                tst_stat fzc
23b1 : 08              >            php         ;save status
23b2 : 68              >            pla         ;use stack to retrieve status
23b3 : 48              >            pha
                       >            cmp_flag fzc
23b4 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
23b6 : f003            >        beq skip1785
                       >        trap            ;failed not equal (non zero)
23b8 : 206144          >        jsr sp4_trap_fail 
                       >
23bb :                 >skip1785
                       >
23bb : 28              >            plp         ;restore status
                        
23bc : ca                       dex
23bd : e07f                     cpx #$7f
                                tst_x $7e,fn
23bf : 08              >            php         ;save flags
23c0 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
23c2 : f003            >        beq skip1788
                       >        trap            ;failed not equal (non zero)
23c4 : 206144          >        jsr sp4_trap_fail 
                       >
23c7 :                 >skip1788
                       >
23c7 : 68              >            pla         ;load status
23c8 : 48              >            pha
                       >            cmp_flag fn
23c9 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
23cb : f003            >        beq skip1791
                       >        trap            ;failed not equal (non zero)
23cd : 206144          >        jsr sp4_trap_fail 
                       >
23d0 :                 >skip1791
                       >
23d0 : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
23d1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
23d3 : 48              >            pha         ;use stack to load status
23d4 : a280            >            ldx #$80     ;precharge index x
23d6 : 28              >            plp
                        
23d7 : e07f                     cpx #$7f
                                tst_stat ~fnz
23d9 : 08              >            php         ;save status
23da : 68              >            pla         ;use stack to retrieve status
23db : 48              >            pha
                       >            cmp_flag ~fnz
23dc : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
23de : f003            >        beq skip1797
                       >        trap            ;failed not equal (non zero)
23e0 : 206144          >        jsr sp4_trap_fail 
                       >
23e3 :                 >skip1797
                       >
23e3 : 28              >            plp         ;restore status
                        
23e4 : ca                       dex
23e5 : e07f                     cpx #$7f
                                tst_stat ~fn
23e7 : 08              >            php         ;save status
23e8 : 68              >            pla         ;use stack to retrieve status
23e9 : 48              >            pha
                       >            cmp_flag ~fn
23ea : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
23ec : f003            >        beq skip1801
                       >        trap            ;failed not equal (non zero)
23ee : 206144          >        jsr sp4_trap_fail 
                       >
23f1 :                 >skip1801
                       >
23f1 : 28              >            plp         ;restore status
                        
23f2 : ca                       dex
23f3 : e07f                     cpx #$7f
                                tst_x $7e,~fzc
23f5 : 08              >            php         ;save flags
23f6 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
23f8 : f003            >        beq skip1804
                       >        trap            ;failed not equal (non zero)
23fa : 206144          >        jsr sp4_trap_fail 
                       >
23fd :                 >skip1804
                       >
23fd : 68              >            pla         ;load status
23fe : 48              >            pha
                       >            cmp_flag ~fzc
23ff : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2401 : f003            >        beq skip1807
                       >        trap            ;failed not equal (non zero)
2403 : 206144          >        jsr sp4_trap_fail 
                       >
2406 :                 >skip1807
                       >
2406 : 28              >            plp         ;restore status
                        
                                next_test
2407 : ad0002          >            lda test_case   ;previous test
240a : c91a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
240c : f003            >        beq skip1810
                       >        trap            ;failed not equal (non zero)
240e : 206144          >        jsr sp4_trap_fail 
                       >
2411 :                 >skip1810
                       >
001b =                 >test_num = test_num + 1
2411 : a91b            >            lda #test_num   ;*** next tests' number
2413 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; CPY - zp / abs / #         
                                set_y $80,0
                       >            load_flag 0
2416 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2418 : 48              >            pha         ;use stack to load status
2419 : a080            >            ldy #$80     ;precharge index y
241b : 28              >            plp
                        
241c : c40f                     cpy zp7f
                                tst_stat fc
241e : 08              >            php         ;save status
241f : 68              >            pla         ;use stack to retrieve status
2420 : 48              >            pha
                       >            cmp_flag fc
2421 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2423 : f003            >        beq skip1816
                       >        trap            ;failed not equal (non zero)
2425 : 206144          >        jsr sp4_trap_fail 
                       >
2428 :                 >skip1816
                       >
2428 : 28              >            plp         ;restore status
                        
2429 : 88                       dey
242a : c40f                     cpy zp7f
                                tst_stat fzc
242c : 08              >            php         ;save status
242d : 68              >            pla         ;use stack to retrieve status
242e : 48              >            pha
                       >            cmp_flag fzc
242f : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2431 : f003            >        beq skip1820
                       >        trap            ;failed not equal (non zero)
2433 : 206144          >        jsr sp4_trap_fail 
                       >
2436 :                 >skip1820
                       >
2436 : 28              >            plp         ;restore status
                        
2437 : 88                       dey
2438 : c40f                     cpy zp7f
                                tst_y $7e,fn
243a : 08              >            php         ;save flags
243b : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
243d : f003            >        beq skip1823
                       >        trap            ;failed not equal (non zero)
243f : 206144          >        jsr sp4_trap_fail 
                       >
2442 :                 >skip1823
                       >
2442 : 68              >            pla         ;load status
2443 : 48              >            pha
                       >            cmp_flag fn
2444 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2446 : f003            >        beq skip1826
                       >        trap            ;failed not equal (non zero)
2448 : 206144          >        jsr sp4_trap_fail 
                       >
244b :                 >skip1826
                       >
244b : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
244c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
244e : 48              >            pha         ;use stack to load status
244f : a080            >            ldy #$80     ;precharge index y
2451 : 28              >            plp
                        
2452 : c40f                     cpy zp7f
                                tst_stat ~fnz
2454 : 08              >            php         ;save status
2455 : 68              >            pla         ;use stack to retrieve status
2456 : 48              >            pha
                       >            cmp_flag ~fnz
2457 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2459 : f003            >        beq skip1832
                       >        trap            ;failed not equal (non zero)
245b : 206144          >        jsr sp4_trap_fail 
                       >
245e :                 >skip1832
                       >
245e : 28              >            plp         ;restore status
                        
245f : 88                       dey
2460 : c40f                     cpy zp7f
                                tst_stat ~fn
2462 : 08              >            php         ;save status
2463 : 68              >            pla         ;use stack to retrieve status
2464 : 48              >            pha
                       >            cmp_flag ~fn
2465 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2467 : f003            >        beq skip1836
                       >        trap            ;failed not equal (non zero)
2469 : 206144          >        jsr sp4_trap_fail 
                       >
246c :                 >skip1836
                       >
246c : 28              >            plp         ;restore status
                        
246d : 88                       dey
246e : c40f                     cpy zp7f
                                tst_y $7e,~fzc
2470 : 08              >            php         ;save flags
2471 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
2473 : f003            >        beq skip1839
                       >        trap            ;failed not equal (non zero)
2475 : 206144          >        jsr sp4_trap_fail 
                       >
2478 :                 >skip1839
                       >
2478 : 68              >            pla         ;load status
2479 : 48              >            pha
                       >            cmp_flag ~fzc
247a : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
247c : f003            >        beq skip1842
                       >        trap            ;failed not equal (non zero)
247e : 206144          >        jsr sp4_trap_fail 
                       >
2481 :                 >skip1842
                       >
2481 : 28              >            plp         ;restore status
                        
                        
                                set_y $80,0
                       >            load_flag 0
2482 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2484 : 48              >            pha         ;use stack to load status
2485 : a080            >            ldy #$80     ;precharge index y
2487 : 28              >            plp
                        
2488 : cc1c02                   cpy abs7f
                                tst_stat fc
248b : 08              >            php         ;save status
248c : 68              >            pla         ;use stack to retrieve status
248d : 48              >            pha
                       >            cmp_flag fc
248e : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2490 : f003            >        beq skip1848
                       >        trap            ;failed not equal (non zero)
2492 : 206144          >        jsr sp4_trap_fail 
                       >
2495 :                 >skip1848
                       >
2495 : 28              >            plp         ;restore status
                        
2496 : 88                       dey
2497 : cc1c02                   cpy abs7f
                                tst_stat fzc
249a : 08              >            php         ;save status
249b : 68              >            pla         ;use stack to retrieve status
249c : 48              >            pha
                       >            cmp_flag fzc
249d : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
249f : f003            >        beq skip1852
                       >        trap            ;failed not equal (non zero)
24a1 : 206144          >        jsr sp4_trap_fail 
                       >
24a4 :                 >skip1852
                       >
24a4 : 28              >            plp         ;restore status
                        
24a5 : 88                       dey
24a6 : cc1c02                   cpy abs7f
                                tst_y $7e,fn
24a9 : 08              >            php         ;save flags
24aa : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
24ac : f003            >        beq skip1855
                       >        trap            ;failed not equal (non zero)
24ae : 206144          >        jsr sp4_trap_fail 
                       >
24b1 :                 >skip1855
                       >
24b1 : 68              >            pla         ;load status
24b2 : 48              >            pha
                       >            cmp_flag fn
24b3 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
24b5 : f003            >        beq skip1858
                       >        trap            ;failed not equal (non zero)
24b7 : 206144          >        jsr sp4_trap_fail 
                       >
24ba :                 >skip1858
                       >
24ba : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
24bb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
24bd : 48              >            pha         ;use stack to load status
24be : a080            >            ldy #$80     ;precharge index y
24c0 : 28              >            plp
                        
24c1 : cc1c02                   cpy abs7f
                                tst_stat ~fnz
24c4 : 08              >            php         ;save status
24c5 : 68              >            pla         ;use stack to retrieve status
24c6 : 48              >            pha
                       >            cmp_flag ~fnz
24c7 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
24c9 : f003            >        beq skip1864
                       >        trap            ;failed not equal (non zero)
24cb : 206144          >        jsr sp4_trap_fail 
                       >
24ce :                 >skip1864
                       >
24ce : 28              >            plp         ;restore status
                        
24cf : 88                       dey
24d0 : cc1c02                   cpy abs7f
                                tst_stat ~fn
24d3 : 08              >            php         ;save status
24d4 : 68              >            pla         ;use stack to retrieve status
24d5 : 48              >            pha
                       >            cmp_flag ~fn
24d6 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
24d8 : f003            >        beq skip1868
                       >        trap            ;failed not equal (non zero)
24da : 206144          >        jsr sp4_trap_fail 
                       >
24dd :                 >skip1868
                       >
24dd : 28              >            plp         ;restore status
                        
24de : 88                       dey
24df : cc1c02                   cpy abs7f
                                tst_y $7e,~fzc
24e2 : 08              >            php         ;save flags
24e3 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
24e5 : f003            >        beq skip1871
                       >        trap            ;failed not equal (non zero)
24e7 : 206144          >        jsr sp4_trap_fail 
                       >
24ea :                 >skip1871
                       >
24ea : 68              >            pla         ;load status
24eb : 48              >            pha
                       >            cmp_flag ~fzc
24ec : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
24ee : f003            >        beq skip1874
                       >        trap            ;failed not equal (non zero)
24f0 : 206144          >        jsr sp4_trap_fail 
                       >
24f3 :                 >skip1874
                       >
24f3 : 28              >            plp         ;restore status
                        
                        
                                set_y $80,0
                       >            load_flag 0
24f4 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
24f6 : 48              >            pha         ;use stack to load status
24f7 : a080            >            ldy #$80     ;precharge index y
24f9 : 28              >            plp
                        
24fa : c07f                     cpy #$7f
                                tst_stat fc
24fc : 08              >            php         ;save status
24fd : 68              >            pla         ;use stack to retrieve status
24fe : 48              >            pha
                       >            cmp_flag fc
24ff : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2501 : f003            >        beq skip1880
                       >        trap            ;failed not equal (non zero)
2503 : 206144          >        jsr sp4_trap_fail 
                       >
2506 :                 >skip1880
                       >
2506 : 28              >            plp         ;restore status
                        
2507 : 88                       dey
2508 : c07f                     cpy #$7f
                                tst_stat fzc
250a : 08              >            php         ;save status
250b : 68              >            pla         ;use stack to retrieve status
250c : 48              >            pha
                       >            cmp_flag fzc
250d : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
250f : f003            >        beq skip1884
                       >        trap            ;failed not equal (non zero)
2511 : 206144          >        jsr sp4_trap_fail 
                       >
2514 :                 >skip1884
                       >
2514 : 28              >            plp         ;restore status
                        
2515 : 88                       dey
2516 : c07f                     cpy #$7f
                                tst_y $7e,fn
2518 : 08              >            php         ;save flags
2519 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
251b : f003            >        beq skip1887
                       >        trap            ;failed not equal (non zero)
251d : 206144          >        jsr sp4_trap_fail 
                       >
2520 :                 >skip1887
                       >
2520 : 68              >            pla         ;load status
2521 : 48              >            pha
                       >            cmp_flag fn
2522 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2524 : f003            >        beq skip1890
                       >        trap            ;failed not equal (non zero)
2526 : 206144          >        jsr sp4_trap_fail 
                       >
2529 :                 >skip1890
                       >
2529 : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
252a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
252c : 48              >            pha         ;use stack to load status
252d : a080            >            ldy #$80     ;precharge index y
252f : 28              >            plp
                        
2530 : c07f                     cpy #$7f
                                tst_stat ~fnz
2532 : 08              >            php         ;save status
2533 : 68              >            pla         ;use stack to retrieve status
2534 : 48              >            pha
                       >            cmp_flag ~fnz
2535 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2537 : f003            >        beq skip1896
                       >        trap            ;failed not equal (non zero)
2539 : 206144          >        jsr sp4_trap_fail 
                       >
253c :                 >skip1896
                       >
253c : 28              >            plp         ;restore status
                        
253d : 88                       dey
253e : c07f                     cpy #$7f
                                tst_stat ~fn
2540 : 08              >            php         ;save status
2541 : 68              >            pla         ;use stack to retrieve status
2542 : 48              >            pha
                       >            cmp_flag ~fn
2543 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2545 : f003            >        beq skip1900
                       >        trap            ;failed not equal (non zero)
2547 : 206144          >        jsr sp4_trap_fail 
                       >
254a :                 >skip1900
                       >
254a : 28              >            plp         ;restore status
                        
254b : 88                       dey
254c : c07f                     cpy #$7f
                                tst_y $7e,~fzc
254e : 08              >            php         ;save flags
254f : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
2551 : f003            >        beq skip1903
                       >        trap            ;failed not equal (non zero)
2553 : 206144          >        jsr sp4_trap_fail 
                       >
2556 :                 >skip1903
                       >
2556 : 68              >            pla         ;load status
2557 : 48              >            pha
                       >            cmp_flag ~fzc
2558 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
255a : f003            >        beq skip1906
                       >        trap            ;failed not equal (non zero)
255c : 206144          >        jsr sp4_trap_fail 
                       >
255f :                 >skip1906
                       >
255f : 28              >            plp         ;restore status
                        
                                next_test
2560 : ad0002          >            lda test_case   ;previous test
2563 : c91b            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2565 : f003            >        beq skip1909
                       >        trap            ;failed not equal (non zero)
2567 : 206144          >        jsr sp4_trap_fail 
                       >
256a :                 >skip1909
                       >
001c =                 >test_num = test_num + 1
256a : a91c            >            lda #test_num   ;*** next tests' number
256c : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; CMP - zp / abs / #         
                                set_a $80,0
                       >            load_flag 0
256f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2571 : 48              >            pha         ;use stack to load status
2572 : a980            >            lda #$80     ;precharge accu
2574 : 28              >            plp
                        
2575 : c50f                     cmp zp7f
                                tst_a $80,fc
2577 : 08              >            php         ;save flags
2578 : c980            >            cmp #$80     ;test result
                       >            trap_ne
257a : f003            >        beq skip1914
                       >        trap            ;failed not equal (non zero)
257c : 206144          >        jsr sp4_trap_fail 
                       >
257f :                 >skip1914
                       >
257f : 68              >            pla         ;load status
2580 : 48              >            pha
                       >            cmp_flag fc
2581 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2583 : f003            >        beq skip1917
                       >        trap            ;failed not equal (non zero)
2585 : 206144          >        jsr sp4_trap_fail 
                       >
2588 :                 >skip1917
                       >
2588 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
2589 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
258b : 48              >            pha         ;use stack to load status
258c : a97f            >            lda #$7f     ;precharge accu
258e : 28              >            plp
                        
258f : c50f                     cmp zp7f
                                tst_a $7f,fzc
2591 : 08              >            php         ;save flags
2592 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2594 : f003            >        beq skip1922
                       >        trap            ;failed not equal (non zero)
2596 : 206144          >        jsr sp4_trap_fail 
                       >
2599 :                 >skip1922
                       >
2599 : 68              >            pla         ;load status
259a : 48              >            pha
                       >            cmp_flag fzc
259b : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
259d : f003            >        beq skip1925
                       >        trap            ;failed not equal (non zero)
259f : 206144          >        jsr sp4_trap_fail 
                       >
25a2 :                 >skip1925
                       >
25a2 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
25a3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
25a5 : 48              >            pha         ;use stack to load status
25a6 : a97e            >            lda #$7e     ;precharge accu
25a8 : 28              >            plp
                        
25a9 : c50f                     cmp zp7f
                                tst_a $7e,fn
25ab : 08              >            php         ;save flags
25ac : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
25ae : f003            >        beq skip1930
                       >        trap            ;failed not equal (non zero)
25b0 : 206144          >        jsr sp4_trap_fail 
                       >
25b3 :                 >skip1930
                       >
25b3 : 68              >            pla         ;load status
25b4 : 48              >            pha
                       >            cmp_flag fn
25b5 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
25b7 : f003            >        beq skip1933
                       >        trap            ;failed not equal (non zero)
25b9 : 206144          >        jsr sp4_trap_fail 
                       >
25bc :                 >skip1933
                       >
25bc : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
25bd : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
25bf : 48              >            pha         ;use stack to load status
25c0 : a980            >            lda #$80     ;precharge accu
25c2 : 28              >            plp
                        
25c3 : c50f                     cmp zp7f
                                tst_a $80,~fnz
25c5 : 08              >            php         ;save flags
25c6 : c980            >            cmp #$80     ;test result
                       >            trap_ne
25c8 : f003            >        beq skip1938
                       >        trap            ;failed not equal (non zero)
25ca : 206144          >        jsr sp4_trap_fail 
                       >
25cd :                 >skip1938
                       >
25cd : 68              >            pla         ;load status
25ce : 48              >            pha
                       >            cmp_flag ~fnz
25cf : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
25d1 : f003            >        beq skip1941
                       >        trap            ;failed not equal (non zero)
25d3 : 206144          >        jsr sp4_trap_fail 
                       >
25d6 :                 >skip1941
                       >
25d6 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
25d7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
25d9 : 48              >            pha         ;use stack to load status
25da : a97f            >            lda #$7f     ;precharge accu
25dc : 28              >            plp
                        
25dd : c50f                     cmp zp7f
                                tst_a $7f,~fn
25df : 08              >            php         ;save flags
25e0 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
25e2 : f003            >        beq skip1946
                       >        trap            ;failed not equal (non zero)
25e4 : 206144          >        jsr sp4_trap_fail 
                       >
25e7 :                 >skip1946
                       >
25e7 : 68              >            pla         ;load status
25e8 : 48              >            pha
                       >            cmp_flag ~fn
25e9 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
25eb : f003            >        beq skip1949
                       >        trap            ;failed not equal (non zero)
25ed : 206144          >        jsr sp4_trap_fail 
                       >
25f0 :                 >skip1949
                       >
25f0 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
25f1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
25f3 : 48              >            pha         ;use stack to load status
25f4 : a97e            >            lda #$7e     ;precharge accu
25f6 : 28              >            plp
                        
25f7 : c50f                     cmp zp7f
                                tst_a $7e,~fzc
25f9 : 08              >            php         ;save flags
25fa : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
25fc : f003            >        beq skip1954
                       >        trap            ;failed not equal (non zero)
25fe : 206144          >        jsr sp4_trap_fail 
                       >
2601 :                 >skip1954
                       >
2601 : 68              >            pla         ;load status
2602 : 48              >            pha
                       >            cmp_flag ~fzc
2603 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2605 : f003            >        beq skip1957
                       >        trap            ;failed not equal (non zero)
2607 : 206144          >        jsr sp4_trap_fail 
                       >
260a :                 >skip1957
                       >
260a : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
260b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
260d : 48              >            pha         ;use stack to load status
260e : a980            >            lda #$80     ;precharge accu
2610 : 28              >            plp
                        
2611 : cd1c02                   cmp abs7f
                                tst_a $80,fc
2614 : 08              >            php         ;save flags
2615 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2617 : f003            >        beq skip1962
                       >        trap            ;failed not equal (non zero)
2619 : 206144          >        jsr sp4_trap_fail 
                       >
261c :                 >skip1962
                       >
261c : 68              >            pla         ;load status
261d : 48              >            pha
                       >            cmp_flag fc
261e : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2620 : f003            >        beq skip1965
                       >        trap            ;failed not equal (non zero)
2622 : 206144          >        jsr sp4_trap_fail 
                       >
2625 :                 >skip1965
                       >
2625 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
2626 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2628 : 48              >            pha         ;use stack to load status
2629 : a97f            >            lda #$7f     ;precharge accu
262b : 28              >            plp
                        
262c : cd1c02                   cmp abs7f
                                tst_a $7f,fzc
262f : 08              >            php         ;save flags
2630 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2632 : f003            >        beq skip1970
                       >        trap            ;failed not equal (non zero)
2634 : 206144          >        jsr sp4_trap_fail 
                       >
2637 :                 >skip1970
                       >
2637 : 68              >            pla         ;load status
2638 : 48              >            pha
                       >            cmp_flag fzc
2639 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
263b : f003            >        beq skip1973
                       >        trap            ;failed not equal (non zero)
263d : 206144          >        jsr sp4_trap_fail 
                       >
2640 :                 >skip1973
                       >
2640 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
2641 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2643 : 48              >            pha         ;use stack to load status
2644 : a97e            >            lda #$7e     ;precharge accu
2646 : 28              >            plp
                        
2647 : cd1c02                   cmp abs7f
                                tst_a $7e,fn
264a : 08              >            php         ;save flags
264b : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
264d : f003            >        beq skip1978
                       >        trap            ;failed not equal (non zero)
264f : 206144          >        jsr sp4_trap_fail 
                       >
2652 :                 >skip1978
                       >
2652 : 68              >            pla         ;load status
2653 : 48              >            pha
                       >            cmp_flag fn
2654 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2656 : f003            >        beq skip1981
                       >        trap            ;failed not equal (non zero)
2658 : 206144          >        jsr sp4_trap_fail 
                       >
265b :                 >skip1981
                       >
265b : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
265c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
265e : 48              >            pha         ;use stack to load status
265f : a980            >            lda #$80     ;precharge accu
2661 : 28              >            plp
                        
2662 : cd1c02                   cmp abs7f
                                tst_a $80,~fnz
2665 : 08              >            php         ;save flags
2666 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2668 : f003            >        beq skip1986
                       >        trap            ;failed not equal (non zero)
266a : 206144          >        jsr sp4_trap_fail 
                       >
266d :                 >skip1986
                       >
266d : 68              >            pla         ;load status
266e : 48              >            pha
                       >            cmp_flag ~fnz
266f : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2671 : f003            >        beq skip1989
                       >        trap            ;failed not equal (non zero)
2673 : 206144          >        jsr sp4_trap_fail 
                       >
2676 :                 >skip1989
                       >
2676 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
2677 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2679 : 48              >            pha         ;use stack to load status
267a : a97f            >            lda #$7f     ;precharge accu
267c : 28              >            plp
                        
267d : cd1c02                   cmp abs7f
                                tst_a $7f,~fn
2680 : 08              >            php         ;save flags
2681 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2683 : f003            >        beq skip1994
                       >        trap            ;failed not equal (non zero)
2685 : 206144          >        jsr sp4_trap_fail 
                       >
2688 :                 >skip1994
                       >
2688 : 68              >            pla         ;load status
2689 : 48              >            pha
                       >            cmp_flag ~fn
268a : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
268c : f003            >        beq skip1997
                       >        trap            ;failed not equal (non zero)
268e : 206144          >        jsr sp4_trap_fail 
                       >
2691 :                 >skip1997
                       >
2691 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
2692 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2694 : 48              >            pha         ;use stack to load status
2695 : a97e            >            lda #$7e     ;precharge accu
2697 : 28              >            plp
                        
2698 : cd1c02                   cmp abs7f
                                tst_a $7e,~fzc
269b : 08              >            php         ;save flags
269c : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
269e : f003            >        beq skip2002
                       >        trap            ;failed not equal (non zero)
26a0 : 206144          >        jsr sp4_trap_fail 
                       >
26a3 :                 >skip2002
                       >
26a3 : 68              >            pla         ;load status
26a4 : 48              >            pha
                       >            cmp_flag ~fzc
26a5 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
26a7 : f003            >        beq skip2005
                       >        trap            ;failed not equal (non zero)
26a9 : 206144          >        jsr sp4_trap_fail 
                       >
26ac :                 >skip2005
                       >
26ac : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
26ad : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
26af : 48              >            pha         ;use stack to load status
26b0 : a980            >            lda #$80     ;precharge accu
26b2 : 28              >            plp
                        
26b3 : c97f                     cmp #$7f
                                tst_a $80,fc
26b5 : 08              >            php         ;save flags
26b6 : c980            >            cmp #$80     ;test result
                       >            trap_ne
26b8 : f003            >        beq skip2010
                       >        trap            ;failed not equal (non zero)
26ba : 206144          >        jsr sp4_trap_fail 
                       >
26bd :                 >skip2010
                       >
26bd : 68              >            pla         ;load status
26be : 48              >            pha
                       >            cmp_flag fc
26bf : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
26c1 : f003            >        beq skip2013
                       >        trap            ;failed not equal (non zero)
26c3 : 206144          >        jsr sp4_trap_fail 
                       >
26c6 :                 >skip2013
                       >
26c6 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
26c7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
26c9 : 48              >            pha         ;use stack to load status
26ca : a97f            >            lda #$7f     ;precharge accu
26cc : 28              >            plp
                        
26cd : c97f                     cmp #$7f
                                tst_a $7f,fzc
26cf : 08              >            php         ;save flags
26d0 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
26d2 : f003            >        beq skip2018
                       >        trap            ;failed not equal (non zero)
26d4 : 206144          >        jsr sp4_trap_fail 
                       >
26d7 :                 >skip2018
                       >
26d7 : 68              >            pla         ;load status
26d8 : 48              >            pha
                       >            cmp_flag fzc
26d9 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
26db : f003            >        beq skip2021
                       >        trap            ;failed not equal (non zero)
26dd : 206144          >        jsr sp4_trap_fail 
                       >
26e0 :                 >skip2021
                       >
26e0 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
26e1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
26e3 : 48              >            pha         ;use stack to load status
26e4 : a97e            >            lda #$7e     ;precharge accu
26e6 : 28              >            plp
                        
26e7 : c97f                     cmp #$7f
                                tst_a $7e,fn
26e9 : 08              >            php         ;save flags
26ea : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
26ec : f003            >        beq skip2026
                       >        trap            ;failed not equal (non zero)
26ee : 206144          >        jsr sp4_trap_fail 
                       >
26f1 :                 >skip2026
                       >
26f1 : 68              >            pla         ;load status
26f2 : 48              >            pha
                       >            cmp_flag fn
26f3 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
26f5 : f003            >        beq skip2029
                       >        trap            ;failed not equal (non zero)
26f7 : 206144          >        jsr sp4_trap_fail 
                       >
26fa :                 >skip2029
                       >
26fa : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
26fb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
26fd : 48              >            pha         ;use stack to load status
26fe : a980            >            lda #$80     ;precharge accu
2700 : 28              >            plp
                        
2701 : c97f                     cmp #$7f
                                tst_a $80,~fnz
2703 : 08              >            php         ;save flags
2704 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2706 : f003            >        beq skip2034
                       >        trap            ;failed not equal (non zero)
2708 : 206144          >        jsr sp4_trap_fail 
                       >
270b :                 >skip2034
                       >
270b : 68              >            pla         ;load status
270c : 48              >            pha
                       >            cmp_flag ~fnz
270d : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
270f : f003            >        beq skip2037
                       >        trap            ;failed not equal (non zero)
2711 : 206144          >        jsr sp4_trap_fail 
                       >
2714 :                 >skip2037
                       >
2714 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
2715 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2717 : 48              >            pha         ;use stack to load status
2718 : a97f            >            lda #$7f     ;precharge accu
271a : 28              >            plp
                        
271b : c97f                     cmp #$7f
                                tst_a $7f,~fn
271d : 08              >            php         ;save flags
271e : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2720 : f003            >        beq skip2042
                       >        trap            ;failed not equal (non zero)
2722 : 206144          >        jsr sp4_trap_fail 
                       >
2725 :                 >skip2042
                       >
2725 : 68              >            pla         ;load status
2726 : 48              >            pha
                       >            cmp_flag ~fn
2727 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2729 : f003            >        beq skip2045
                       >        trap            ;failed not equal (non zero)
272b : 206144          >        jsr sp4_trap_fail 
                       >
272e :                 >skip2045
                       >
272e : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
272f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2731 : 48              >            pha         ;use stack to load status
2732 : a97e            >            lda #$7e     ;precharge accu
2734 : 28              >            plp
                        
2735 : c97f                     cmp #$7f
                                tst_a $7e,~fzc
2737 : 08              >            php         ;save flags
2738 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
273a : f003            >        beq skip2050
                       >        trap            ;failed not equal (non zero)
273c : 206144          >        jsr sp4_trap_fail 
                       >
273f :                 >skip2050
                       >
273f : 68              >            pla         ;load status
2740 : 48              >            pha
                       >            cmp_flag ~fzc
2741 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2743 : f003            >        beq skip2053
                       >        trap            ;failed not equal (non zero)
2745 : 206144          >        jsr sp4_trap_fail 
                       >
2748 :                 >skip2053
                       >
2748 : 28              >            plp         ;restore status
                        
                        
2749 : a204                     ldx #4          ;with indexing by X
                                set_a $80,0
                       >            load_flag 0
274b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
274d : 48              >            pha         ;use stack to load status
274e : a980            >            lda #$80     ;precharge accu
2750 : 28              >            plp
                        
2751 : d50b                     cmp zp1,x
                                tst_a $80,fc
2753 : 08              >            php         ;save flags
2754 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2756 : f003            >        beq skip2058
                       >        trap            ;failed not equal (non zero)
2758 : 206144          >        jsr sp4_trap_fail 
                       >
275b :                 >skip2058
                       >
275b : 68              >            pla         ;load status
275c : 48              >            pha
                       >            cmp_flag fc
275d : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
275f : f003            >        beq skip2061
                       >        trap            ;failed not equal (non zero)
2761 : 206144          >        jsr sp4_trap_fail 
                       >
2764 :                 >skip2061
                       >
2764 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
2765 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2767 : 48              >            pha         ;use stack to load status
2768 : a97f            >            lda #$7f     ;precharge accu
276a : 28              >            plp
                        
276b : d50b                     cmp zp1,x
                                tst_a $7f,fzc
276d : 08              >            php         ;save flags
276e : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2770 : f003            >        beq skip2066
                       >        trap            ;failed not equal (non zero)
2772 : 206144          >        jsr sp4_trap_fail 
                       >
2775 :                 >skip2066
                       >
2775 : 68              >            pla         ;load status
2776 : 48              >            pha
                       >            cmp_flag fzc
2777 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2779 : f003            >        beq skip2069
                       >        trap            ;failed not equal (non zero)
277b : 206144          >        jsr sp4_trap_fail 
                       >
277e :                 >skip2069
                       >
277e : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
277f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2781 : 48              >            pha         ;use stack to load status
2782 : a97e            >            lda #$7e     ;precharge accu
2784 : 28              >            plp
                        
2785 : d50b                     cmp zp1,x
                                tst_a $7e,fn
2787 : 08              >            php         ;save flags
2788 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
278a : f003            >        beq skip2074
                       >        trap            ;failed not equal (non zero)
278c : 206144          >        jsr sp4_trap_fail 
                       >
278f :                 >skip2074
                       >
278f : 68              >            pla         ;load status
2790 : 48              >            pha
                       >            cmp_flag fn
2791 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2793 : f003            >        beq skip2077
                       >        trap            ;failed not equal (non zero)
2795 : 206144          >        jsr sp4_trap_fail 
                       >
2798 :                 >skip2077
                       >
2798 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2799 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
279b : 48              >            pha         ;use stack to load status
279c : a980            >            lda #$80     ;precharge accu
279e : 28              >            plp
                        
279f : d50b                     cmp zp1,x
                                tst_a $80,~fnz
27a1 : 08              >            php         ;save flags
27a2 : c980            >            cmp #$80     ;test result
                       >            trap_ne
27a4 : f003            >        beq skip2082
                       >        trap            ;failed not equal (non zero)
27a6 : 206144          >        jsr sp4_trap_fail 
                       >
27a9 :                 >skip2082
                       >
27a9 : 68              >            pla         ;load status
27aa : 48              >            pha
                       >            cmp_flag ~fnz
27ab : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
27ad : f003            >        beq skip2085
                       >        trap            ;failed not equal (non zero)
27af : 206144          >        jsr sp4_trap_fail 
                       >
27b2 :                 >skip2085
                       >
27b2 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
27b3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
27b5 : 48              >            pha         ;use stack to load status
27b6 : a97f            >            lda #$7f     ;precharge accu
27b8 : 28              >            plp
                        
27b9 : d50b                     cmp zp1,x
                                tst_a $7f,~fn
27bb : 08              >            php         ;save flags
27bc : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
27be : f003            >        beq skip2090
                       >        trap            ;failed not equal (non zero)
27c0 : 206144          >        jsr sp4_trap_fail 
                       >
27c3 :                 >skip2090
                       >
27c3 : 68              >            pla         ;load status
27c4 : 48              >            pha
                       >            cmp_flag ~fn
27c5 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
27c7 : f003            >        beq skip2093
                       >        trap            ;failed not equal (non zero)
27c9 : 206144          >        jsr sp4_trap_fail 
                       >
27cc :                 >skip2093
                       >
27cc : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
27cd : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
27cf : 48              >            pha         ;use stack to load status
27d0 : a97e            >            lda #$7e     ;precharge accu
27d2 : 28              >            plp
                        
27d3 : d50b                     cmp zp1,x
                                tst_a $7e,~fzc
27d5 : 08              >            php         ;save flags
27d6 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
27d8 : f003            >        beq skip2098
                       >        trap            ;failed not equal (non zero)
27da : 206144          >        jsr sp4_trap_fail 
                       >
27dd :                 >skip2098
                       >
27dd : 68              >            pla         ;load status
27de : 48              >            pha
                       >            cmp_flag ~fzc
27df : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
27e1 : f003            >        beq skip2101
                       >        trap            ;failed not equal (non zero)
27e3 : 206144          >        jsr sp4_trap_fail 
                       >
27e6 :                 >skip2101
                       >
27e6 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
27e7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
27e9 : 48              >            pha         ;use stack to load status
27ea : a980            >            lda #$80     ;precharge accu
27ec : 28              >            plp
                        
27ed : dd1802                   cmp abs1,x
                                tst_a $80,fc
27f0 : 08              >            php         ;save flags
27f1 : c980            >            cmp #$80     ;test result
                       >            trap_ne
27f3 : f003            >        beq skip2106
                       >        trap            ;failed not equal (non zero)
27f5 : 206144          >        jsr sp4_trap_fail 
                       >
27f8 :                 >skip2106
                       >
27f8 : 68              >            pla         ;load status
27f9 : 48              >            pha
                       >            cmp_flag fc
27fa : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
27fc : f003            >        beq skip2109
                       >        trap            ;failed not equal (non zero)
27fe : 206144          >        jsr sp4_trap_fail 
                       >
2801 :                 >skip2109
                       >
2801 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
2802 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2804 : 48              >            pha         ;use stack to load status
2805 : a97f            >            lda #$7f     ;precharge accu
2807 : 28              >            plp
                        
2808 : dd1802                   cmp abs1,x
                                tst_a $7f,fzc
280b : 08              >            php         ;save flags
280c : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
280e : f003            >        beq skip2114
                       >        trap            ;failed not equal (non zero)
2810 : 206144          >        jsr sp4_trap_fail 
                       >
2813 :                 >skip2114
                       >
2813 : 68              >            pla         ;load status
2814 : 48              >            pha
                       >            cmp_flag fzc
2815 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2817 : f003            >        beq skip2117
                       >        trap            ;failed not equal (non zero)
2819 : 206144          >        jsr sp4_trap_fail 
                       >
281c :                 >skip2117
                       >
281c : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
281d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
281f : 48              >            pha         ;use stack to load status
2820 : a97e            >            lda #$7e     ;precharge accu
2822 : 28              >            plp
                        
2823 : dd1802                   cmp abs1,x
                                tst_a $7e,fn
2826 : 08              >            php         ;save flags
2827 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2829 : f003            >        beq skip2122
                       >        trap            ;failed not equal (non zero)
282b : 206144          >        jsr sp4_trap_fail 
                       >
282e :                 >skip2122
                       >
282e : 68              >            pla         ;load status
282f : 48              >            pha
                       >            cmp_flag fn
2830 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2832 : f003            >        beq skip2125
                       >        trap            ;failed not equal (non zero)
2834 : 206144          >        jsr sp4_trap_fail 
                       >
2837 :                 >skip2125
                       >
2837 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2838 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
283a : 48              >            pha         ;use stack to load status
283b : a980            >            lda #$80     ;precharge accu
283d : 28              >            plp
                        
283e : dd1802                   cmp abs1,x
                                tst_a $80,~fnz
2841 : 08              >            php         ;save flags
2842 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2844 : f003            >        beq skip2130
                       >        trap            ;failed not equal (non zero)
2846 : 206144          >        jsr sp4_trap_fail 
                       >
2849 :                 >skip2130
                       >
2849 : 68              >            pla         ;load status
284a : 48              >            pha
                       >            cmp_flag ~fnz
284b : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
284d : f003            >        beq skip2133
                       >        trap            ;failed not equal (non zero)
284f : 206144          >        jsr sp4_trap_fail 
                       >
2852 :                 >skip2133
                       >
2852 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
2853 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2855 : 48              >            pha         ;use stack to load status
2856 : a97f            >            lda #$7f     ;precharge accu
2858 : 28              >            plp
                        
2859 : dd1802                   cmp abs1,x
                                tst_a $7f,~fn
285c : 08              >            php         ;save flags
285d : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
285f : f003            >        beq skip2138
                       >        trap            ;failed not equal (non zero)
2861 : 206144          >        jsr sp4_trap_fail 
                       >
2864 :                 >skip2138
                       >
2864 : 68              >            pla         ;load status
2865 : 48              >            pha
                       >            cmp_flag ~fn
2866 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2868 : f003            >        beq skip2141
                       >        trap            ;failed not equal (non zero)
286a : 206144          >        jsr sp4_trap_fail 
                       >
286d :                 >skip2141
                       >
286d : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
286e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2870 : 48              >            pha         ;use stack to load status
2871 : a97e            >            lda #$7e     ;precharge accu
2873 : 28              >            plp
                        
2874 : dd1802                   cmp abs1,x
                                tst_a $7e,~fzc
2877 : 08              >            php         ;save flags
2878 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
287a : f003            >        beq skip2146
                       >        trap            ;failed not equal (non zero)
287c : 206144          >        jsr sp4_trap_fail 
                       >
287f :                 >skip2146
                       >
287f : 68              >            pla         ;load status
2880 : 48              >            pha
                       >            cmp_flag ~fzc
2881 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2883 : f003            >        beq skip2149
                       >        trap            ;failed not equal (non zero)
2885 : 206144          >        jsr sp4_trap_fail 
                       >
2888 :                 >skip2149
                       >
2888 : 28              >            plp         ;restore status
                        
                        
2889 : a004                     ldy #4          ;with indexing by Y
288b : a208                     ldx #8          ;with indexed indirect
                                set_a $80,0
                       >            load_flag 0
288d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
288f : 48              >            pha         ;use stack to load status
2890 : a980            >            lda #$80     ;precharge accu
2892 : 28              >            plp
                        
2893 : d91802                   cmp abs1,y
                                tst_a $80,fc
2896 : 08              >            php         ;save flags
2897 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2899 : f003            >        beq skip2154
                       >        trap            ;failed not equal (non zero)
289b : 206144          >        jsr sp4_trap_fail 
                       >
289e :                 >skip2154
                       >
289e : 68              >            pla         ;load status
289f : 48              >            pha
                       >            cmp_flag fc
28a0 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
28a2 : f003            >        beq skip2157
                       >        trap            ;failed not equal (non zero)
28a4 : 206144          >        jsr sp4_trap_fail 
                       >
28a7 :                 >skip2157
                       >
28a7 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
28a8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
28aa : 48              >            pha         ;use stack to load status
28ab : a97f            >            lda #$7f     ;precharge accu
28ad : 28              >            plp
                        
28ae : d91802                   cmp abs1,y
                                tst_a $7f,fzc
28b1 : 08              >            php         ;save flags
28b2 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
28b4 : f003            >        beq skip2162
                       >        trap            ;failed not equal (non zero)
28b6 : 206144          >        jsr sp4_trap_fail 
                       >
28b9 :                 >skip2162
                       >
28b9 : 68              >            pla         ;load status
28ba : 48              >            pha
                       >            cmp_flag fzc
28bb : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
28bd : f003            >        beq skip2165
                       >        trap            ;failed not equal (non zero)
28bf : 206144          >        jsr sp4_trap_fail 
                       >
28c2 :                 >skip2165
                       >
28c2 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
28c3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
28c5 : 48              >            pha         ;use stack to load status
28c6 : a97e            >            lda #$7e     ;precharge accu
28c8 : 28              >            plp
                        
28c9 : d91802                   cmp abs1,y
                                tst_a $7e,fn
28cc : 08              >            php         ;save flags
28cd : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
28cf : f003            >        beq skip2170
                       >        trap            ;failed not equal (non zero)
28d1 : 206144          >        jsr sp4_trap_fail 
                       >
28d4 :                 >skip2170
                       >
28d4 : 68              >            pla         ;load status
28d5 : 48              >            pha
                       >            cmp_flag fn
28d6 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
28d8 : f003            >        beq skip2173
                       >        trap            ;failed not equal (non zero)
28da : 206144          >        jsr sp4_trap_fail 
                       >
28dd :                 >skip2173
                       >
28dd : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
28de : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
28e0 : 48              >            pha         ;use stack to load status
28e1 : a980            >            lda #$80     ;precharge accu
28e3 : 28              >            plp
                        
28e4 : d91802                   cmp abs1,y
                                tst_a $80,~fnz
28e7 : 08              >            php         ;save flags
28e8 : c980            >            cmp #$80     ;test result
                       >            trap_ne
28ea : f003            >        beq skip2178
                       >        trap            ;failed not equal (non zero)
28ec : 206144          >        jsr sp4_trap_fail 
                       >
28ef :                 >skip2178
                       >
28ef : 68              >            pla         ;load status
28f0 : 48              >            pha
                       >            cmp_flag ~fnz
28f1 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
28f3 : f003            >        beq skip2181
                       >        trap            ;failed not equal (non zero)
28f5 : 206144          >        jsr sp4_trap_fail 
                       >
28f8 :                 >skip2181
                       >
28f8 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
28f9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
28fb : 48              >            pha         ;use stack to load status
28fc : a97f            >            lda #$7f     ;precharge accu
28fe : 28              >            plp
                        
28ff : d91802                   cmp abs1,y
                                tst_a $7f,~fn
2902 : 08              >            php         ;save flags
2903 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2905 : f003            >        beq skip2186
                       >        trap            ;failed not equal (non zero)
2907 : 206144          >        jsr sp4_trap_fail 
                       >
290a :                 >skip2186
                       >
290a : 68              >            pla         ;load status
290b : 48              >            pha
                       >            cmp_flag ~fn
290c : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
290e : f003            >        beq skip2189
                       >        trap            ;failed not equal (non zero)
2910 : 206144          >        jsr sp4_trap_fail 
                       >
2913 :                 >skip2189
                       >
2913 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
2914 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2916 : 48              >            pha         ;use stack to load status
2917 : a97e            >            lda #$7e     ;precharge accu
2919 : 28              >            plp
                        
291a : d91802                   cmp abs1,y
                                tst_a $7e,~fzc
291d : 08              >            php         ;save flags
291e : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2920 : f003            >        beq skip2194
                       >        trap            ;failed not equal (non zero)
2922 : 206144          >        jsr sp4_trap_fail 
                       >
2925 :                 >skip2194
                       >
2925 : 68              >            pla         ;load status
2926 : 48              >            pha
                       >            cmp_flag ~fzc
2927 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2929 : f003            >        beq skip2197
                       >        trap            ;failed not equal (non zero)
292b : 206144          >        jsr sp4_trap_fail 
                       >
292e :                 >skip2197
                       >
292e : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
292f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2931 : 48              >            pha         ;use stack to load status
2932 : a980            >            lda #$80     ;precharge accu
2934 : 28              >            plp
                        
2935 : c11c                     cmp (ind1,x)
                                tst_a $80,fc
2937 : 08              >            php         ;save flags
2938 : c980            >            cmp #$80     ;test result
                       >            trap_ne
293a : f003            >        beq skip2202
                       >        trap            ;failed not equal (non zero)
293c : 206144          >        jsr sp4_trap_fail 
                       >
293f :                 >skip2202
                       >
293f : 68              >            pla         ;load status
2940 : 48              >            pha
                       >            cmp_flag fc
2941 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2943 : f003            >        beq skip2205
                       >        trap            ;failed not equal (non zero)
2945 : 206144          >        jsr sp4_trap_fail 
                       >
2948 :                 >skip2205
                       >
2948 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
2949 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
294b : 48              >            pha         ;use stack to load status
294c : a97f            >            lda #$7f     ;precharge accu
294e : 28              >            plp
                        
294f : c11c                     cmp (ind1,x)
                                tst_a $7f,fzc
2951 : 08              >            php         ;save flags
2952 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2954 : f003            >        beq skip2210
                       >        trap            ;failed not equal (non zero)
2956 : 206144          >        jsr sp4_trap_fail 
                       >
2959 :                 >skip2210
                       >
2959 : 68              >            pla         ;load status
295a : 48              >            pha
                       >            cmp_flag fzc
295b : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
295d : f003            >        beq skip2213
                       >        trap            ;failed not equal (non zero)
295f : 206144          >        jsr sp4_trap_fail 
                       >
2962 :                 >skip2213
                       >
2962 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
2963 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2965 : 48              >            pha         ;use stack to load status
2966 : a97e            >            lda #$7e     ;precharge accu
2968 : 28              >            plp
                        
2969 : c11c                     cmp (ind1,x)
                                tst_a $7e,fn
296b : 08              >            php         ;save flags
296c : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
296e : f003            >        beq skip2218
                       >        trap            ;failed not equal (non zero)
2970 : 206144          >        jsr sp4_trap_fail 
                       >
2973 :                 >skip2218
                       >
2973 : 68              >            pla         ;load status
2974 : 48              >            pha
                       >            cmp_flag fn
2975 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2977 : f003            >        beq skip2221
                       >        trap            ;failed not equal (non zero)
2979 : 206144          >        jsr sp4_trap_fail 
                       >
297c :                 >skip2221
                       >
297c : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
297d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
297f : 48              >            pha         ;use stack to load status
2980 : a980            >            lda #$80     ;precharge accu
2982 : 28              >            plp
                        
2983 : c11c                     cmp (ind1,x)
                                tst_a $80,~fnz
2985 : 08              >            php         ;save flags
2986 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2988 : f003            >        beq skip2226
                       >        trap            ;failed not equal (non zero)
298a : 206144          >        jsr sp4_trap_fail 
                       >
298d :                 >skip2226
                       >
298d : 68              >            pla         ;load status
298e : 48              >            pha
                       >            cmp_flag ~fnz
298f : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2991 : f003            >        beq skip2229
                       >        trap            ;failed not equal (non zero)
2993 : 206144          >        jsr sp4_trap_fail 
                       >
2996 :                 >skip2229
                       >
2996 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
2997 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2999 : 48              >            pha         ;use stack to load status
299a : a97f            >            lda #$7f     ;precharge accu
299c : 28              >            plp
                        
299d : c11c                     cmp (ind1,x)
                                tst_a $7f,~fn
299f : 08              >            php         ;save flags
29a0 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
29a2 : f003            >        beq skip2234
                       >        trap            ;failed not equal (non zero)
29a4 : 206144          >        jsr sp4_trap_fail 
                       >
29a7 :                 >skip2234
                       >
29a7 : 68              >            pla         ;load status
29a8 : 48              >            pha
                       >            cmp_flag ~fn
29a9 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
29ab : f003            >        beq skip2237
                       >        trap            ;failed not equal (non zero)
29ad : 206144          >        jsr sp4_trap_fail 
                       >
29b0 :                 >skip2237
                       >
29b0 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
29b1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
29b3 : 48              >            pha         ;use stack to load status
29b4 : a97e            >            lda #$7e     ;precharge accu
29b6 : 28              >            plp
                        
29b7 : c11c                     cmp (ind1,x)
                                tst_a $7e,~fzc
29b9 : 08              >            php         ;save flags
29ba : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
29bc : f003            >        beq skip2242
                       >        trap            ;failed not equal (non zero)
29be : 206144          >        jsr sp4_trap_fail 
                       >
29c1 :                 >skip2242
                       >
29c1 : 68              >            pla         ;load status
29c2 : 48              >            pha
                       >            cmp_flag ~fzc
29c3 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
29c5 : f003            >        beq skip2245
                       >        trap            ;failed not equal (non zero)
29c7 : 206144          >        jsr sp4_trap_fail 
                       >
29ca :                 >skip2245
                       >
29ca : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
29cb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
29cd : 48              >            pha         ;use stack to load status
29ce : a980            >            lda #$80     ;precharge accu
29d0 : 28              >            plp
                        
29d1 : d11c                     cmp (ind1),y
                                tst_a $80,fc
29d3 : 08              >            php         ;save flags
29d4 : c980            >            cmp #$80     ;test result
                       >            trap_ne
29d6 : f003            >        beq skip2250
                       >        trap            ;failed not equal (non zero)
29d8 : 206144          >        jsr sp4_trap_fail 
                       >
29db :                 >skip2250
                       >
29db : 68              >            pla         ;load status
29dc : 48              >            pha
                       >            cmp_flag fc
29dd : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
29df : f003            >        beq skip2253
                       >        trap            ;failed not equal (non zero)
29e1 : 206144          >        jsr sp4_trap_fail 
                       >
29e4 :                 >skip2253
                       >
29e4 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
29e5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
29e7 : 48              >            pha         ;use stack to load status
29e8 : a97f            >            lda #$7f     ;precharge accu
29ea : 28              >            plp
                        
29eb : d11c                     cmp (ind1),y
                                tst_a $7f,fzc
29ed : 08              >            php         ;save flags
29ee : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
29f0 : f003            >        beq skip2258
                       >        trap            ;failed not equal (non zero)
29f2 : 206144          >        jsr sp4_trap_fail 
                       >
29f5 :                 >skip2258
                       >
29f5 : 68              >            pla         ;load status
29f6 : 48              >            pha
                       >            cmp_flag fzc
29f7 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
29f9 : f003            >        beq skip2261
                       >        trap            ;failed not equal (non zero)
29fb : 206144          >        jsr sp4_trap_fail 
                       >
29fe :                 >skip2261
                       >
29fe : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
29ff : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2a01 : 48              >            pha         ;use stack to load status
2a02 : a97e            >            lda #$7e     ;precharge accu
2a04 : 28              >            plp
                        
2a05 : d11c                     cmp (ind1),y
                                tst_a $7e,fn
2a07 : 08              >            php         ;save flags
2a08 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2a0a : f003            >        beq skip2266
                       >        trap            ;failed not equal (non zero)
2a0c : 206144          >        jsr sp4_trap_fail 
                       >
2a0f :                 >skip2266
                       >
2a0f : 68              >            pla         ;load status
2a10 : 48              >            pha
                       >            cmp_flag fn
2a11 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2a13 : f003            >        beq skip2269
                       >        trap            ;failed not equal (non zero)
2a15 : 206144          >        jsr sp4_trap_fail 
                       >
2a18 :                 >skip2269
                       >
2a18 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2a19 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2a1b : 48              >            pha         ;use stack to load status
2a1c : a980            >            lda #$80     ;precharge accu
2a1e : 28              >            plp
                        
2a1f : d11c                     cmp (ind1),y
                                tst_a $80,~fnz
2a21 : 08              >            php         ;save flags
2a22 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2a24 : f003            >        beq skip2274
                       >        trap            ;failed not equal (non zero)
2a26 : 206144          >        jsr sp4_trap_fail 
                       >
2a29 :                 >skip2274
                       >
2a29 : 68              >            pla         ;load status
2a2a : 48              >            pha
                       >            cmp_flag ~fnz
2a2b : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2a2d : f003            >        beq skip2277
                       >        trap            ;failed not equal (non zero)
2a2f : 206144          >        jsr sp4_trap_fail 
                       >
2a32 :                 >skip2277
                       >
2a32 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
2a33 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2a35 : 48              >            pha         ;use stack to load status
2a36 : a97f            >            lda #$7f     ;precharge accu
2a38 : 28              >            plp
                        
2a39 : d11c                     cmp (ind1),y
                                tst_a $7f,~fn
2a3b : 08              >            php         ;save flags
2a3c : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2a3e : f003            >        beq skip2282
                       >        trap            ;failed not equal (non zero)
2a40 : 206144          >        jsr sp4_trap_fail 
                       >
2a43 :                 >skip2282
                       >
2a43 : 68              >            pla         ;load status
2a44 : 48              >            pha
                       >            cmp_flag ~fn
2a45 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2a47 : f003            >        beq skip2285
                       >        trap            ;failed not equal (non zero)
2a49 : 206144          >        jsr sp4_trap_fail 
                       >
2a4c :                 >skip2285
                       >
2a4c : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
2a4d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2a4f : 48              >            pha         ;use stack to load status
2a50 : a97e            >            lda #$7e     ;precharge accu
2a52 : 28              >            plp
                        
2a53 : d11c                     cmp (ind1),y
                                tst_a $7e,~fzc
2a55 : 08              >            php         ;save flags
2a56 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2a58 : f003            >        beq skip2290
                       >        trap            ;failed not equal (non zero)
2a5a : 206144          >        jsr sp4_trap_fail 
                       >
2a5d :                 >skip2290
                       >
2a5d : 68              >            pla         ;load status
2a5e : 48              >            pha
                       >            cmp_flag ~fzc
2a5f : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2a61 : f003            >        beq skip2293
                       >        trap            ;failed not equal (non zero)
2a63 : 206144          >        jsr sp4_trap_fail 
                       >
2a66 :                 >skip2293
                       >
2a66 : 28              >            plp         ;restore status
                        
                                next_test
2a67 : ad0002          >            lda test_case   ;previous test
2a6a : c91c            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2a6c : f003            >        beq skip2296
                       >        trap            ;failed not equal (non zero)
2a6e : 206144          >        jsr sp4_trap_fail 
                       >
2a71 :                 >skip2296
                       >
001d =                 >test_num = test_num + 1
2a71 : a91d            >            lda #test_num   ;*** next tests' number
2a73 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing shifts - ASL LSR ROL ROR all addressing modes
                        ; shifts - accumulator
2a76 : a205                     ldx #5
2a78 :                  tasl
                                set_ax zps,0
                       >            load_flag 0
2a78 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2a7a : 48              >            pha         ;use stack to load status
2a7b : b509            >            lda zps,x    ;precharge accu
2a7d : 28              >            plp
                        
2a7e : 0a                       asl a
                                tst_ax rASL,fASL,0
2a7f : 08              >            php         ;save flags
2a80 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
2a83 : f003            >        beq skip2301
                       >        trap            ;failed not equal (non zero)
2a85 : 206144          >        jsr sp4_trap_fail 
                       >
2a88 :                 >skip2301
                       >
2a88 : 68              >            pla         ;load status
                       >            eor_flag 0
2a89 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2a8b : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne     ;
2a8e : f003            >        beq skip2304
                       >        trap            ;failed not equal (non zero)
2a90 : 206144          >        jsr sp4_trap_fail 
                       >
2a93 :                 >skip2304
                       >
                        
2a93 : ca                       dex
2a94 : 10e2                     bpl tasl
2a96 : a205                     ldx #5
2a98 :                  tasl1
                                set_ax zps,$ff
                       >            load_flag $ff
2a98 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2a9a : 48              >            pha         ;use stack to load status
2a9b : b509            >            lda zps,x    ;precharge accu
2a9d : 28              >            plp
                        
2a9e : 0a                       asl a
                                tst_ax rASL,fASL,$ff-fnzc
2a9f : 08              >            php         ;save flags
2aa0 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
2aa3 : f003            >        beq skip2309
                       >        trap            ;failed not equal (non zero)
2aa5 : 206144          >        jsr sp4_trap_fail 
                       >
2aa8 :                 >skip2309
                       >
2aa8 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2aa9 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2aab : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne     ;
2aae : f003            >        beq skip2312
                       >        trap            ;failed not equal (non zero)
2ab0 : 206144          >        jsr sp4_trap_fail 
                       >
2ab3 :                 >skip2312
                       >
                        
2ab3 : ca                       dex
2ab4 : 10e2                     bpl tasl1
                        
2ab6 : a205                     ldx #5
2ab8 :                  tlsr
                                set_ax zps,0
                       >            load_flag 0
2ab8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2aba : 48              >            pha         ;use stack to load status
2abb : b509            >            lda zps,x    ;precharge accu
2abd : 28              >            plp
                        
2abe : 4a                       lsr a
                                tst_ax rLSR,fLSR,0
2abf : 08              >            php         ;save flags
2ac0 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
2ac3 : f003            >        beq skip2317
                       >        trap            ;failed not equal (non zero)
2ac5 : 206144          >        jsr sp4_trap_fail 
                       >
2ac8 :                 >skip2317
                       >
2ac8 : 68              >            pla         ;load status
                       >            eor_flag 0
2ac9 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2acb : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne     ;
2ace : f003            >        beq skip2320
                       >        trap            ;failed not equal (non zero)
2ad0 : 206144          >        jsr sp4_trap_fail 
                       >
2ad3 :                 >skip2320
                       >
                        
2ad3 : ca                       dex
2ad4 : 10e2                     bpl tlsr
2ad6 : a205                     ldx #5
2ad8 :                  tlsr1
                                set_ax zps,$ff
                       >            load_flag $ff
2ad8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2ada : 48              >            pha         ;use stack to load status
2adb : b509            >            lda zps,x    ;precharge accu
2add : 28              >            plp
                        
2ade : 4a                       lsr a
                                tst_ax rLSR,fLSR,$ff-fnzc
2adf : 08              >            php         ;save flags
2ae0 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
2ae3 : f003            >        beq skip2325
                       >        trap            ;failed not equal (non zero)
2ae5 : 206144          >        jsr sp4_trap_fail 
                       >
2ae8 :                 >skip2325
                       >
2ae8 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2ae9 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2aeb : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne     ;
2aee : f003            >        beq skip2328
                       >        trap            ;failed not equal (non zero)
2af0 : 206144          >        jsr sp4_trap_fail 
                       >
2af3 :                 >skip2328
                       >
                        
2af3 : ca                       dex
2af4 : 10e2                     bpl tlsr1
                        
2af6 : a205                     ldx #5
2af8 :                  trol
                                set_ax zps,0
                       >            load_flag 0
2af8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2afa : 48              >            pha         ;use stack to load status
2afb : b509            >            lda zps,x    ;precharge accu
2afd : 28              >            plp
                        
2afe : 2a                       rol a
                                tst_ax rROL,fROL,0
2aff : 08              >            php         ;save flags
2b00 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
2b03 : f003            >        beq skip2333
                       >        trap            ;failed not equal (non zero)
2b05 : 206144          >        jsr sp4_trap_fail 
                       >
2b08 :                 >skip2333
                       >
2b08 : 68              >            pla         ;load status
                       >            eor_flag 0
2b09 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2b0b : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne     ;
2b0e : f003            >        beq skip2336
                       >        trap            ;failed not equal (non zero)
2b10 : 206144          >        jsr sp4_trap_fail 
                       >
2b13 :                 >skip2336
                       >
                        
2b13 : ca                       dex
2b14 : 10e2                     bpl trol
2b16 : a205                     ldx #5
2b18 :                  trol1
                                set_ax zps,$ff-fc
                       >            load_flag $ff-fc
2b18 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2b1a : 48              >            pha         ;use stack to load status
2b1b : b509            >            lda zps,x    ;precharge accu
2b1d : 28              >            plp
                        
2b1e : 2a                       rol a
                                tst_ax rROL,fROL,$ff-fnzc
2b1f : 08              >            php         ;save flags
2b20 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
2b23 : f003            >        beq skip2341
                       >        trap            ;failed not equal (non zero)
2b25 : 206144          >        jsr sp4_trap_fail 
                       >
2b28 :                 >skip2341
                       >
2b28 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2b29 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2b2b : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne     ;
2b2e : f003            >        beq skip2344
                       >        trap            ;failed not equal (non zero)
2b30 : 206144          >        jsr sp4_trap_fail 
                       >
2b33 :                 >skip2344
                       >
                        
2b33 : ca                       dex
2b34 : 10e2                     bpl trol1
                        
2b36 : a205                     ldx #5
2b38 :                  trolc
                                set_ax zps,fc
                       >            load_flag fc
2b38 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2b3a : 48              >            pha         ;use stack to load status
2b3b : b509            >            lda zps,x    ;precharge accu
2b3d : 28              >            plp
                        
2b3e : 2a                       rol a
                                tst_ax rROLc,fROLc,0
2b3f : 08              >            php         ;save flags
2b40 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
2b43 : f003            >        beq skip2349
                       >        trap            ;failed not equal (non zero)
2b45 : 206144          >        jsr sp4_trap_fail 
                       >
2b48 :                 >skip2349
                       >
2b48 : 68              >            pla         ;load status
                       >            eor_flag 0
2b49 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2b4b : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne     ;
2b4e : f003            >        beq skip2352
                       >        trap            ;failed not equal (non zero)
2b50 : 206144          >        jsr sp4_trap_fail 
                       >
2b53 :                 >skip2352
                       >
                        
2b53 : ca                       dex
2b54 : 10e2                     bpl trolc
2b56 : a205                     ldx #5
2b58 :                  trolc1
                                set_ax zps,$ff
                       >            load_flag $ff
2b58 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2b5a : 48              >            pha         ;use stack to load status
2b5b : b509            >            lda zps,x    ;precharge accu
2b5d : 28              >            plp
                        
2b5e : 2a                       rol a
                                tst_ax rROLc,fROLc,$ff-fnzc
2b5f : 08              >            php         ;save flags
2b60 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
2b63 : f003            >        beq skip2357
                       >        trap            ;failed not equal (non zero)
2b65 : 206144          >        jsr sp4_trap_fail 
                       >
2b68 :                 >skip2357
                       >
2b68 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2b69 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2b6b : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne     ;
2b6e : f003            >        beq skip2360
                       >        trap            ;failed not equal (non zero)
2b70 : 206144          >        jsr sp4_trap_fail 
                       >
2b73 :                 >skip2360
                       >
                        
2b73 : ca                       dex
2b74 : 10e2                     bpl trolc1
                        
2b76 : a205                     ldx #5
2b78 :                  tror
                                set_ax zps,0
                       >            load_flag 0
2b78 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2b7a : 48              >            pha         ;use stack to load status
2b7b : b509            >            lda zps,x    ;precharge accu
2b7d : 28              >            plp
                        
2b7e : 6a                       ror a
                                tst_ax rROR,fROR,0
2b7f : 08              >            php         ;save flags
2b80 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
2b83 : f003            >        beq skip2365
                       >        trap            ;failed not equal (non zero)
2b85 : 206144          >        jsr sp4_trap_fail 
                       >
2b88 :                 >skip2365
                       >
2b88 : 68              >            pla         ;load status
                       >            eor_flag 0
2b89 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2b8b : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne     ;
2b8e : f003            >        beq skip2368
                       >        trap            ;failed not equal (non zero)
2b90 : 206144          >        jsr sp4_trap_fail 
                       >
2b93 :                 >skip2368
                       >
                        
2b93 : ca                       dex
2b94 : 10e2                     bpl tror
2b96 : a205                     ldx #5
2b98 :                  tror1
                                set_ax zps,$ff-fc
                       >            load_flag $ff-fc
2b98 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2b9a : 48              >            pha         ;use stack to load status
2b9b : b509            >            lda zps,x    ;precharge accu
2b9d : 28              >            plp
                        
2b9e : 6a                       ror a
                                tst_ax rROR,fROR,$ff-fnzc
2b9f : 08              >            php         ;save flags
2ba0 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
2ba3 : f003            >        beq skip2373
                       >        trap            ;failed not equal (non zero)
2ba5 : 206144          >        jsr sp4_trap_fail 
                       >
2ba8 :                 >skip2373
                       >
2ba8 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2ba9 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2bab : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne     ;
2bae : f003            >        beq skip2376
                       >        trap            ;failed not equal (non zero)
2bb0 : 206144          >        jsr sp4_trap_fail 
                       >
2bb3 :                 >skip2376
                       >
                        
2bb3 : ca                       dex
2bb4 : 10e2                     bpl tror1
                        
2bb6 : a205                     ldx #5
2bb8 :                  trorc
                                set_ax zps,fc
                       >            load_flag fc
2bb8 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2bba : 48              >            pha         ;use stack to load status
2bbb : b509            >            lda zps,x    ;precharge accu
2bbd : 28              >            plp
                        
2bbe : 6a                       ror a
                                tst_ax rRORc,fRORc,0
2bbf : 08              >            php         ;save flags
2bc0 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
2bc3 : f003            >        beq skip2381
                       >        trap            ;failed not equal (non zero)
2bc5 : 206144          >        jsr sp4_trap_fail 
                       >
2bc8 :                 >skip2381
                       >
2bc8 : 68              >            pla         ;load status
                       >            eor_flag 0
2bc9 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2bcb : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne     ;
2bce : f003            >        beq skip2384
                       >        trap            ;failed not equal (non zero)
2bd0 : 206144          >        jsr sp4_trap_fail 
                       >
2bd3 :                 >skip2384
                       >
                        
2bd3 : ca                       dex
2bd4 : 10e2                     bpl trorc
2bd6 : a205                     ldx #5
2bd8 :                  trorc1
                                set_ax zps,$ff
                       >            load_flag $ff
2bd8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2bda : 48              >            pha         ;use stack to load status
2bdb : b509            >            lda zps,x    ;precharge accu
2bdd : 28              >            plp
                        
2bde : 6a                       ror a
                                tst_ax rRORc,fRORc,$ff-fnzc
2bdf : 08              >            php         ;save flags
2be0 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
2be3 : f003            >        beq skip2389
                       >        trap            ;failed not equal (non zero)
2be5 : 206144          >        jsr sp4_trap_fail 
                       >
2be8 :                 >skip2389
                       >
2be8 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2be9 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2beb : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne     ;
2bee : f003            >        beq skip2392
                       >        trap            ;failed not equal (non zero)
2bf0 : 206144          >        jsr sp4_trap_fail 
                       >
2bf3 :                 >skip2392
                       >
                        
2bf3 : ca                       dex
2bf4 : 10e2                     bpl trorc1
                                next_test
2bf6 : ad0002          >            lda test_case   ;previous test
2bf9 : c91d            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2bfb : f003            >        beq skip2395
                       >        trap            ;failed not equal (non zero)
2bfd : 206144          >        jsr sp4_trap_fail 
                       >
2c00 :                 >skip2395
                       >
001e =                 >test_num = test_num + 1
2c00 : a91e            >            lda #test_num   ;*** next tests' number
2c02 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - zeropage
2c05 : a205                     ldx #5
2c07 :                  tasl2
                                set_z zps,0
                       >            load_flag 0
2c07 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2c09 : 48              >            pha         ;use stack to load status
2c0a : b509            >            lda zps,x    ;load to zeropage
2c0c : 8502            >            sta zpt
2c0e : 28              >            plp
                        
2c0f : 0602                     asl zpt
                                tst_z rASL,fASL,0
2c11 : 08              >            php         ;save flags
2c12 : a502            >            lda zpt
2c14 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
2c17 : f003            >        beq skip2400
                       >        trap            ;failed not equal (non zero)
2c19 : 206144          >        jsr sp4_trap_fail 
                       >
2c1c :                 >skip2400
                       >
2c1c : 68              >            pla         ;load status
                       >            eor_flag 0
2c1d : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2c1f : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
2c22 : f003            >        beq skip2403
                       >        trap            ;failed not equal (non zero)
2c24 : 206144          >        jsr sp4_trap_fail 
                       >
2c27 :                 >skip2403
                       >
                        
2c27 : ca                       dex
2c28 : 10dd                     bpl tasl2
2c2a : a205                     ldx #5
2c2c :                  tasl3
                                set_z zps,$ff
                       >            load_flag $ff
2c2c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2c2e : 48              >            pha         ;use stack to load status
2c2f : b509            >            lda zps,x    ;load to zeropage
2c31 : 8502            >            sta zpt
2c33 : 28              >            plp
                        
2c34 : 0602                     asl zpt
                                tst_z rASL,fASL,$ff-fnzc
2c36 : 08              >            php         ;save flags
2c37 : a502            >            lda zpt
2c39 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
2c3c : f003            >        beq skip2408
                       >        trap            ;failed not equal (non zero)
2c3e : 206144          >        jsr sp4_trap_fail 
                       >
2c41 :                 >skip2408
                       >
2c41 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2c42 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2c44 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
2c47 : f003            >        beq skip2411
                       >        trap            ;failed not equal (non zero)
2c49 : 206144          >        jsr sp4_trap_fail 
                       >
2c4c :                 >skip2411
                       >
                        
2c4c : ca                       dex
2c4d : 10dd                     bpl tasl3
                        
2c4f : a205                     ldx #5
2c51 :                  tlsr2
                                set_z zps,0
                       >            load_flag 0
2c51 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2c53 : 48              >            pha         ;use stack to load status
2c54 : b509            >            lda zps,x    ;load to zeropage
2c56 : 8502            >            sta zpt
2c58 : 28              >            plp
                        
2c59 : 4602                     lsr zpt
                                tst_z rLSR,fLSR,0
2c5b : 08              >            php         ;save flags
2c5c : a502            >            lda zpt
2c5e : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
2c61 : f003            >        beq skip2416
                       >        trap            ;failed not equal (non zero)
2c63 : 206144          >        jsr sp4_trap_fail 
                       >
2c66 :                 >skip2416
                       >
2c66 : 68              >            pla         ;load status
                       >            eor_flag 0
2c67 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2c69 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
2c6c : f003            >        beq skip2419
                       >        trap            ;failed not equal (non zero)
2c6e : 206144          >        jsr sp4_trap_fail 
                       >
2c71 :                 >skip2419
                       >
                        
2c71 : ca                       dex
2c72 : 10dd                     bpl tlsr2
2c74 : a205                     ldx #5
2c76 :                  tlsr3
                                set_z zps,$ff
                       >            load_flag $ff
2c76 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2c78 : 48              >            pha         ;use stack to load status
2c79 : b509            >            lda zps,x    ;load to zeropage
2c7b : 8502            >            sta zpt
2c7d : 28              >            plp
                        
2c7e : 4602                     lsr zpt
                                tst_z rLSR,fLSR,$ff-fnzc
2c80 : 08              >            php         ;save flags
2c81 : a502            >            lda zpt
2c83 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
2c86 : f003            >        beq skip2424
                       >        trap            ;failed not equal (non zero)
2c88 : 206144          >        jsr sp4_trap_fail 
                       >
2c8b :                 >skip2424
                       >
2c8b : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2c8c : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2c8e : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
2c91 : f003            >        beq skip2427
                       >        trap            ;failed not equal (non zero)
2c93 : 206144          >        jsr sp4_trap_fail 
                       >
2c96 :                 >skip2427
                       >
                        
2c96 : ca                       dex
2c97 : 10dd                     bpl tlsr3
                        
2c99 : a205                     ldx #5
2c9b :                  trol2
                                set_z zps,0
                       >            load_flag 0
2c9b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2c9d : 48              >            pha         ;use stack to load status
2c9e : b509            >            lda zps,x    ;load to zeropage
2ca0 : 8502            >            sta zpt
2ca2 : 28              >            plp
                        
2ca3 : 2602                     rol zpt
                                tst_z rROL,fROL,0
2ca5 : 08              >            php         ;save flags
2ca6 : a502            >            lda zpt
2ca8 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
2cab : f003            >        beq skip2432
                       >        trap            ;failed not equal (non zero)
2cad : 206144          >        jsr sp4_trap_fail 
                       >
2cb0 :                 >skip2432
                       >
2cb0 : 68              >            pla         ;load status
                       >            eor_flag 0
2cb1 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2cb3 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
2cb6 : f003            >        beq skip2435
                       >        trap            ;failed not equal (non zero)
2cb8 : 206144          >        jsr sp4_trap_fail 
                       >
2cbb :                 >skip2435
                       >
                        
2cbb : ca                       dex
2cbc : 10dd                     bpl trol2
2cbe : a205                     ldx #5
2cc0 :                  trol3
                                set_z zps,$ff-fc
                       >            load_flag $ff-fc
2cc0 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2cc2 : 48              >            pha         ;use stack to load status
2cc3 : b509            >            lda zps,x    ;load to zeropage
2cc5 : 8502            >            sta zpt
2cc7 : 28              >            plp
                        
2cc8 : 2602                     rol zpt
                                tst_z rROL,fROL,$ff-fnzc
2cca : 08              >            php         ;save flags
2ccb : a502            >            lda zpt
2ccd : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
2cd0 : f003            >        beq skip2440
                       >        trap            ;failed not equal (non zero)
2cd2 : 206144          >        jsr sp4_trap_fail 
                       >
2cd5 :                 >skip2440
                       >
2cd5 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2cd6 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2cd8 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
2cdb : f003            >        beq skip2443
                       >        trap            ;failed not equal (non zero)
2cdd : 206144          >        jsr sp4_trap_fail 
                       >
2ce0 :                 >skip2443
                       >
                        
2ce0 : ca                       dex
2ce1 : 10dd                     bpl trol3
                        
2ce3 : a205                     ldx #5
2ce5 :                  trolc2
                                set_z zps,fc
                       >            load_flag fc
2ce5 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2ce7 : 48              >            pha         ;use stack to load status
2ce8 : b509            >            lda zps,x    ;load to zeropage
2cea : 8502            >            sta zpt
2cec : 28              >            plp
                        
2ced : 2602                     rol zpt
                                tst_z rROLc,fROLc,0
2cef : 08              >            php         ;save flags
2cf0 : a502            >            lda zpt
2cf2 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
2cf5 : f003            >        beq skip2448
                       >        trap            ;failed not equal (non zero)
2cf7 : 206144          >        jsr sp4_trap_fail 
                       >
2cfa :                 >skip2448
                       >
2cfa : 68              >            pla         ;load status
                       >            eor_flag 0
2cfb : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2cfd : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2d00 : f003            >        beq skip2451
                       >        trap            ;failed not equal (non zero)
2d02 : 206144          >        jsr sp4_trap_fail 
                       >
2d05 :                 >skip2451
                       >
                        
2d05 : ca                       dex
2d06 : 10dd                     bpl trolc2
2d08 : a205                     ldx #5
2d0a :                  trolc3
                                set_z zps,$ff
                       >            load_flag $ff
2d0a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2d0c : 48              >            pha         ;use stack to load status
2d0d : b509            >            lda zps,x    ;load to zeropage
2d0f : 8502            >            sta zpt
2d11 : 28              >            plp
                        
2d12 : 2602                     rol zpt
                                tst_z rROLc,fROLc,$ff-fnzc
2d14 : 08              >            php         ;save flags
2d15 : a502            >            lda zpt
2d17 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
2d1a : f003            >        beq skip2456
                       >        trap            ;failed not equal (non zero)
2d1c : 206144          >        jsr sp4_trap_fail 
                       >
2d1f :                 >skip2456
                       >
2d1f : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2d20 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2d22 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2d25 : f003            >        beq skip2459
                       >        trap            ;failed not equal (non zero)
2d27 : 206144          >        jsr sp4_trap_fail 
                       >
2d2a :                 >skip2459
                       >
                        
2d2a : ca                       dex
2d2b : 10dd                     bpl trolc3
                        
2d2d : a205                     ldx #5
2d2f :                  tror2
                                set_z zps,0
                       >            load_flag 0
2d2f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2d31 : 48              >            pha         ;use stack to load status
2d32 : b509            >            lda zps,x    ;load to zeropage
2d34 : 8502            >            sta zpt
2d36 : 28              >            plp
                        
2d37 : 6602                     ror zpt
                                tst_z rROR,fROR,0
2d39 : 08              >            php         ;save flags
2d3a : a502            >            lda zpt
2d3c : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
2d3f : f003            >        beq skip2464
                       >        trap            ;failed not equal (non zero)
2d41 : 206144          >        jsr sp4_trap_fail 
                       >
2d44 :                 >skip2464
                       >
2d44 : 68              >            pla         ;load status
                       >            eor_flag 0
2d45 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2d47 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
2d4a : f003            >        beq skip2467
                       >        trap            ;failed not equal (non zero)
2d4c : 206144          >        jsr sp4_trap_fail 
                       >
2d4f :                 >skip2467
                       >
                        
2d4f : ca                       dex
2d50 : 10dd                     bpl tror2
2d52 : a205                     ldx #5
2d54 :                  tror3
                                set_z zps,$ff-fc
                       >            load_flag $ff-fc
2d54 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2d56 : 48              >            pha         ;use stack to load status
2d57 : b509            >            lda zps,x    ;load to zeropage
2d59 : 8502            >            sta zpt
2d5b : 28              >            plp
                        
2d5c : 6602                     ror zpt
                                tst_z rROR,fROR,$ff-fnzc
2d5e : 08              >            php         ;save flags
2d5f : a502            >            lda zpt
2d61 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
2d64 : f003            >        beq skip2472
                       >        trap            ;failed not equal (non zero)
2d66 : 206144          >        jsr sp4_trap_fail 
                       >
2d69 :                 >skip2472
                       >
2d69 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2d6a : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2d6c : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
2d6f : f003            >        beq skip2475
                       >        trap            ;failed not equal (non zero)
2d71 : 206144          >        jsr sp4_trap_fail 
                       >
2d74 :                 >skip2475
                       >
                        
2d74 : ca                       dex
2d75 : 10dd                     bpl tror3
                        
2d77 : a205                     ldx #5
2d79 :                  trorc2
                                set_z zps,fc
                       >            load_flag fc
2d79 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2d7b : 48              >            pha         ;use stack to load status
2d7c : b509            >            lda zps,x    ;load to zeropage
2d7e : 8502            >            sta zpt
2d80 : 28              >            plp
                        
2d81 : 6602                     ror zpt
                                tst_z rRORc,fRORc,0
2d83 : 08              >            php         ;save flags
2d84 : a502            >            lda zpt
2d86 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
2d89 : f003            >        beq skip2480
                       >        trap            ;failed not equal (non zero)
2d8b : 206144          >        jsr sp4_trap_fail 
                       >
2d8e :                 >skip2480
                       >
2d8e : 68              >            pla         ;load status
                       >            eor_flag 0
2d8f : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2d91 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
2d94 : f003            >        beq skip2483
                       >        trap            ;failed not equal (non zero)
2d96 : 206144          >        jsr sp4_trap_fail 
                       >
2d99 :                 >skip2483
                       >
                        
2d99 : ca                       dex
2d9a : 10dd                     bpl trorc2
2d9c : a205                     ldx #5
2d9e :                  trorc3
                                set_z zps,$ff
                       >            load_flag $ff
2d9e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2da0 : 48              >            pha         ;use stack to load status
2da1 : b509            >            lda zps,x    ;load to zeropage
2da3 : 8502            >            sta zpt
2da5 : 28              >            plp
                        
2da6 : 6602                     ror zpt
                                tst_z rRORc,fRORc,$ff-fnzc
2da8 : 08              >            php         ;save flags
2da9 : a502            >            lda zpt
2dab : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
2dae : f003            >        beq skip2488
                       >        trap            ;failed not equal (non zero)
2db0 : 206144          >        jsr sp4_trap_fail 
                       >
2db3 :                 >skip2488
                       >
2db3 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2db4 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2db6 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
2db9 : f003            >        beq skip2491
                       >        trap            ;failed not equal (non zero)
2dbb : 206144          >        jsr sp4_trap_fail 
                       >
2dbe :                 >skip2491
                       >
                        
2dbe : ca                       dex
2dbf : 10dd                     bpl trorc3
                                next_test
2dc1 : ad0002          >            lda test_case   ;previous test
2dc4 : c91e            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2dc6 : f003            >        beq skip2494
                       >        trap            ;failed not equal (non zero)
2dc8 : 206144          >        jsr sp4_trap_fail 
                       >
2dcb :                 >skip2494
                       >
001f =                 >test_num = test_num + 1
2dcb : a91f            >            lda #test_num   ;*** next tests' number
2dcd : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - absolute
2dd0 : a205                     ldx #5
2dd2 :                  tasl4
                                set_abs zps,0
                       >            load_flag 0
2dd2 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2dd4 : 48              >            pha         ;use stack to load status
2dd5 : b509            >            lda zps,x    ;load to memory
2dd7 : 8d0302          >            sta abst
2dda : 28              >            plp
                        
2ddb : 0e0302                   asl abst
                                tst_abs rASL,fASL,0
2dde : 08              >            php         ;save flags
2ddf : ad0302          >            lda abst
2de2 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
2de5 : f003            >        beq skip2499
                       >        trap            ;failed not equal (non zero)
2de7 : 206144          >        jsr sp4_trap_fail 
                       >
2dea :                 >skip2499
                       >
2dea : 68              >            pla         ;load status
                       >            eor_flag 0
2deb : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2ded : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
2df0 : f003            >        beq skip2502
                       >        trap            ;failed not equal (non zero)
2df2 : 206144          >        jsr sp4_trap_fail 
                       >
2df5 :                 >skip2502
                       >
                        
2df5 : ca                       dex
2df6 : 10da                     bpl tasl4
2df8 : a205                     ldx #5
2dfa :                  tasl5
                                set_abs zps,$ff
                       >            load_flag $ff
2dfa : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2dfc : 48              >            pha         ;use stack to load status
2dfd : b509            >            lda zps,x    ;load to memory
2dff : 8d0302          >            sta abst
2e02 : 28              >            plp
                        
2e03 : 0e0302                   asl abst
                                tst_abs rASL,fASL,$ff-fnzc
2e06 : 08              >            php         ;save flags
2e07 : ad0302          >            lda abst
2e0a : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
2e0d : f003            >        beq skip2507
                       >        trap            ;failed not equal (non zero)
2e0f : 206144          >        jsr sp4_trap_fail 
                       >
2e12 :                 >skip2507
                       >
2e12 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2e13 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2e15 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
2e18 : f003            >        beq skip2510
                       >        trap            ;failed not equal (non zero)
2e1a : 206144          >        jsr sp4_trap_fail 
                       >
2e1d :                 >skip2510
                       >
                        
2e1d : ca                       dex
2e1e : 10da                     bpl tasl5
                        
2e20 : a205                     ldx #5
2e22 :                  tlsr4
                                set_abs zps,0
                       >            load_flag 0
2e22 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2e24 : 48              >            pha         ;use stack to load status
2e25 : b509            >            lda zps,x    ;load to memory
2e27 : 8d0302          >            sta abst
2e2a : 28              >            plp
                        
2e2b : 4e0302                   lsr abst
                                tst_abs rLSR,fLSR,0
2e2e : 08              >            php         ;save flags
2e2f : ad0302          >            lda abst
2e32 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
2e35 : f003            >        beq skip2515
                       >        trap            ;failed not equal (non zero)
2e37 : 206144          >        jsr sp4_trap_fail 
                       >
2e3a :                 >skip2515
                       >
2e3a : 68              >            pla         ;load status
                       >            eor_flag 0
2e3b : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2e3d : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
2e40 : f003            >        beq skip2518
                       >        trap            ;failed not equal (non zero)
2e42 : 206144          >        jsr sp4_trap_fail 
                       >
2e45 :                 >skip2518
                       >
                        
2e45 : ca                       dex
2e46 : 10da                     bpl tlsr4
2e48 : a205                     ldx #5
2e4a :                  tlsr5
                                set_abs zps,$ff
                       >            load_flag $ff
2e4a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2e4c : 48              >            pha         ;use stack to load status
2e4d : b509            >            lda zps,x    ;load to memory
2e4f : 8d0302          >            sta abst
2e52 : 28              >            plp
                        
2e53 : 4e0302                   lsr abst
                                tst_abs rLSR,fLSR,$ff-fnzc
2e56 : 08              >            php         ;save flags
2e57 : ad0302          >            lda abst
2e5a : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
2e5d : f003            >        beq skip2523
                       >        trap            ;failed not equal (non zero)
2e5f : 206144          >        jsr sp4_trap_fail 
                       >
2e62 :                 >skip2523
                       >
2e62 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2e63 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2e65 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
2e68 : f003            >        beq skip2526
                       >        trap            ;failed not equal (non zero)
2e6a : 206144          >        jsr sp4_trap_fail 
                       >
2e6d :                 >skip2526
                       >
                        
2e6d : ca                       dex
2e6e : 10da                     bpl tlsr5
                        
2e70 : a205                     ldx #5
2e72 :                  trol4
                                set_abs zps,0
                       >            load_flag 0
2e72 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2e74 : 48              >            pha         ;use stack to load status
2e75 : b509            >            lda zps,x    ;load to memory
2e77 : 8d0302          >            sta abst
2e7a : 28              >            plp
                        
2e7b : 2e0302                   rol abst
                                tst_abs rROL,fROL,0
2e7e : 08              >            php         ;save flags
2e7f : ad0302          >            lda abst
2e82 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
2e85 : f003            >        beq skip2531
                       >        trap            ;failed not equal (non zero)
2e87 : 206144          >        jsr sp4_trap_fail 
                       >
2e8a :                 >skip2531
                       >
2e8a : 68              >            pla         ;load status
                       >            eor_flag 0
2e8b : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2e8d : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
2e90 : f003            >        beq skip2534
                       >        trap            ;failed not equal (non zero)
2e92 : 206144          >        jsr sp4_trap_fail 
                       >
2e95 :                 >skip2534
                       >
                        
2e95 : ca                       dex
2e96 : 10da                     bpl trol4
2e98 : a205                     ldx #5
2e9a :                  trol5
                                set_abs zps,$ff-fc
                       >            load_flag $ff-fc
2e9a : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2e9c : 48              >            pha         ;use stack to load status
2e9d : b509            >            lda zps,x    ;load to memory
2e9f : 8d0302          >            sta abst
2ea2 : 28              >            plp
                        
2ea3 : 2e0302                   rol abst
                                tst_abs rROL,fROL,$ff-fnzc
2ea6 : 08              >            php         ;save flags
2ea7 : ad0302          >            lda abst
2eaa : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
2ead : f003            >        beq skip2539
                       >        trap            ;failed not equal (non zero)
2eaf : 206144          >        jsr sp4_trap_fail 
                       >
2eb2 :                 >skip2539
                       >
2eb2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2eb3 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2eb5 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
2eb8 : f003            >        beq skip2542
                       >        trap            ;failed not equal (non zero)
2eba : 206144          >        jsr sp4_trap_fail 
                       >
2ebd :                 >skip2542
                       >
                        
2ebd : ca                       dex
2ebe : 10da                     bpl trol5
                        
2ec0 : a205                     ldx #5
2ec2 :                  trolc4
                                set_abs zps,fc
                       >            load_flag fc
2ec2 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2ec4 : 48              >            pha         ;use stack to load status
2ec5 : b509            >            lda zps,x    ;load to memory
2ec7 : 8d0302          >            sta abst
2eca : 28              >            plp
                        
2ecb : 2e0302                   rol abst
                                tst_abs rROLc,fROLc,0
2ece : 08              >            php         ;save flags
2ecf : ad0302          >            lda abst
2ed2 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
2ed5 : f003            >        beq skip2547
                       >        trap            ;failed not equal (non zero)
2ed7 : 206144          >        jsr sp4_trap_fail 
                       >
2eda :                 >skip2547
                       >
2eda : 68              >            pla         ;load status
                       >            eor_flag 0
2edb : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2edd : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2ee0 : f003            >        beq skip2550
                       >        trap            ;failed not equal (non zero)
2ee2 : 206144          >        jsr sp4_trap_fail 
                       >
2ee5 :                 >skip2550
                       >
                        
2ee5 : ca                       dex
2ee6 : 10da                     bpl trolc4
2ee8 : a205                     ldx #5
2eea :                  trolc5
                                set_abs zps,$ff
                       >            load_flag $ff
2eea : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2eec : 48              >            pha         ;use stack to load status
2eed : b509            >            lda zps,x    ;load to memory
2eef : 8d0302          >            sta abst
2ef2 : 28              >            plp
                        
2ef3 : 2e0302                   rol abst
                                tst_abs rROLc,fROLc,$ff-fnzc
2ef6 : 08              >            php         ;save flags
2ef7 : ad0302          >            lda abst
2efa : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
2efd : f003            >        beq skip2555
                       >        trap            ;failed not equal (non zero)
2eff : 206144          >        jsr sp4_trap_fail 
                       >
2f02 :                 >skip2555
                       >
2f02 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2f03 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2f05 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2f08 : f003            >        beq skip2558
                       >        trap            ;failed not equal (non zero)
2f0a : 206144          >        jsr sp4_trap_fail 
                       >
2f0d :                 >skip2558
                       >
                        
2f0d : ca                       dex
2f0e : 10da                     bpl trolc5
                        
2f10 : a205                     ldx #5
2f12 :                  tror4
                                set_abs zps,0
                       >            load_flag 0
2f12 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2f14 : 48              >            pha         ;use stack to load status
2f15 : b509            >            lda zps,x    ;load to memory
2f17 : 8d0302          >            sta abst
2f1a : 28              >            plp
                        
2f1b : 6e0302                   ror abst
                                tst_abs rROR,fROR,0
2f1e : 08              >            php         ;save flags
2f1f : ad0302          >            lda abst
2f22 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
2f25 : f003            >        beq skip2563
                       >        trap            ;failed not equal (non zero)
2f27 : 206144          >        jsr sp4_trap_fail 
                       >
2f2a :                 >skip2563
                       >
2f2a : 68              >            pla         ;load status
                       >            eor_flag 0
2f2b : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2f2d : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
2f30 : f003            >        beq skip2566
                       >        trap            ;failed not equal (non zero)
2f32 : 206144          >        jsr sp4_trap_fail 
                       >
2f35 :                 >skip2566
                       >
                        
2f35 : ca                       dex
2f36 : 10da                     bpl tror4
2f38 : a205                     ldx #5
2f3a :                  tror5
                                set_abs zps,$ff-fc
                       >            load_flag $ff-fc
2f3a : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2f3c : 48              >            pha         ;use stack to load status
2f3d : b509            >            lda zps,x    ;load to memory
2f3f : 8d0302          >            sta abst
2f42 : 28              >            plp
                        
2f43 : 6e0302                   ror abst
                                tst_abs rROR,fROR,$ff-fnzc
2f46 : 08              >            php         ;save flags
2f47 : ad0302          >            lda abst
2f4a : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
2f4d : f003            >        beq skip2571
                       >        trap            ;failed not equal (non zero)
2f4f : 206144          >        jsr sp4_trap_fail 
                       >
2f52 :                 >skip2571
                       >
2f52 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2f53 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2f55 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
2f58 : f003            >        beq skip2574
                       >        trap            ;failed not equal (non zero)
2f5a : 206144          >        jsr sp4_trap_fail 
                       >
2f5d :                 >skip2574
                       >
                        
2f5d : ca                       dex
2f5e : 10da                     bpl tror5
                        
2f60 : a205                     ldx #5
2f62 :                  trorc4
                                set_abs zps,fc
                       >            load_flag fc
2f62 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2f64 : 48              >            pha         ;use stack to load status
2f65 : b509            >            lda zps,x    ;load to memory
2f67 : 8d0302          >            sta abst
2f6a : 28              >            plp
                        
2f6b : 6e0302                   ror abst
                                tst_abs rRORc,fRORc,0
2f6e : 08              >            php         ;save flags
2f6f : ad0302          >            lda abst
2f72 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
2f75 : f003            >        beq skip2579
                       >        trap            ;failed not equal (non zero)
2f77 : 206144          >        jsr sp4_trap_fail 
                       >
2f7a :                 >skip2579
                       >
2f7a : 68              >            pla         ;load status
                       >            eor_flag 0
2f7b : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2f7d : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
2f80 : f003            >        beq skip2582
                       >        trap            ;failed not equal (non zero)
2f82 : 206144          >        jsr sp4_trap_fail 
                       >
2f85 :                 >skip2582
                       >
                        
2f85 : ca                       dex
2f86 : 10da                     bpl trorc4
2f88 : a205                     ldx #5
2f8a :                  trorc5
                                set_abs zps,$ff
                       >            load_flag $ff
2f8a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2f8c : 48              >            pha         ;use stack to load status
2f8d : b509            >            lda zps,x    ;load to memory
2f8f : 8d0302          >            sta abst
2f92 : 28              >            plp
                        
2f93 : 6e0302                   ror abst
                                tst_abs rRORc,fRORc,$ff-fnzc
2f96 : 08              >            php         ;save flags
2f97 : ad0302          >            lda abst
2f9a : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
2f9d : f003            >        beq skip2587
                       >        trap            ;failed not equal (non zero)
2f9f : 206144          >        jsr sp4_trap_fail 
                       >
2fa2 :                 >skip2587
                       >
2fa2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2fa3 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2fa5 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
2fa8 : f003            >        beq skip2590
                       >        trap            ;failed not equal (non zero)
2faa : 206144          >        jsr sp4_trap_fail 
                       >
2fad :                 >skip2590
                       >
                        
2fad : ca                       dex
2fae : 10da                     bpl trorc5
                                next_test
2fb0 : ad0002          >            lda test_case   ;previous test
2fb3 : c91f            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2fb5 : f003            >        beq skip2593
                       >        trap            ;failed not equal (non zero)
2fb7 : 206144          >        jsr sp4_trap_fail 
                       >
2fba :                 >skip2593
                       >
0020 =                 >test_num = test_num + 1
2fba : a920            >            lda #test_num   ;*** next tests' number
2fbc : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - zp indexed
2fbf : a205                     ldx #5
2fc1 :                  tasl6
                                set_zx zps,0
                       >            load_flag 0
2fc1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2fc3 : 48              >            pha         ;use stack to load status
2fc4 : b509            >            lda zps,x    ;load to indexed zeropage
2fc6 : 9502            >            sta zpt,x
2fc8 : 28              >            plp
                        
2fc9 : 1602                     asl zpt,x
                                tst_zx rASL,fASL,0
2fcb : 08              >            php         ;save flags
2fcc : b502            >            lda zpt,x
2fce : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
2fd1 : f003            >        beq skip2598
                       >        trap            ;failed not equal (non zero)
2fd3 : 206144          >        jsr sp4_trap_fail 
                       >
2fd6 :                 >skip2598
                       >
2fd6 : 68              >            pla         ;load status
                       >            eor_flag 0
2fd7 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2fd9 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
2fdc : f003            >        beq skip2601
                       >        trap            ;failed not equal (non zero)
2fde : 206144          >        jsr sp4_trap_fail 
                       >
2fe1 :                 >skip2601
                       >
                        
2fe1 : ca                       dex
2fe2 : 10dd                     bpl tasl6
2fe4 : a205                     ldx #5
2fe6 :                  tasl7
                                set_zx zps,$ff
                       >            load_flag $ff
2fe6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2fe8 : 48              >            pha         ;use stack to load status
2fe9 : b509            >            lda zps,x    ;load to indexed zeropage
2feb : 9502            >            sta zpt,x
2fed : 28              >            plp
                        
2fee : 1602                     asl zpt,x
                                tst_zx rASL,fASL,$ff-fnzc
2ff0 : 08              >            php         ;save flags
2ff1 : b502            >            lda zpt,x
2ff3 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
2ff6 : f003            >        beq skip2606
                       >        trap            ;failed not equal (non zero)
2ff8 : 206144          >        jsr sp4_trap_fail 
                       >
2ffb :                 >skip2606
                       >
2ffb : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2ffc : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2ffe : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
3001 : f003            >        beq skip2609
                       >        trap            ;failed not equal (non zero)
3003 : 206144          >        jsr sp4_trap_fail 
                       >
3006 :                 >skip2609
                       >
                        
3006 : ca                       dex
3007 : 10dd                     bpl tasl7
                        
3009 : a205                     ldx #5
300b :                  tlsr6
                                set_zx zps,0
                       >            load_flag 0
300b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
300d : 48              >            pha         ;use stack to load status
300e : b509            >            lda zps,x    ;load to indexed zeropage
3010 : 9502            >            sta zpt,x
3012 : 28              >            plp
                        
3013 : 5602                     lsr zpt,x
                                tst_zx rLSR,fLSR,0
3015 : 08              >            php         ;save flags
3016 : b502            >            lda zpt,x
3018 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
301b : f003            >        beq skip2614
                       >        trap            ;failed not equal (non zero)
301d : 206144          >        jsr sp4_trap_fail 
                       >
3020 :                 >skip2614
                       >
3020 : 68              >            pla         ;load status
                       >            eor_flag 0
3021 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3023 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
3026 : f003            >        beq skip2617
                       >        trap            ;failed not equal (non zero)
3028 : 206144          >        jsr sp4_trap_fail 
                       >
302b :                 >skip2617
                       >
                        
302b : ca                       dex
302c : 10dd                     bpl tlsr6
302e : a205                     ldx #5
3030 :                  tlsr7
                                set_zx zps,$ff
                       >            load_flag $ff
3030 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3032 : 48              >            pha         ;use stack to load status
3033 : b509            >            lda zps,x    ;load to indexed zeropage
3035 : 9502            >            sta zpt,x
3037 : 28              >            plp
                        
3038 : 5602                     lsr zpt,x
                                tst_zx rLSR,fLSR,$ff-fnzc
303a : 08              >            php         ;save flags
303b : b502            >            lda zpt,x
303d : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
3040 : f003            >        beq skip2622
                       >        trap            ;failed not equal (non zero)
3042 : 206144          >        jsr sp4_trap_fail 
                       >
3045 :                 >skip2622
                       >
3045 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
3046 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
3048 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
304b : f003            >        beq skip2625
                       >        trap            ;failed not equal (non zero)
304d : 206144          >        jsr sp4_trap_fail 
                       >
3050 :                 >skip2625
                       >
                        
3050 : ca                       dex
3051 : 10dd                     bpl tlsr7
                        
3053 : a205                     ldx #5
3055 :                  trol6
                                set_zx zps,0
                       >            load_flag 0
3055 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3057 : 48              >            pha         ;use stack to load status
3058 : b509            >            lda zps,x    ;load to indexed zeropage
305a : 9502            >            sta zpt,x
305c : 28              >            plp
                        
305d : 3602                     rol zpt,x
                                tst_zx rROL,fROL,0
305f : 08              >            php         ;save flags
3060 : b502            >            lda zpt,x
3062 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
3065 : f003            >        beq skip2630
                       >        trap            ;failed not equal (non zero)
3067 : 206144          >        jsr sp4_trap_fail 
                       >
306a :                 >skip2630
                       >
306a : 68              >            pla         ;load status
                       >            eor_flag 0
306b : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
306d : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
3070 : f003            >        beq skip2633
                       >        trap            ;failed not equal (non zero)
3072 : 206144          >        jsr sp4_trap_fail 
                       >
3075 :                 >skip2633
                       >
                        
3075 : ca                       dex
3076 : 10dd                     bpl trol6
3078 : a205                     ldx #5
307a :                  trol7
                                set_zx zps,$ff-fc
                       >            load_flag $ff-fc
307a : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
307c : 48              >            pha         ;use stack to load status
307d : b509            >            lda zps,x    ;load to indexed zeropage
307f : 9502            >            sta zpt,x
3081 : 28              >            plp
                        
3082 : 3602                     rol zpt,x
                                tst_zx rROL,fROL,$ff-fnzc
3084 : 08              >            php         ;save flags
3085 : b502            >            lda zpt,x
3087 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
308a : f003            >        beq skip2638
                       >        trap            ;failed not equal (non zero)
308c : 206144          >        jsr sp4_trap_fail 
                       >
308f :                 >skip2638
                       >
308f : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
3090 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
3092 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
3095 : f003            >        beq skip2641
                       >        trap            ;failed not equal (non zero)
3097 : 206144          >        jsr sp4_trap_fail 
                       >
309a :                 >skip2641
                       >
                        
309a : ca                       dex
309b : 10dd                     bpl trol7
                        
309d : a205                     ldx #5
309f :                  trolc6
                                set_zx zps,fc
                       >            load_flag fc
309f : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
30a1 : 48              >            pha         ;use stack to load status
30a2 : b509            >            lda zps,x    ;load to indexed zeropage
30a4 : 9502            >            sta zpt,x
30a6 : 28              >            plp
                        
30a7 : 3602                     rol zpt,x
                                tst_zx rROLc,fROLc,0
30a9 : 08              >            php         ;save flags
30aa : b502            >            lda zpt,x
30ac : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
30af : f003            >        beq skip2646
                       >        trap            ;failed not equal (non zero)
30b1 : 206144          >        jsr sp4_trap_fail 
                       >
30b4 :                 >skip2646
                       >
30b4 : 68              >            pla         ;load status
                       >            eor_flag 0
30b5 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
30b7 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
30ba : f003            >        beq skip2649
                       >        trap            ;failed not equal (non zero)
30bc : 206144          >        jsr sp4_trap_fail 
                       >
30bf :                 >skip2649
                       >
                        
30bf : ca                       dex
30c0 : 10dd                     bpl trolc6
30c2 : a205                     ldx #5
30c4 :                  trolc7
                                set_zx zps,$ff
                       >            load_flag $ff
30c4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
30c6 : 48              >            pha         ;use stack to load status
30c7 : b509            >            lda zps,x    ;load to indexed zeropage
30c9 : 9502            >            sta zpt,x
30cb : 28              >            plp
                        
30cc : 3602                     rol zpt,x
                                tst_zx rROLc,fROLc,$ff-fnzc
30ce : 08              >            php         ;save flags
30cf : b502            >            lda zpt,x
30d1 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
30d4 : f003            >        beq skip2654
                       >        trap            ;failed not equal (non zero)
30d6 : 206144          >        jsr sp4_trap_fail 
                       >
30d9 :                 >skip2654
                       >
30d9 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
30da : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
30dc : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
30df : f003            >        beq skip2657
                       >        trap            ;failed not equal (non zero)
30e1 : 206144          >        jsr sp4_trap_fail 
                       >
30e4 :                 >skip2657
                       >
                        
30e4 : ca                       dex
30e5 : 10dd                     bpl trolc7
                        
30e7 : a205                     ldx #5
30e9 :                  tror6
                                set_zx zps,0
                       >            load_flag 0
30e9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
30eb : 48              >            pha         ;use stack to load status
30ec : b509            >            lda zps,x    ;load to indexed zeropage
30ee : 9502            >            sta zpt,x
30f0 : 28              >            plp
                        
30f1 : 7602                     ror zpt,x
                                tst_zx rROR,fROR,0
30f3 : 08              >            php         ;save flags
30f4 : b502            >            lda zpt,x
30f6 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
30f9 : f003            >        beq skip2662
                       >        trap            ;failed not equal (non zero)
30fb : 206144          >        jsr sp4_trap_fail 
                       >
30fe :                 >skip2662
                       >
30fe : 68              >            pla         ;load status
                       >            eor_flag 0
30ff : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3101 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
3104 : f003            >        beq skip2665
                       >        trap            ;failed not equal (non zero)
3106 : 206144          >        jsr sp4_trap_fail 
                       >
3109 :                 >skip2665
                       >
                        
3109 : ca                       dex
310a : 10dd                     bpl tror6
310c : a205                     ldx #5
310e :                  tror7
                                set_zx zps,$ff-fc
                       >            load_flag $ff-fc
310e : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
3110 : 48              >            pha         ;use stack to load status
3111 : b509            >            lda zps,x    ;load to indexed zeropage
3113 : 9502            >            sta zpt,x
3115 : 28              >            plp
                        
3116 : 7602                     ror zpt,x
                                tst_zx rROR,fROR,$ff-fnzc
3118 : 08              >            php         ;save flags
3119 : b502            >            lda zpt,x
311b : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
311e : f003            >        beq skip2670
                       >        trap            ;failed not equal (non zero)
3120 : 206144          >        jsr sp4_trap_fail 
                       >
3123 :                 >skip2670
                       >
3123 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
3124 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
3126 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
3129 : f003            >        beq skip2673
                       >        trap            ;failed not equal (non zero)
312b : 206144          >        jsr sp4_trap_fail 
                       >
312e :                 >skip2673
                       >
                        
312e : ca                       dex
312f : 10dd                     bpl tror7
                        
3131 : a205                     ldx #5
3133 :                  trorc6
                                set_zx zps,fc
                       >            load_flag fc
3133 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
3135 : 48              >            pha         ;use stack to load status
3136 : b509            >            lda zps,x    ;load to indexed zeropage
3138 : 9502            >            sta zpt,x
313a : 28              >            plp
                        
313b : 7602                     ror zpt,x
                                tst_zx rRORc,fRORc,0
313d : 08              >            php         ;save flags
313e : b502            >            lda zpt,x
3140 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
3143 : f003            >        beq skip2678
                       >        trap            ;failed not equal (non zero)
3145 : 206144          >        jsr sp4_trap_fail 
                       >
3148 :                 >skip2678
                       >
3148 : 68              >            pla         ;load status
                       >            eor_flag 0
3149 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
314b : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
314e : f003            >        beq skip2681
                       >        trap            ;failed not equal (non zero)
3150 : 206144          >        jsr sp4_trap_fail 
                       >
3153 :                 >skip2681
                       >
                        
3153 : ca                       dex
3154 : 10dd                     bpl trorc6
3156 : a205                     ldx #5
3158 :                  trorc7
                                set_zx zps,$ff
                       >            load_flag $ff
3158 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
315a : 48              >            pha         ;use stack to load status
315b : b509            >            lda zps,x    ;load to indexed zeropage
315d : 9502            >            sta zpt,x
315f : 28              >            plp
                        
3160 : 7602                     ror zpt,x
                                tst_zx rRORc,fRORc,$ff-fnzc
3162 : 08              >            php         ;save flags
3163 : b502            >            lda zpt,x
3165 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
3168 : f003            >        beq skip2686
                       >        trap            ;failed not equal (non zero)
316a : 206144          >        jsr sp4_trap_fail 
                       >
316d :                 >skip2686
                       >
316d : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
316e : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
3170 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
3173 : f003            >        beq skip2689
                       >        trap            ;failed not equal (non zero)
3175 : 206144          >        jsr sp4_trap_fail 
                       >
3178 :                 >skip2689
                       >
                        
3178 : ca                       dex
3179 : 10dd                     bpl trorc7
                                next_test
317b : ad0002          >            lda test_case   ;previous test
317e : c920            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3180 : f003            >        beq skip2692
                       >        trap            ;failed not equal (non zero)
3182 : 206144          >        jsr sp4_trap_fail 
                       >
3185 :                 >skip2692
                       >
0021 =                 >test_num = test_num + 1
3185 : a921            >            lda #test_num   ;*** next tests' number
3187 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; shifts - abs indexed
318a : a205                     ldx #5
318c :                  tasl8
                                set_absx zps,0
                       >            load_flag 0
318c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
318e : 48              >            pha         ;use stack to load status
318f : b509            >            lda zps,x    ;load to indexed memory
3191 : 9d0302          >            sta abst,x
3194 : 28              >            plp
                        
3195 : 1e0302                   asl abst,x
                                tst_absx rASL,fASL,0
3198 : 08              >            php         ;save flags
3199 : bd0302          >            lda abst,x
319c : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
319f : f003            >        beq skip2697
                       >        trap            ;failed not equal (non zero)
31a1 : 206144          >        jsr sp4_trap_fail 
                       >
31a4 :                 >skip2697
                       >
31a4 : 68              >            pla         ;load status
                       >            eor_flag 0
31a5 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
31a7 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
31aa : f003            >        beq skip2700
                       >        trap            ;failed not equal (non zero)
31ac : 206144          >        jsr sp4_trap_fail 
                       >
31af :                 >skip2700
                       >
                        
31af : ca                       dex
31b0 : 10da                     bpl tasl8
31b2 : a205                     ldx #5
31b4 :                  tasl9
                                set_absx zps,$ff
                       >            load_flag $ff
31b4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
31b6 : 48              >            pha         ;use stack to load status
31b7 : b509            >            lda zps,x    ;load to indexed memory
31b9 : 9d0302          >            sta abst,x
31bc : 28              >            plp
                        
31bd : 1e0302                   asl abst,x
                                tst_absx rASL,fASL,$ff-fnzc
31c0 : 08              >            php         ;save flags
31c1 : bd0302          >            lda abst,x
31c4 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
31c7 : f003            >        beq skip2705
                       >        trap            ;failed not equal (non zero)
31c9 : 206144          >        jsr sp4_trap_fail 
                       >
31cc :                 >skip2705
                       >
31cc : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
31cd : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
31cf : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
31d2 : f003            >        beq skip2708
                       >        trap            ;failed not equal (non zero)
31d4 : 206144          >        jsr sp4_trap_fail 
                       >
31d7 :                 >skip2708
                       >
                        
31d7 : ca                       dex
31d8 : 10da                     bpl tasl9
                        
31da : a205                     ldx #5
31dc :                  tlsr8
                                set_absx zps,0
                       >            load_flag 0
31dc : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
31de : 48              >            pha         ;use stack to load status
31df : b509            >            lda zps,x    ;load to indexed memory
31e1 : 9d0302          >            sta abst,x
31e4 : 28              >            plp
                        
31e5 : 5e0302                   lsr abst,x
                                tst_absx rLSR,fLSR,0
31e8 : 08              >            php         ;save flags
31e9 : bd0302          >            lda abst,x
31ec : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
31ef : f003            >        beq skip2713
                       >        trap            ;failed not equal (non zero)
31f1 : 206144          >        jsr sp4_trap_fail 
                       >
31f4 :                 >skip2713
                       >
31f4 : 68              >            pla         ;load status
                       >            eor_flag 0
31f5 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
31f7 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
31fa : f003            >        beq skip2716
                       >        trap            ;failed not equal (non zero)
31fc : 206144          >        jsr sp4_trap_fail 
                       >
31ff :                 >skip2716
                       >
                        
31ff : ca                       dex
3200 : 10da                     bpl tlsr8
3202 : a205                     ldx #5
3204 :                  tlsr9
                                set_absx zps,$ff
                       >            load_flag $ff
3204 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3206 : 48              >            pha         ;use stack to load status
3207 : b509            >            lda zps,x    ;load to indexed memory
3209 : 9d0302          >            sta abst,x
320c : 28              >            plp
                        
320d : 5e0302                   lsr abst,x
                                tst_absx rLSR,fLSR,$ff-fnzc
3210 : 08              >            php         ;save flags
3211 : bd0302          >            lda abst,x
3214 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
3217 : f003            >        beq skip2721
                       >        trap            ;failed not equal (non zero)
3219 : 206144          >        jsr sp4_trap_fail 
                       >
321c :                 >skip2721
                       >
321c : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
321d : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
321f : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
3222 : f003            >        beq skip2724
                       >        trap            ;failed not equal (non zero)
3224 : 206144          >        jsr sp4_trap_fail 
                       >
3227 :                 >skip2724
                       >
                        
3227 : ca                       dex
3228 : 10da                     bpl tlsr9
                        
322a : a205                     ldx #5
322c :                  trol8
                                set_absx zps,0
                       >            load_flag 0
322c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
322e : 48              >            pha         ;use stack to load status
322f : b509            >            lda zps,x    ;load to indexed memory
3231 : 9d0302          >            sta abst,x
3234 : 28              >            plp
                        
3235 : 3e0302                   rol abst,x
                                tst_absx rROL,fROL,0
3238 : 08              >            php         ;save flags
3239 : bd0302          >            lda abst,x
323c : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
323f : f003            >        beq skip2729
                       >        trap            ;failed not equal (non zero)
3241 : 206144          >        jsr sp4_trap_fail 
                       >
3244 :                 >skip2729
                       >
3244 : 68              >            pla         ;load status
                       >            eor_flag 0
3245 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3247 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
324a : f003            >        beq skip2732
                       >        trap            ;failed not equal (non zero)
324c : 206144          >        jsr sp4_trap_fail 
                       >
324f :                 >skip2732
                       >
                        
324f : ca                       dex
3250 : 10da                     bpl trol8
3252 : a205                     ldx #5
3254 :                  trol9
                                set_absx zps,$ff-fc
                       >            load_flag $ff-fc
3254 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
3256 : 48              >            pha         ;use stack to load status
3257 : b509            >            lda zps,x    ;load to indexed memory
3259 : 9d0302          >            sta abst,x
325c : 28              >            plp
                        
325d : 3e0302                   rol abst,x
                                tst_absx rROL,fROL,$ff-fnzc
3260 : 08              >            php         ;save flags
3261 : bd0302          >            lda abst,x
3264 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
3267 : f003            >        beq skip2737
                       >        trap            ;failed not equal (non zero)
3269 : 206144          >        jsr sp4_trap_fail 
                       >
326c :                 >skip2737
                       >
326c : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
326d : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
326f : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
3272 : f003            >        beq skip2740
                       >        trap            ;failed not equal (non zero)
3274 : 206144          >        jsr sp4_trap_fail 
                       >
3277 :                 >skip2740
                       >
                        
3277 : ca                       dex
3278 : 10da                     bpl trol9
                        
327a : a205                     ldx #5
327c :                  trolc8
                                set_absx zps,fc
                       >            load_flag fc
327c : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
327e : 48              >            pha         ;use stack to load status
327f : b509            >            lda zps,x    ;load to indexed memory
3281 : 9d0302          >            sta abst,x
3284 : 28              >            plp
                        
3285 : 3e0302                   rol abst,x
                                tst_absx rROLc,fROLc,0
3288 : 08              >            php         ;save flags
3289 : bd0302          >            lda abst,x
328c : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
328f : f003            >        beq skip2745
                       >        trap            ;failed not equal (non zero)
3291 : 206144          >        jsr sp4_trap_fail 
                       >
3294 :                 >skip2745
                       >
3294 : 68              >            pla         ;load status
                       >            eor_flag 0
3295 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3297 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
329a : f003            >        beq skip2748
                       >        trap            ;failed not equal (non zero)
329c : 206144          >        jsr sp4_trap_fail 
                       >
329f :                 >skip2748
                       >
                        
329f : ca                       dex
32a0 : 10da                     bpl trolc8
32a2 : a205                     ldx #5
32a4 :                  trolc9
                                set_absx zps,$ff
                       >            load_flag $ff
32a4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
32a6 : 48              >            pha         ;use stack to load status
32a7 : b509            >            lda zps,x    ;load to indexed memory
32a9 : 9d0302          >            sta abst,x
32ac : 28              >            plp
                        
32ad : 3e0302                   rol abst,x
                                tst_absx rROLc,fROLc,$ff-fnzc
32b0 : 08              >            php         ;save flags
32b1 : bd0302          >            lda abst,x
32b4 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
32b7 : f003            >        beq skip2753
                       >        trap            ;failed not equal (non zero)
32b9 : 206144          >        jsr sp4_trap_fail 
                       >
32bc :                 >skip2753
                       >
32bc : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
32bd : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
32bf : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
32c2 : f003            >        beq skip2756
                       >        trap            ;failed not equal (non zero)
32c4 : 206144          >        jsr sp4_trap_fail 
                       >
32c7 :                 >skip2756
                       >
                        
32c7 : ca                       dex
32c8 : 10da                     bpl trolc9
                        
32ca : a205                     ldx #5
32cc :                  tror8
                                set_absx zps,0
                       >            load_flag 0
32cc : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
32ce : 48              >            pha         ;use stack to load status
32cf : b509            >            lda zps,x    ;load to indexed memory
32d1 : 9d0302          >            sta abst,x
32d4 : 28              >            plp
                        
32d5 : 7e0302                   ror abst,x
                                tst_absx rROR,fROR,0
32d8 : 08              >            php         ;save flags
32d9 : bd0302          >            lda abst,x
32dc : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
32df : f003            >        beq skip2761
                       >        trap            ;failed not equal (non zero)
32e1 : 206144          >        jsr sp4_trap_fail 
                       >
32e4 :                 >skip2761
                       >
32e4 : 68              >            pla         ;load status
                       >            eor_flag 0
32e5 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
32e7 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
32ea : f003            >        beq skip2764
                       >        trap            ;failed not equal (non zero)
32ec : 206144          >        jsr sp4_trap_fail 
                       >
32ef :                 >skip2764
                       >
                        
32ef : ca                       dex
32f0 : 10da                     bpl tror8
32f2 : a205                     ldx #5
32f4 :                  tror9
                                set_absx zps,$ff-fc
                       >            load_flag $ff-fc
32f4 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
32f6 : 48              >            pha         ;use stack to load status
32f7 : b509            >            lda zps,x    ;load to indexed memory
32f9 : 9d0302          >            sta abst,x
32fc : 28              >            plp
                        
32fd : 7e0302                   ror abst,x
                                tst_absx rROR,fROR,$ff-fnzc
3300 : 08              >            php         ;save flags
3301 : bd0302          >            lda abst,x
3304 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
3307 : f003            >        beq skip2769
                       >        trap            ;failed not equal (non zero)
3309 : 206144          >        jsr sp4_trap_fail 
                       >
330c :                 >skip2769
                       >
330c : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
330d : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
330f : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
3312 : f003            >        beq skip2772
                       >        trap            ;failed not equal (non zero)
3314 : 206144          >        jsr sp4_trap_fail 
                       >
3317 :                 >skip2772
                       >
                        
3317 : ca                       dex
3318 : 10da                     bpl tror9
                        
331a : a205                     ldx #5
331c :                  trorc8
                                set_absx zps,fc
                       >            load_flag fc
331c : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
331e : 48              >            pha         ;use stack to load status
331f : b509            >            lda zps,x    ;load to indexed memory
3321 : 9d0302          >            sta abst,x
3324 : 28              >            plp
                        
3325 : 7e0302                   ror abst,x
                                tst_absx rRORc,fRORc,0
3328 : 08              >            php         ;save flags
3329 : bd0302          >            lda abst,x
332c : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
332f : f003            >        beq skip2777
                       >        trap            ;failed not equal (non zero)
3331 : 206144          >        jsr sp4_trap_fail 
                       >
3334 :                 >skip2777
                       >
3334 : 68              >            pla         ;load status
                       >            eor_flag 0
3335 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3337 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
333a : f003            >        beq skip2780
                       >        trap            ;failed not equal (non zero)
333c : 206144          >        jsr sp4_trap_fail 
                       >
333f :                 >skip2780
                       >
                        
333f : ca                       dex
3340 : 10da                     bpl trorc8
3342 : a205                     ldx #5
3344 :                  trorc9
                                set_absx zps,$ff
                       >            load_flag $ff
3344 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3346 : 48              >            pha         ;use stack to load status
3347 : b509            >            lda zps,x    ;load to indexed memory
3349 : 9d0302          >            sta abst,x
334c : 28              >            plp
                        
334d : 7e0302                   ror abst,x
                                tst_absx rRORc,fRORc,$ff-fnzc
3350 : 08              >            php         ;save flags
3351 : bd0302          >            lda abst,x
3354 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
3357 : f003            >        beq skip2785
                       >        trap            ;failed not equal (non zero)
3359 : 206144          >        jsr sp4_trap_fail 
                       >
335c :                 >skip2785
                       >
335c : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
335d : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
335f : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
3362 : f003            >        beq skip2788
                       >        trap            ;failed not equal (non zero)
3364 : 206144          >        jsr sp4_trap_fail 
                       >
3367 :                 >skip2788
                       >
                        
3367 : ca                       dex
3368 : 10da                     bpl trorc9
                                next_test
336a : ad0002          >            lda test_case   ;previous test
336d : c921            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
336f : f003            >        beq skip2791
                       >        trap            ;failed not equal (non zero)
3371 : 206144          >        jsr sp4_trap_fail 
                       >
3374 :                 >skip2791
                       >
0022 =                 >test_num = test_num + 1
3374 : a922            >            lda #test_num   ;*** next tests' number
3376 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing memory increment/decrement - INC DEC all addressing modes
                        ; zeropage
3379 : a200                     ldx #0
337b : a97e                     lda #$7e
337d : 8502                     sta zpt
337f :                  tinc    
                                set_stat 0
                       >            load_flag 0
337f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3381 : 48              >            pha         ;use stack to load status
3382 : 28              >            plp
                        
3383 : e602                     inc zpt
                                tst_z rINC,fINC,0
3385 : 08              >            php         ;save flags
3386 : a502            >            lda zpt
3388 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
338b : f003            >        beq skip2796
                       >        trap            ;failed not equal (non zero)
338d : 206144          >        jsr sp4_trap_fail 
                       >
3390 :                 >skip2796
                       >
3390 : 68              >            pla         ;load status
                       >            eor_flag 0
3391 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3393 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
3396 : f003            >        beq skip2799
                       >        trap            ;failed not equal (non zero)
3398 : 206144          >        jsr sp4_trap_fail 
                       >
339b :                 >skip2799
                       >
                        
339b : e8                       inx
339c : e002                     cpx #2
339e : d004                     bne tinc1
33a0 : a9fe                     lda #$fe
33a2 : 8502                     sta zpt
33a4 : e005             tinc1   cpx #5
33a6 : d0d7                     bne tinc
33a8 : ca                       dex
33a9 : e602                     inc zpt
33ab :                  tdec    
                                set_stat 0
                       >            load_flag 0
33ab : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
33ad : 48              >            pha         ;use stack to load status
33ae : 28              >            plp
                        
33af : c602                     dec zpt
                                tst_z rINC,fINC,0
33b1 : 08              >            php         ;save flags
33b2 : a502            >            lda zpt
33b4 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
33b7 : f003            >        beq skip2804
                       >        trap            ;failed not equal (non zero)
33b9 : 206144          >        jsr sp4_trap_fail 
                       >
33bc :                 >skip2804
                       >
33bc : 68              >            pla         ;load status
                       >            eor_flag 0
33bd : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
33bf : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
33c2 : f003            >        beq skip2807
                       >        trap            ;failed not equal (non zero)
33c4 : 206144          >        jsr sp4_trap_fail 
                       >
33c7 :                 >skip2807
                       >
                        
33c7 : ca                       dex
33c8 : 300a                     bmi tdec1
33ca : e001                     cpx #1
33cc : d0dd                     bne tdec
33ce : a981                     lda #$81
33d0 : 8502                     sta zpt
33d2 : d0d7                     bne tdec
33d4 :                  tdec1
33d4 : a200                     ldx #0
33d6 : a97e                     lda #$7e
33d8 : 8502                     sta zpt
33da :                  tinc10    
                                set_stat $ff
                       >            load_flag $ff
33da : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
33dc : 48              >            pha         ;use stack to load status
33dd : 28              >            plp
                        
33de : e602                     inc zpt
                                tst_z rINC,fINC,$ff-fnz
33e0 : 08              >            php         ;save flags
33e1 : a502            >            lda zpt
33e3 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
33e6 : f003            >        beq skip2812
                       >        trap            ;failed not equal (non zero)
33e8 : 206144          >        jsr sp4_trap_fail 
                       >
33eb :                 >skip2812
                       >
33eb : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
33ec : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
33ee : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
33f1 : f003            >        beq skip2815
                       >        trap            ;failed not equal (non zero)
33f3 : 206144          >        jsr sp4_trap_fail 
                       >
33f6 :                 >skip2815
                       >
                        
33f6 : e8                       inx
33f7 : e002                     cpx #2
33f9 : d004                     bne tinc11
33fb : a9fe                     lda #$fe
33fd : 8502                     sta zpt
33ff : e005             tinc11  cpx #5
3401 : d0d7                     bne tinc10
3403 : ca                       dex
3404 : e602                     inc zpt
3406 :                  tdec10    
                                set_stat $ff
                       >            load_flag $ff
3406 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3408 : 48              >            pha         ;use stack to load status
3409 : 28              >            plp
                        
340a : c602                     dec zpt
                                tst_z rINC,fINC,$ff-fnz
340c : 08              >            php         ;save flags
340d : a502            >            lda zpt
340f : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
3412 : f003            >        beq skip2820
                       >        trap            ;failed not equal (non zero)
3414 : 206144          >        jsr sp4_trap_fail 
                       >
3417 :                 >skip2820
                       >
3417 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3418 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
341a : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
341d : f003            >        beq skip2823
                       >        trap            ;failed not equal (non zero)
341f : 206144          >        jsr sp4_trap_fail 
                       >
3422 :                 >skip2823
                       >
                        
3422 : ca                       dex
3423 : 300a                     bmi tdec11
3425 : e001                     cpx #1
3427 : d0dd                     bne tdec10
3429 : a981                     lda #$81
342b : 8502                     sta zpt
342d : d0d7                     bne tdec10
342f :                  tdec11
                                next_test
342f : ad0002          >            lda test_case   ;previous test
3432 : c922            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3434 : f003            >        beq skip2826
                       >        trap            ;failed not equal (non zero)
3436 : 206144          >        jsr sp4_trap_fail 
                       >
3439 :                 >skip2826
                       >
0023 =                 >test_num = test_num + 1
3439 : a923            >            lda #test_num   ;*** next tests' number
343b : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; absolute memory
343e : a200                     ldx #0
3440 : a97e                     lda #$7e
3442 : 8d0302                   sta abst
3445 :                  tinc2    
                                set_stat 0
                       >            load_flag 0
3445 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3447 : 48              >            pha         ;use stack to load status
3448 : 28              >            plp
                        
3449 : ee0302                   inc abst
                                tst_abs rINC,fINC,0
344c : 08              >            php         ;save flags
344d : ad0302          >            lda abst
3450 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
3453 : f003            >        beq skip2831
                       >        trap            ;failed not equal (non zero)
3455 : 206144          >        jsr sp4_trap_fail 
                       >
3458 :                 >skip2831
                       >
3458 : 68              >            pla         ;load status
                       >            eor_flag 0
3459 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
345b : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
345e : f003            >        beq skip2834
                       >        trap            ;failed not equal (non zero)
3460 : 206144          >        jsr sp4_trap_fail 
                       >
3463 :                 >skip2834
                       >
                        
3463 : e8                       inx
3464 : e002                     cpx #2
3466 : d005                     bne tinc3
3468 : a9fe                     lda #$fe
346a : 8d0302                   sta abst
346d : e005             tinc3   cpx #5
346f : d0d4                     bne tinc2
3471 : ca                       dex
3472 : ee0302                   inc abst
3475 :                  tdec2    
                                set_stat 0
                       >            load_flag 0
3475 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3477 : 48              >            pha         ;use stack to load status
3478 : 28              >            plp
                        
3479 : ce0302                   dec abst
                                tst_abs rINC,fINC,0
347c : 08              >            php         ;save flags
347d : ad0302          >            lda abst
3480 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
3483 : f003            >        beq skip2839
                       >        trap            ;failed not equal (non zero)
3485 : 206144          >        jsr sp4_trap_fail 
                       >
3488 :                 >skip2839
                       >
3488 : 68              >            pla         ;load status
                       >            eor_flag 0
3489 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
348b : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
348e : f003            >        beq skip2842
                       >        trap            ;failed not equal (non zero)
3490 : 206144          >        jsr sp4_trap_fail 
                       >
3493 :                 >skip2842
                       >
                        
3493 : ca                       dex
3494 : 300b                     bmi tdec3
3496 : e001                     cpx #1
3498 : d0db                     bne tdec2
349a : a981                     lda #$81
349c : 8d0302                   sta abst
349f : d0d4                     bne tdec2
34a1 :                  tdec3
34a1 : a200                     ldx #0
34a3 : a97e                     lda #$7e
34a5 : 8d0302                   sta abst
34a8 :                  tinc12    
                                set_stat $ff
                       >            load_flag $ff
34a8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
34aa : 48              >            pha         ;use stack to load status
34ab : 28              >            plp
                        
34ac : ee0302                   inc abst
                                tst_abs rINC,fINC,$ff-fnz
34af : 08              >            php         ;save flags
34b0 : ad0302          >            lda abst
34b3 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
34b6 : f003            >        beq skip2847
                       >        trap            ;failed not equal (non zero)
34b8 : 206144          >        jsr sp4_trap_fail 
                       >
34bb :                 >skip2847
                       >
34bb : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
34bc : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
34be : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
34c1 : f003            >        beq skip2850
                       >        trap            ;failed not equal (non zero)
34c3 : 206144          >        jsr sp4_trap_fail 
                       >
34c6 :                 >skip2850
                       >
                        
34c6 : e8                       inx
34c7 : e002                     cpx #2
34c9 : d005                     bne tinc13
34cb : a9fe                     lda #$fe
34cd : 8d0302                   sta abst
34d0 : e005             tinc13   cpx #5
34d2 : d0d4                     bne tinc12
34d4 : ca                       dex
34d5 : ee0302                   inc abst
34d8 :                  tdec12    
                                set_stat $ff
                       >            load_flag $ff
34d8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
34da : 48              >            pha         ;use stack to load status
34db : 28              >            plp
                        
34dc : ce0302                   dec abst
                                tst_abs rINC,fINC,$ff-fnz
34df : 08              >            php         ;save flags
34e0 : ad0302          >            lda abst
34e3 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
34e6 : f003            >        beq skip2855
                       >        trap            ;failed not equal (non zero)
34e8 : 206144          >        jsr sp4_trap_fail 
                       >
34eb :                 >skip2855
                       >
34eb : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
34ec : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
34ee : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
34f1 : f003            >        beq skip2858
                       >        trap            ;failed not equal (non zero)
34f3 : 206144          >        jsr sp4_trap_fail 
                       >
34f6 :                 >skip2858
                       >
                        
34f6 : ca                       dex
34f7 : 300b                     bmi tdec13
34f9 : e001                     cpx #1
34fb : d0db                     bne tdec12
34fd : a981                     lda #$81
34ff : 8d0302                   sta abst
3502 : d0d4                     bne tdec12
3504 :                  tdec13
                                next_test
3504 : ad0002          >            lda test_case   ;previous test
3507 : c923            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3509 : f003            >        beq skip2861
                       >        trap            ;failed not equal (non zero)
350b : 206144          >        jsr sp4_trap_fail 
                       >
350e :                 >skip2861
                       >
0024 =                 >test_num = test_num + 1
350e : a924            >            lda #test_num   ;*** next tests' number
3510 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; zeropage indexed
3513 : a200                     ldx #0
3515 : a97e                     lda #$7e
3517 : 9502             tinc4   sta zpt,x
                                set_stat 0
                       >            load_flag 0
3519 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
351b : 48              >            pha         ;use stack to load status
351c : 28              >            plp
                        
351d : f602                     inc zpt,x
                                tst_zx rINC,fINC,0
351f : 08              >            php         ;save flags
3520 : b502            >            lda zpt,x
3522 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
3525 : f003            >        beq skip2866
                       >        trap            ;failed not equal (non zero)
3527 : 206144          >        jsr sp4_trap_fail 
                       >
352a :                 >skip2866
                       >
352a : 68              >            pla         ;load status
                       >            eor_flag 0
352b : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
352d : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
3530 : f003            >        beq skip2869
                       >        trap            ;failed not equal (non zero)
3532 : 206144          >        jsr sp4_trap_fail 
                       >
3535 :                 >skip2869
                       >
                        
3535 : b502                     lda zpt,x
3537 : e8                       inx
3538 : e002                     cpx #2
353a : d002                     bne tinc5
353c : a9fe                     lda #$fe
353e : e005             tinc5   cpx #5
3540 : d0d5                     bne tinc4
3542 : ca                       dex
3543 : a902                     lda #2
3545 : 9502             tdec4   sta zpt,x 
                                set_stat 0
                       >            load_flag 0
3547 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3549 : 48              >            pha         ;use stack to load status
354a : 28              >            plp
                        
354b : d602                     dec zpt,x
                                tst_zx rINC,fINC,0
354d : 08              >            php         ;save flags
354e : b502            >            lda zpt,x
3550 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
3553 : f003            >        beq skip2874
                       >        trap            ;failed not equal (non zero)
3555 : 206144          >        jsr sp4_trap_fail 
                       >
3558 :                 >skip2874
                       >
3558 : 68              >            pla         ;load status
                       >            eor_flag 0
3559 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
355b : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
355e : f003            >        beq skip2877
                       >        trap            ;failed not equal (non zero)
3560 : 206144          >        jsr sp4_trap_fail 
                       >
3563 :                 >skip2877
                       >
                        
3563 : b502                     lda zpt,x
3565 : ca                       dex
3566 : 3008                     bmi tdec5
3568 : e001                     cpx #1
356a : d0d9                     bne tdec4
356c : a981                     lda #$81
356e : d0d5                     bne tdec4
3570 :                  tdec5
3570 : a200                     ldx #0
3572 : a97e                     lda #$7e
3574 : 9502             tinc14  sta zpt,x
                                set_stat $ff
                       >            load_flag $ff
3576 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3578 : 48              >            pha         ;use stack to load status
3579 : 28              >            plp
                        
357a : f602                     inc zpt,x
                                tst_zx rINC,fINC,$ff-fnz
357c : 08              >            php         ;save flags
357d : b502            >            lda zpt,x
357f : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
3582 : f003            >        beq skip2882
                       >        trap            ;failed not equal (non zero)
3584 : 206144          >        jsr sp4_trap_fail 
                       >
3587 :                 >skip2882
                       >
3587 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3588 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
358a : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
358d : f003            >        beq skip2885
                       >        trap            ;failed not equal (non zero)
358f : 206144          >        jsr sp4_trap_fail 
                       >
3592 :                 >skip2885
                       >
                        
3592 : b502                     lda zpt,x
3594 : e8                       inx
3595 : e002                     cpx #2
3597 : d002                     bne tinc15
3599 : a9fe                     lda #$fe
359b : e005             tinc15  cpx #5
359d : d0d5                     bne tinc14
359f : ca                       dex
35a0 : a902                     lda #2
35a2 : 9502             tdec14  sta zpt,x 
                                set_stat $ff
                       >            load_flag $ff
35a4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
35a6 : 48              >            pha         ;use stack to load status
35a7 : 28              >            plp
                        
35a8 : d602                     dec zpt,x
                                tst_zx rINC,fINC,$ff-fnz
35aa : 08              >            php         ;save flags
35ab : b502            >            lda zpt,x
35ad : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
35b0 : f003            >        beq skip2890
                       >        trap            ;failed not equal (non zero)
35b2 : 206144          >        jsr sp4_trap_fail 
                       >
35b5 :                 >skip2890
                       >
35b5 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
35b6 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
35b8 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
35bb : f003            >        beq skip2893
                       >        trap            ;failed not equal (non zero)
35bd : 206144          >        jsr sp4_trap_fail 
                       >
35c0 :                 >skip2893
                       >
                        
35c0 : b502                     lda zpt,x
35c2 : ca                       dex
35c3 : 3008                     bmi tdec15
35c5 : e001                     cpx #1
35c7 : d0d9                     bne tdec14
35c9 : a981                     lda #$81
35cb : d0d5                     bne tdec14
35cd :                  tdec15
                                next_test
35cd : ad0002          >            lda test_case   ;previous test
35d0 : c924            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
35d2 : f003            >        beq skip2896
                       >        trap            ;failed not equal (non zero)
35d4 : 206144          >        jsr sp4_trap_fail 
                       >
35d7 :                 >skip2896
                       >
0025 =                 >test_num = test_num + 1
35d7 : a925            >            lda #test_num   ;*** next tests' number
35d9 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; memory indexed
35dc : a200                     ldx #0
35de : a97e                     lda #$7e
35e0 : 9d0302           tinc6   sta abst,x
                                set_stat 0
                       >            load_flag 0
35e3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
35e5 : 48              >            pha         ;use stack to load status
35e6 : 28              >            plp
                        
35e7 : fe0302                   inc abst,x
                                tst_absx rINC,fINC,0
35ea : 08              >            php         ;save flags
35eb : bd0302          >            lda abst,x
35ee : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
35f1 : f003            >        beq skip2901
                       >        trap            ;failed not equal (non zero)
35f3 : 206144          >        jsr sp4_trap_fail 
                       >
35f6 :                 >skip2901
                       >
35f6 : 68              >            pla         ;load status
                       >            eor_flag 0
35f7 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
35f9 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
35fc : f003            >        beq skip2904
                       >        trap            ;failed not equal (non zero)
35fe : 206144          >        jsr sp4_trap_fail 
                       >
3601 :                 >skip2904
                       >
                        
3601 : bd0302                   lda abst,x
3604 : e8                       inx
3605 : e002                     cpx #2
3607 : d002                     bne tinc7
3609 : a9fe                     lda #$fe
360b : e005             tinc7   cpx #5
360d : d0d1                     bne tinc6
360f : ca                       dex
3610 : a902                     lda #2
3612 : 9d0302           tdec6   sta abst,x 
                                set_stat 0
                       >            load_flag 0
3615 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3617 : 48              >            pha         ;use stack to load status
3618 : 28              >            plp
                        
3619 : de0302                   dec abst,x
                                tst_absx rINC,fINC,0
361c : 08              >            php         ;save flags
361d : bd0302          >            lda abst,x
3620 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
3623 : f003            >        beq skip2909
                       >        trap            ;failed not equal (non zero)
3625 : 206144          >        jsr sp4_trap_fail 
                       >
3628 :                 >skip2909
                       >
3628 : 68              >            pla         ;load status
                       >            eor_flag 0
3629 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
362b : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
362e : f003            >        beq skip2912
                       >        trap            ;failed not equal (non zero)
3630 : 206144          >        jsr sp4_trap_fail 
                       >
3633 :                 >skip2912
                       >
                        
3633 : bd0302                   lda abst,x
3636 : ca                       dex
3637 : 3008                     bmi tdec7
3639 : e001                     cpx #1
363b : d0d5                     bne tdec6
363d : a981                     lda #$81
363f : d0d1                     bne tdec6
3641 :                  tdec7
3641 : a200                     ldx #0
3643 : a97e                     lda #$7e
3645 : 9d0302           tinc16  sta abst,x
                                set_stat $ff
                       >            load_flag $ff
3648 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
364a : 48              >            pha         ;use stack to load status
364b : 28              >            plp
                        
364c : fe0302                   inc abst,x
                                tst_absx rINC,fINC,$ff-fnz
364f : 08              >            php         ;save flags
3650 : bd0302          >            lda abst,x
3653 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
3656 : f003            >        beq skip2917
                       >        trap            ;failed not equal (non zero)
3658 : 206144          >        jsr sp4_trap_fail 
                       >
365b :                 >skip2917
                       >
365b : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
365c : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
365e : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
3661 : f003            >        beq skip2920
                       >        trap            ;failed not equal (non zero)
3663 : 206144          >        jsr sp4_trap_fail 
                       >
3666 :                 >skip2920
                       >
                        
3666 : bd0302                   lda abst,x
3669 : e8                       inx
366a : e002                     cpx #2
366c : d002                     bne tinc17
366e : a9fe                     lda #$fe
3670 : e005             tinc17  cpx #5
3672 : d0d1                     bne tinc16
3674 : ca                       dex
3675 : a902                     lda #2
3677 : 9d0302           tdec16  sta abst,x 
                                set_stat $ff
                       >            load_flag $ff
367a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
367c : 48              >            pha         ;use stack to load status
367d : 28              >            plp
                        
367e : de0302                   dec abst,x
                                tst_absx rINC,fINC,$ff-fnz
3681 : 08              >            php         ;save flags
3682 : bd0302          >            lda abst,x
3685 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
3688 : f003            >        beq skip2925
                       >        trap            ;failed not equal (non zero)
368a : 206144          >        jsr sp4_trap_fail 
                       >
368d :                 >skip2925
                       >
368d : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
368e : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3690 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
3693 : f003            >        beq skip2928
                       >        trap            ;failed not equal (non zero)
3695 : 206144          >        jsr sp4_trap_fail 
                       >
3698 :                 >skip2928
                       >
                        
3698 : bd0302                   lda abst,x
369b : ca                       dex
369c : 3008                     bmi tdec17
369e : e001                     cpx #1
36a0 : d0d5                     bne tdec16
36a2 : a981                     lda #$81
36a4 : d0d1                     bne tdec16
36a6 :                  tdec17
                                next_test
36a6 : ad0002          >            lda test_case   ;previous test
36a9 : c925            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
36ab : f003            >        beq skip2931
                       >        trap            ;failed not equal (non zero)
36ad : 206144          >        jsr sp4_trap_fail 
                       >
36b0 :                 >skip2931
                       >
0026 =                 >test_num = test_num + 1
36b0 : a926            >            lda #test_num   ;*** next tests' number
36b2 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing logical instructions - AND EOR ORA all addressing modes
                        ; AND
36b5 : a203                     ldx #3          ;immediate
36b7 : b514             tand    lda zpAN,x
36b9 : 8d0a02                   sta ex_andi+1   ;set AND # operand
                                set_ax  absANa,0
                       >            load_flag 0
36bc : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
36be : 48              >            pha         ;use stack to load status
36bf : bd6b02          >            lda absANa,x    ;precharge accu
36c2 : 28              >            plp
                        
36c3 : 200902                   jsr ex_andi     ;execute AND # in RAM
                                tst_ax  absrlo,absflo,0
36c6 : 08              >            php         ;save flags
36c7 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
36ca : f003            >        beq skip2936
                       >        trap            ;failed not equal (non zero)
36cc : 206144          >        jsr sp4_trap_fail 
                       >
36cf :                 >skip2936
                       >
36cf : 68              >            pla         ;load status
                       >            eor_flag 0
36d0 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
36d2 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
36d5 : f003            >        beq skip2939
                       >        trap            ;failed not equal (non zero)
36d7 : 206144          >        jsr sp4_trap_fail 
                       >
36da :                 >skip2939
                       >
                        
36da : ca                       dex
36db : 10da                     bpl tand
36dd : a203                     ldx #3
36df : b514             tand1   lda zpAN,x
36e1 : 8d0a02                   sta ex_andi+1   ;set AND # operand
                                set_ax  absANa,$ff
                       >            load_flag $ff
36e4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
36e6 : 48              >            pha         ;use stack to load status
36e7 : bd6b02          >            lda absANa,x    ;precharge accu
36ea : 28              >            plp
                        
36eb : 200902                   jsr ex_andi     ;execute AND # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
36ee : 08              >            php         ;save flags
36ef : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
36f2 : f003            >        beq skip2944
                       >        trap            ;failed not equal (non zero)
36f4 : 206144          >        jsr sp4_trap_fail 
                       >
36f7 :                 >skip2944
                       >
36f7 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
36f8 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
36fa : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
36fd : f003            >        beq skip2947
                       >        trap            ;failed not equal (non zero)
36ff : 206144          >        jsr sp4_trap_fail 
                       >
3702 :                 >skip2947
                       >
                        
3702 : ca                       dex
3703 : 10da                     bpl tand1
                            
3705 : a203                     ldx #3      ;zp
3707 : b514             tand2   lda zpAN,x
3709 : 8502                     sta zpt
                                set_ax  absANa,0
                       >            load_flag 0
370b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
370d : 48              >            pha         ;use stack to load status
370e : bd6b02          >            lda absANa,x    ;precharge accu
3711 : 28              >            plp
                        
3712 : 2502                     and zpt
                                tst_ax  absrlo,absflo,0
3714 : 08              >            php         ;save flags
3715 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3718 : f003            >        beq skip2952
                       >        trap            ;failed not equal (non zero)
371a : 206144          >        jsr sp4_trap_fail 
                       >
371d :                 >skip2952
                       >
371d : 68              >            pla         ;load status
                       >            eor_flag 0
371e : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3720 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3723 : f003            >        beq skip2955
                       >        trap            ;failed not equal (non zero)
3725 : 206144          >        jsr sp4_trap_fail 
                       >
3728 :                 >skip2955
                       >
                        
3728 : ca                       dex
3729 : 10dc                     bpl tand2
372b : a203                     ldx #3
372d : b514             tand3   lda zpAN,x
372f : 8502                     sta zpt
                                set_ax  absANa,$ff
                       >            load_flag $ff
3731 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3733 : 48              >            pha         ;use stack to load status
3734 : bd6b02          >            lda absANa,x    ;precharge accu
3737 : 28              >            plp
                        
3738 : 2502                     and zpt
                                tst_ax  absrlo,absflo,$ff-fnz
373a : 08              >            php         ;save flags
373b : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
373e : f003            >        beq skip2960
                       >        trap            ;failed not equal (non zero)
3740 : 206144          >        jsr sp4_trap_fail 
                       >
3743 :                 >skip2960
                       >
3743 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3744 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3746 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3749 : f003            >        beq skip2963
                       >        trap            ;failed not equal (non zero)
374b : 206144          >        jsr sp4_trap_fail 
                       >
374e :                 >skip2963
                       >
                        
374e : ca                       dex
374f : 10dc                     bpl tand3
                        
3751 : a203                     ldx #3      ;abs
3753 : b514             tand4   lda zpAN,x
3755 : 8d0302                   sta abst
                                set_ax  absANa,0
                       >            load_flag 0
3758 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
375a : 48              >            pha         ;use stack to load status
375b : bd6b02          >            lda absANa,x    ;precharge accu
375e : 28              >            plp
                        
375f : 2d0302                   and abst
                                tst_ax  absrlo,absflo,0
3762 : 08              >            php         ;save flags
3763 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3766 : f003            >        beq skip2968
                       >        trap            ;failed not equal (non zero)
3768 : 206144          >        jsr sp4_trap_fail 
                       >
376b :                 >skip2968
                       >
376b : 68              >            pla         ;load status
                       >            eor_flag 0
376c : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
376e : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3771 : f003            >        beq skip2971
                       >        trap            ;failed not equal (non zero)
3773 : 206144          >        jsr sp4_trap_fail 
                       >
3776 :                 >skip2971
                       >
                        
3776 : ca                       dex
3777 : 10da                     bpl tand4
3779 : a203                     ldx #3
377b : b514             tand5   lda zpAN,x
377d : 8d0302                   sta abst
                                set_ax  absANa,$ff
                       >            load_flag $ff
3780 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3782 : 48              >            pha         ;use stack to load status
3783 : bd6b02          >            lda absANa,x    ;precharge accu
3786 : 28              >            plp
                        
3787 : 2d0302                   and abst
                                tst_ax  absrlo,absflo,$ff-fnz
378a : 08              >            php         ;save flags
378b : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
378e : f003            >        beq skip2976
                       >        trap            ;failed not equal (non zero)
3790 : 206144          >        jsr sp4_trap_fail 
                       >
3793 :                 >skip2976
                       >
3793 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3794 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3796 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3799 : f003            >        beq skip2979
                       >        trap            ;failed not equal (non zero)
379b : 206144          >        jsr sp4_trap_fail 
                       >
379e :                 >skip2979
                       >
                        
379e : ca                       dex
379f : 1002                     bpl tand6
                        
37a1 : a203                     ldx #3      ;zp,x
37a3 :                  tand6
                                set_ax  absANa,0
                       >            load_flag 0
37a3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
37a5 : 48              >            pha         ;use stack to load status
37a6 : bd6b02          >            lda absANa,x    ;precharge accu
37a9 : 28              >            plp
                        
37aa : 3514                     and zpAN,x
                                tst_ax  absrlo,absflo,0
37ac : 08              >            php         ;save flags
37ad : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
37b0 : f003            >        beq skip2984
                       >        trap            ;failed not equal (non zero)
37b2 : 206144          >        jsr sp4_trap_fail 
                       >
37b5 :                 >skip2984
                       >
37b5 : 68              >            pla         ;load status
                       >            eor_flag 0
37b6 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
37b8 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
37bb : f003            >        beq skip2987
                       >        trap            ;failed not equal (non zero)
37bd : 206144          >        jsr sp4_trap_fail 
                       >
37c0 :                 >skip2987
                       >
                        
37c0 : ca                       dex
37c1 : 10e0                     bpl tand6
37c3 : a203                     ldx #3
37c5 :                  tand7
                                set_ax  absANa,$ff
                       >            load_flag $ff
37c5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
37c7 : 48              >            pha         ;use stack to load status
37c8 : bd6b02          >            lda absANa,x    ;precharge accu
37cb : 28              >            plp
                        
37cc : 3514                     and zpAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
37ce : 08              >            php         ;save flags
37cf : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
37d2 : f003            >        beq skip2992
                       >        trap            ;failed not equal (non zero)
37d4 : 206144          >        jsr sp4_trap_fail 
                       >
37d7 :                 >skip2992
                       >
37d7 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
37d8 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
37da : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
37dd : f003            >        beq skip2995
                       >        trap            ;failed not equal (non zero)
37df : 206144          >        jsr sp4_trap_fail 
                       >
37e2 :                 >skip2995
                       >
                        
37e2 : ca                       dex
37e3 : 10e0                     bpl tand7
                        
37e5 : a203                     ldx #3      ;abs,x
37e7 :                  tand8
                                set_ax  absANa,0
                       >            load_flag 0
37e7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
37e9 : 48              >            pha         ;use stack to load status
37ea : bd6b02          >            lda absANa,x    ;precharge accu
37ed : 28              >            plp
                        
37ee : 3d5f02                   and absAN,x
                                tst_ax  absrlo,absflo,0
37f1 : 08              >            php         ;save flags
37f2 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
37f5 : f003            >        beq skip3000
                       >        trap            ;failed not equal (non zero)
37f7 : 206144          >        jsr sp4_trap_fail 
                       >
37fa :                 >skip3000
                       >
37fa : 68              >            pla         ;load status
                       >            eor_flag 0
37fb : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
37fd : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3800 : f003            >        beq skip3003
                       >        trap            ;failed not equal (non zero)
3802 : 206144          >        jsr sp4_trap_fail 
                       >
3805 :                 >skip3003
                       >
                        
3805 : ca                       dex
3806 : 10df                     bpl tand8
3808 : a203                     ldx #3
380a :                  tand9
                                set_ax  absANa,$ff
                       >            load_flag $ff
380a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
380c : 48              >            pha         ;use stack to load status
380d : bd6b02          >            lda absANa,x    ;precharge accu
3810 : 28              >            plp
                        
3811 : 3d5f02                   and absAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
3814 : 08              >            php         ;save flags
3815 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3818 : f003            >        beq skip3008
                       >        trap            ;failed not equal (non zero)
381a : 206144          >        jsr sp4_trap_fail 
                       >
381d :                 >skip3008
                       >
381d : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
381e : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3820 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3823 : f003            >        beq skip3011
                       >        trap            ;failed not equal (non zero)
3825 : 206144          >        jsr sp4_trap_fail 
                       >
3828 :                 >skip3011
                       >
                        
3828 : ca                       dex
3829 : 10df                     bpl tand9
                        
382b : a003                     ldy #3      ;abs,y
382d :                  tand10
                                set_ay  absANa,0
                       >            load_flag 0
382d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
382f : 48              >            pha         ;use stack to load status
3830 : b96b02          >            lda absANa,y    ;precharge accu
3833 : 28              >            plp
                        
3834 : 395f02                   and absAN,y
                                tst_ay  absrlo,absflo,0
3837 : 08              >            php         ;save flags
3838 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
383b : f003            >        beq skip3016
                       >        trap            ;failed not equal (non zero)
383d : 206144          >        jsr sp4_trap_fail 
                       >
3840 :                 >skip3016
                       >
3840 : 68              >            pla         ;load status
                       >            eor_flag 0
3841 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3843 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3846 : f003            >        beq skip3019
                       >        trap            ;failed not equal (non zero)
3848 : 206144          >        jsr sp4_trap_fail 
                       >
384b :                 >skip3019
                       >
                        
384b : 88                       dey
384c : 10df                     bpl tand10
384e : a003                     ldy #3
3850 :                  tand11
                                set_ay  absANa,$ff
                       >            load_flag $ff
3850 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3852 : 48              >            pha         ;use stack to load status
3853 : b96b02          >            lda absANa,y    ;precharge accu
3856 : 28              >            plp
                        
3857 : 395f02                   and absAN,y
                                tst_ay  absrlo,absflo,$ff-fnz
385a : 08              >            php         ;save flags
385b : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
385e : f003            >        beq skip3024
                       >        trap            ;failed not equal (non zero)
3860 : 206144          >        jsr sp4_trap_fail 
                       >
3863 :                 >skip3024
                       >
3863 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3864 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3866 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3869 : f003            >        beq skip3027
                       >        trap            ;failed not equal (non zero)
386b : 206144          >        jsr sp4_trap_fail 
                       >
386e :                 >skip3027
                       >
                        
386e : 88                       dey
386f : 10df                     bpl tand11
                        
3871 : a206                     ldx #6      ;(zp,x)
3873 : a003                     ldy #3
3875 :                  tand12
                                set_ay  absANa,0
                       >            load_flag 0
3875 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3877 : 48              >            pha         ;use stack to load status
3878 : b96b02          >            lda absANa,y    ;precharge accu
387b : 28              >            plp
                        
387c : 2132                     and (indAN,x)
                                tst_ay  absrlo,absflo,0
387e : 08              >            php         ;save flags
387f : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3882 : f003            >        beq skip3032
                       >        trap            ;failed not equal (non zero)
3884 : 206144          >        jsr sp4_trap_fail 
                       >
3887 :                 >skip3032
                       >
3887 : 68              >            pla         ;load status
                       >            eor_flag 0
3888 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
388a : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
388d : f003            >        beq skip3035
                       >        trap            ;failed not equal (non zero)
388f : 206144          >        jsr sp4_trap_fail 
                       >
3892 :                 >skip3035
                       >
                        
3892 : ca                       dex
3893 : ca                       dex
3894 : 88                       dey
3895 : 10de                     bpl tand12
3897 : a206                     ldx #6
3899 : a003                     ldy #3
389b :                  tand13
                                set_ay  absANa,$ff
                       >            load_flag $ff
389b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
389d : 48              >            pha         ;use stack to load status
389e : b96b02          >            lda absANa,y    ;precharge accu
38a1 : 28              >            plp
                        
38a2 : 2132                     and (indAN,x)
                                tst_ay  absrlo,absflo,$ff-fnz
38a4 : 08              >            php         ;save flags
38a5 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
38a8 : f003            >        beq skip3040
                       >        trap            ;failed not equal (non zero)
38aa : 206144          >        jsr sp4_trap_fail 
                       >
38ad :                 >skip3040
                       >
38ad : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
38ae : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
38b0 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
38b3 : f003            >        beq skip3043
                       >        trap            ;failed not equal (non zero)
38b5 : 206144          >        jsr sp4_trap_fail 
                       >
38b8 :                 >skip3043
                       >
                        
38b8 : ca                       dex
38b9 : ca                       dex
38ba : 88                       dey
38bb : 10de                     bpl tand13
                        
38bd : a003                     ldy #3      ;(zp),y
38bf :                  tand14
                                set_ay  absANa,0
                       >            load_flag 0
38bf : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
38c1 : 48              >            pha         ;use stack to load status
38c2 : b96b02          >            lda absANa,y    ;precharge accu
38c5 : 28              >            plp
                        
38c6 : 3132                     and (indAN),y
                                tst_ay  absrlo,absflo,0
38c8 : 08              >            php         ;save flags
38c9 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
38cc : f003            >        beq skip3048
                       >        trap            ;failed not equal (non zero)
38ce : 206144          >        jsr sp4_trap_fail 
                       >
38d1 :                 >skip3048
                       >
38d1 : 68              >            pla         ;load status
                       >            eor_flag 0
38d2 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
38d4 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
38d7 : f003            >        beq skip3051
                       >        trap            ;failed not equal (non zero)
38d9 : 206144          >        jsr sp4_trap_fail 
                       >
38dc :                 >skip3051
                       >
                        
38dc : 88                       dey
38dd : 10e0                     bpl tand14
38df : a003                     ldy #3
38e1 :                  tand15
                                set_ay  absANa,$ff
                       >            load_flag $ff
38e1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
38e3 : 48              >            pha         ;use stack to load status
38e4 : b96b02          >            lda absANa,y    ;precharge accu
38e7 : 28              >            plp
                        
38e8 : 3132                     and (indAN),y
                                tst_ay  absrlo,absflo,$ff-fnz
38ea : 08              >            php         ;save flags
38eb : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
38ee : f003            >        beq skip3056
                       >        trap            ;failed not equal (non zero)
38f0 : 206144          >        jsr sp4_trap_fail 
                       >
38f3 :                 >skip3056
                       >
38f3 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
38f4 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
38f6 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
38f9 : f003            >        beq skip3059
                       >        trap            ;failed not equal (non zero)
38fb : 206144          >        jsr sp4_trap_fail 
                       >
38fe :                 >skip3059
                       >
                        
38fe : 88                       dey
38ff : 10e0                     bpl tand15
                                next_test
3901 : ad0002          >            lda test_case   ;previous test
3904 : c926            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3906 : f003            >        beq skip3062
                       >        trap            ;failed not equal (non zero)
3908 : 206144          >        jsr sp4_trap_fail 
                       >
390b :                 >skip3062
                       >
0027 =                 >test_num = test_num + 1
390b : a927            >            lda #test_num   ;*** next tests' number
390d : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; EOR
3910 : a203                     ldx #3          ;immediate - self modifying code
3912 : b518             teor    lda zpEO,x
3914 : 8d0d02                   sta ex_eori+1   ;set EOR # operand
                                set_ax  absEOa,0
                       >            load_flag 0
3917 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3919 : 48              >            pha         ;use stack to load status
391a : bd6f02          >            lda absEOa,x    ;precharge accu
391d : 28              >            plp
                        
391e : 200c02                   jsr ex_eori     ;execute EOR # in RAM
                                tst_ax  absrlo,absflo,0
3921 : 08              >            php         ;save flags
3922 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3925 : f003            >        beq skip3067
                       >        trap            ;failed not equal (non zero)
3927 : 206144          >        jsr sp4_trap_fail 
                       >
392a :                 >skip3067
                       >
392a : 68              >            pla         ;load status
                       >            eor_flag 0
392b : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
392d : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3930 : f003            >        beq skip3070
                       >        trap            ;failed not equal (non zero)
3932 : 206144          >        jsr sp4_trap_fail 
                       >
3935 :                 >skip3070
                       >
                        
3935 : ca                       dex
3936 : 10da                     bpl teor
3938 : a203                     ldx #3
393a : b518             teor1   lda zpEO,x
393c : 8d0d02                   sta ex_eori+1   ;set EOR # operand
                                set_ax  absEOa,$ff
                       >            load_flag $ff
393f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3941 : 48              >            pha         ;use stack to load status
3942 : bd6f02          >            lda absEOa,x    ;precharge accu
3945 : 28              >            plp
                        
3946 : 200c02                   jsr ex_eori     ;execute EOR # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
3949 : 08              >            php         ;save flags
394a : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
394d : f003            >        beq skip3075
                       >        trap            ;failed not equal (non zero)
394f : 206144          >        jsr sp4_trap_fail 
                       >
3952 :                 >skip3075
                       >
3952 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3953 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3955 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3958 : f003            >        beq skip3078
                       >        trap            ;failed not equal (non zero)
395a : 206144          >        jsr sp4_trap_fail 
                       >
395d :                 >skip3078
                       >
                        
395d : ca                       dex
395e : 10da                     bpl teor1
                            
3960 : a203                     ldx #3      ;zp
3962 : b518             teor2    lda zpEO,x
3964 : 8502                     sta zpt
                                set_ax  absEOa,0
                       >            load_flag 0
3966 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3968 : 48              >            pha         ;use stack to load status
3969 : bd6f02          >            lda absEOa,x    ;precharge accu
396c : 28              >            plp
                        
396d : 4502                     eor zpt
                                tst_ax  absrlo,absflo,0
396f : 08              >            php         ;save flags
3970 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3973 : f003            >        beq skip3083
                       >        trap            ;failed not equal (non zero)
3975 : 206144          >        jsr sp4_trap_fail 
                       >
3978 :                 >skip3083
                       >
3978 : 68              >            pla         ;load status
                       >            eor_flag 0
3979 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
397b : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
397e : f003            >        beq skip3086
                       >        trap            ;failed not equal (non zero)
3980 : 206144          >        jsr sp4_trap_fail 
                       >
3983 :                 >skip3086
                       >
                        
3983 : ca                       dex
3984 : 10dc                     bpl teor2
3986 : a203                     ldx #3
3988 : b518             teor3   lda zpEO,x
398a : 8502                     sta zpt
                                set_ax  absEOa,$ff
                       >            load_flag $ff
398c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
398e : 48              >            pha         ;use stack to load status
398f : bd6f02          >            lda absEOa,x    ;precharge accu
3992 : 28              >            plp
                        
3993 : 4502                     eor zpt
                                tst_ax  absrlo,absflo,$ff-fnz
3995 : 08              >            php         ;save flags
3996 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3999 : f003            >        beq skip3091
                       >        trap            ;failed not equal (non zero)
399b : 206144          >        jsr sp4_trap_fail 
                       >
399e :                 >skip3091
                       >
399e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
399f : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
39a1 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
39a4 : f003            >        beq skip3094
                       >        trap            ;failed not equal (non zero)
39a6 : 206144          >        jsr sp4_trap_fail 
                       >
39a9 :                 >skip3094
                       >
                        
39a9 : ca                       dex
39aa : 10dc                     bpl teor3
                        
39ac : a203                     ldx #3      ;abs
39ae : b518             teor4   lda zpEO,x
39b0 : 8d0302                   sta abst
                                set_ax  absEOa,0
                       >            load_flag 0
39b3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
39b5 : 48              >            pha         ;use stack to load status
39b6 : bd6f02          >            lda absEOa,x    ;precharge accu
39b9 : 28              >            plp
                        
39ba : 4d0302                   eor abst
                                tst_ax  absrlo,absflo,0
39bd : 08              >            php         ;save flags
39be : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
39c1 : f003            >        beq skip3099
                       >        trap            ;failed not equal (non zero)
39c3 : 206144          >        jsr sp4_trap_fail 
                       >
39c6 :                 >skip3099
                       >
39c6 : 68              >            pla         ;load status
                       >            eor_flag 0
39c7 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
39c9 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
39cc : f003            >        beq skip3102
                       >        trap            ;failed not equal (non zero)
39ce : 206144          >        jsr sp4_trap_fail 
                       >
39d1 :                 >skip3102
                       >
                        
39d1 : ca                       dex
39d2 : 10da                     bpl teor4
39d4 : a203                     ldx #3
39d6 : b518             teor5   lda zpEO,x
39d8 : 8d0302                   sta abst
                                set_ax  absEOa,$ff
                       >            load_flag $ff
39db : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
39dd : 48              >            pha         ;use stack to load status
39de : bd6f02          >            lda absEOa,x    ;precharge accu
39e1 : 28              >            plp
                        
39e2 : 4d0302                   eor abst
                                tst_ax  absrlo,absflo,$ff-fnz
39e5 : 08              >            php         ;save flags
39e6 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
39e9 : f003            >        beq skip3107
                       >        trap            ;failed not equal (non zero)
39eb : 206144          >        jsr sp4_trap_fail 
                       >
39ee :                 >skip3107
                       >
39ee : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
39ef : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
39f1 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
39f4 : f003            >        beq skip3110
                       >        trap            ;failed not equal (non zero)
39f6 : 206144          >        jsr sp4_trap_fail 
                       >
39f9 :                 >skip3110
                       >
                        
39f9 : ca                       dex
39fa : 1002                     bpl teor6
                        
39fc : a203                     ldx #3      ;zp,x
39fe :                  teor6
                                set_ax  absEOa,0
                       >            load_flag 0
39fe : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3a00 : 48              >            pha         ;use stack to load status
3a01 : bd6f02          >            lda absEOa,x    ;precharge accu
3a04 : 28              >            plp
                        
3a05 : 5518                     eor zpEO,x
                                tst_ax  absrlo,absflo,0
3a07 : 08              >            php         ;save flags
3a08 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3a0b : f003            >        beq skip3115
                       >        trap            ;failed not equal (non zero)
3a0d : 206144          >        jsr sp4_trap_fail 
                       >
3a10 :                 >skip3115
                       >
3a10 : 68              >            pla         ;load status
                       >            eor_flag 0
3a11 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3a13 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3a16 : f003            >        beq skip3118
                       >        trap            ;failed not equal (non zero)
3a18 : 206144          >        jsr sp4_trap_fail 
                       >
3a1b :                 >skip3118
                       >
                        
3a1b : ca                       dex
3a1c : 10e0                     bpl teor6
3a1e : a203                     ldx #3
3a20 :                  teor7
                                set_ax  absEOa,$ff
                       >            load_flag $ff
3a20 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3a22 : 48              >            pha         ;use stack to load status
3a23 : bd6f02          >            lda absEOa,x    ;precharge accu
3a26 : 28              >            plp
                        
3a27 : 5518                     eor zpEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
3a29 : 08              >            php         ;save flags
3a2a : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3a2d : f003            >        beq skip3123
                       >        trap            ;failed not equal (non zero)
3a2f : 206144          >        jsr sp4_trap_fail 
                       >
3a32 :                 >skip3123
                       >
3a32 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3a33 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3a35 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3a38 : f003            >        beq skip3126
                       >        trap            ;failed not equal (non zero)
3a3a : 206144          >        jsr sp4_trap_fail 
                       >
3a3d :                 >skip3126
                       >
                        
3a3d : ca                       dex
3a3e : 10e0                     bpl teor7
                        
3a40 : a203                     ldx #3      ;abs,x
3a42 :                  teor8
                                set_ax  absEOa,0
                       >            load_flag 0
3a42 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3a44 : 48              >            pha         ;use stack to load status
3a45 : bd6f02          >            lda absEOa,x    ;precharge accu
3a48 : 28              >            plp
                        
3a49 : 5d6302                   eor absEO,x
                                tst_ax  absrlo,absflo,0
3a4c : 08              >            php         ;save flags
3a4d : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3a50 : f003            >        beq skip3131
                       >        trap            ;failed not equal (non zero)
3a52 : 206144          >        jsr sp4_trap_fail 
                       >
3a55 :                 >skip3131
                       >
3a55 : 68              >            pla         ;load status
                       >            eor_flag 0
3a56 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3a58 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3a5b : f003            >        beq skip3134
                       >        trap            ;failed not equal (non zero)
3a5d : 206144          >        jsr sp4_trap_fail 
                       >
3a60 :                 >skip3134
                       >
                        
3a60 : ca                       dex
3a61 : 10df                     bpl teor8
3a63 : a203                     ldx #3
3a65 :                  teor9
                                set_ax  absEOa,$ff
                       >            load_flag $ff
3a65 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3a67 : 48              >            pha         ;use stack to load status
3a68 : bd6f02          >            lda absEOa,x    ;precharge accu
3a6b : 28              >            plp
                        
3a6c : 5d6302                   eor absEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
3a6f : 08              >            php         ;save flags
3a70 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3a73 : f003            >        beq skip3139
                       >        trap            ;failed not equal (non zero)
3a75 : 206144          >        jsr sp4_trap_fail 
                       >
3a78 :                 >skip3139
                       >
3a78 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3a79 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3a7b : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3a7e : f003            >        beq skip3142
                       >        trap            ;failed not equal (non zero)
3a80 : 206144          >        jsr sp4_trap_fail 
                       >
3a83 :                 >skip3142
                       >
                        
3a83 : ca                       dex
3a84 : 10df                     bpl teor9
                        
3a86 : a003                     ldy #3      ;abs,y
3a88 :                  teor10
                                set_ay  absEOa,0
                       >            load_flag 0
3a88 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3a8a : 48              >            pha         ;use stack to load status
3a8b : b96f02          >            lda absEOa,y    ;precharge accu
3a8e : 28              >            plp
                        
3a8f : 596302                   eor absEO,y
                                tst_ay  absrlo,absflo,0
3a92 : 08              >            php         ;save flags
3a93 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3a96 : f003            >        beq skip3147
                       >        trap            ;failed not equal (non zero)
3a98 : 206144          >        jsr sp4_trap_fail 
                       >
3a9b :                 >skip3147
                       >
3a9b : 68              >            pla         ;load status
                       >            eor_flag 0
3a9c : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3a9e : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3aa1 : f003            >        beq skip3150
                       >        trap            ;failed not equal (non zero)
3aa3 : 206144          >        jsr sp4_trap_fail 
                       >
3aa6 :                 >skip3150
                       >
                        
3aa6 : 88                       dey
3aa7 : 10df                     bpl teor10
3aa9 : a003                     ldy #3
3aab :                  teor11
                                set_ay  absEOa,$ff
                       >            load_flag $ff
3aab : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3aad : 48              >            pha         ;use stack to load status
3aae : b96f02          >            lda absEOa,y    ;precharge accu
3ab1 : 28              >            plp
                        
3ab2 : 596302                   eor absEO,y
                                tst_ay  absrlo,absflo,$ff-fnz
3ab5 : 08              >            php         ;save flags
3ab6 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3ab9 : f003            >        beq skip3155
                       >        trap            ;failed not equal (non zero)
3abb : 206144          >        jsr sp4_trap_fail 
                       >
3abe :                 >skip3155
                       >
3abe : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3abf : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3ac1 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3ac4 : f003            >        beq skip3158
                       >        trap            ;failed not equal (non zero)
3ac6 : 206144          >        jsr sp4_trap_fail 
                       >
3ac9 :                 >skip3158
                       >
                        
3ac9 : 88                       dey
3aca : 10df                     bpl teor11
                        
3acc : a206                     ldx #6      ;(zp,x)
3ace : a003                     ldy #3
3ad0 :                  teor12
                                set_ay  absEOa,0
                       >            load_flag 0
3ad0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3ad2 : 48              >            pha         ;use stack to load status
3ad3 : b96f02          >            lda absEOa,y    ;precharge accu
3ad6 : 28              >            plp
                        
3ad7 : 413a                     eor (indEO,x)
                                tst_ay  absrlo,absflo,0
3ad9 : 08              >            php         ;save flags
3ada : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3add : f003            >        beq skip3163
                       >        trap            ;failed not equal (non zero)
3adf : 206144          >        jsr sp4_trap_fail 
                       >
3ae2 :                 >skip3163
                       >
3ae2 : 68              >            pla         ;load status
                       >            eor_flag 0
3ae3 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3ae5 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3ae8 : f003            >        beq skip3166
                       >        trap            ;failed not equal (non zero)
3aea : 206144          >        jsr sp4_trap_fail 
                       >
3aed :                 >skip3166
                       >
                        
3aed : ca                       dex
3aee : ca                       dex
3aef : 88                       dey
3af0 : 10de                     bpl teor12
3af2 : a206                     ldx #6
3af4 : a003                     ldy #3
3af6 :                  teor13
                                set_ay  absEOa,$ff
                       >            load_flag $ff
3af6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3af8 : 48              >            pha         ;use stack to load status
3af9 : b96f02          >            lda absEOa,y    ;precharge accu
3afc : 28              >            plp
                        
3afd : 413a                     eor (indEO,x)
                                tst_ay  absrlo,absflo,$ff-fnz
3aff : 08              >            php         ;save flags
3b00 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3b03 : f003            >        beq skip3171
                       >        trap            ;failed not equal (non zero)
3b05 : 206144          >        jsr sp4_trap_fail 
                       >
3b08 :                 >skip3171
                       >
3b08 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3b09 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3b0b : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3b0e : f003            >        beq skip3174
                       >        trap            ;failed not equal (non zero)
3b10 : 206144          >        jsr sp4_trap_fail 
                       >
3b13 :                 >skip3174
                       >
                        
3b13 : ca                       dex
3b14 : ca                       dex
3b15 : 88                       dey
3b16 : 10de                     bpl teor13
                        
3b18 : a003                     ldy #3      ;(zp),y
3b1a :                  teor14
                                set_ay  absEOa,0
                       >            load_flag 0
3b1a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3b1c : 48              >            pha         ;use stack to load status
3b1d : b96f02          >            lda absEOa,y    ;precharge accu
3b20 : 28              >            plp
                        
3b21 : 513a                     eor (indEO),y
                                tst_ay  absrlo,absflo,0
3b23 : 08              >            php         ;save flags
3b24 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3b27 : f003            >        beq skip3179
                       >        trap            ;failed not equal (non zero)
3b29 : 206144          >        jsr sp4_trap_fail 
                       >
3b2c :                 >skip3179
                       >
3b2c : 68              >            pla         ;load status
                       >            eor_flag 0
3b2d : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3b2f : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3b32 : f003            >        beq skip3182
                       >        trap            ;failed not equal (non zero)
3b34 : 206144          >        jsr sp4_trap_fail 
                       >
3b37 :                 >skip3182
                       >
                        
3b37 : 88                       dey
3b38 : 10e0                     bpl teor14
3b3a : a003                     ldy #3
3b3c :                  teor15
                                set_ay  absEOa,$ff
                       >            load_flag $ff
3b3c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3b3e : 48              >            pha         ;use stack to load status
3b3f : b96f02          >            lda absEOa,y    ;precharge accu
3b42 : 28              >            plp
                        
3b43 : 513a                     eor (indEO),y
                                tst_ay  absrlo,absflo,$ff-fnz
3b45 : 08              >            php         ;save flags
3b46 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3b49 : f003            >        beq skip3187
                       >        trap            ;failed not equal (non zero)
3b4b : 206144          >        jsr sp4_trap_fail 
                       >
3b4e :                 >skip3187
                       >
3b4e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3b4f : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3b51 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3b54 : f003            >        beq skip3190
                       >        trap            ;failed not equal (non zero)
3b56 : 206144          >        jsr sp4_trap_fail 
                       >
3b59 :                 >skip3190
                       >
                        
3b59 : 88                       dey
3b5a : 10e0                     bpl teor15
                                next_test
3b5c : ad0002          >            lda test_case   ;previous test
3b5f : c927            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3b61 : f003            >        beq skip3193
                       >        trap            ;failed not equal (non zero)
3b63 : 206144          >        jsr sp4_trap_fail 
                       >
3b66 :                 >skip3193
                       >
0028 =                 >test_num = test_num + 1
3b66 : a928            >            lda #test_num   ;*** next tests' number
3b68 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; OR
3b6b : a203                     ldx #3          ;immediate - self modifying code
3b6d : b510             tora    lda zpOR,x
3b6f : 8d1002                   sta ex_orai+1   ;set ORA # operand
                                set_ax  absORa,0
                       >            load_flag 0
3b72 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3b74 : 48              >            pha         ;use stack to load status
3b75 : bd6702          >            lda absORa,x    ;precharge accu
3b78 : 28              >            plp
                        
3b79 : 200f02                   jsr ex_orai     ;execute ORA # in RAM
                                tst_ax  absrlo,absflo,0
3b7c : 08              >            php         ;save flags
3b7d : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3b80 : f003            >        beq skip3198
                       >        trap            ;failed not equal (non zero)
3b82 : 206144          >        jsr sp4_trap_fail 
                       >
3b85 :                 >skip3198
                       >
3b85 : 68              >            pla         ;load status
                       >            eor_flag 0
3b86 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3b88 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3b8b : f003            >        beq skip3201
                       >        trap            ;failed not equal (non zero)
3b8d : 206144          >        jsr sp4_trap_fail 
                       >
3b90 :                 >skip3201
                       >
                        
3b90 : ca                       dex
3b91 : 10da                     bpl tora
3b93 : a203                     ldx #3
3b95 : b510             tora1   lda zpOR,x
3b97 : 8d1002                   sta ex_orai+1   ;set ORA # operand
                                set_ax  absORa,$ff
                       >            load_flag $ff
3b9a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3b9c : 48              >            pha         ;use stack to load status
3b9d : bd6702          >            lda absORa,x    ;precharge accu
3ba0 : 28              >            plp
                        
3ba1 : 200f02                   jsr ex_orai     ;execute ORA # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
3ba4 : 08              >            php         ;save flags
3ba5 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3ba8 : f003            >        beq skip3206
                       >        trap            ;failed not equal (non zero)
3baa : 206144          >        jsr sp4_trap_fail 
                       >
3bad :                 >skip3206
                       >
3bad : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3bae : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3bb0 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3bb3 : f003            >        beq skip3209
                       >        trap            ;failed not equal (non zero)
3bb5 : 206144          >        jsr sp4_trap_fail 
                       >
3bb8 :                 >skip3209
                       >
                        
3bb8 : ca                       dex
3bb9 : 10da                     bpl tora1
                            
3bbb : a203                     ldx #3      ;zp
3bbd : b510             tora2   lda zpOR,x
3bbf : 8502                     sta zpt
                                set_ax  absORa,0
                       >            load_flag 0
3bc1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3bc3 : 48              >            pha         ;use stack to load status
3bc4 : bd6702          >            lda absORa,x    ;precharge accu
3bc7 : 28              >            plp
                        
3bc8 : 0502                     ora zpt
                                tst_ax  absrlo,absflo,0
3bca : 08              >            php         ;save flags
3bcb : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3bce : f003            >        beq skip3214
                       >        trap            ;failed not equal (non zero)
3bd0 : 206144          >        jsr sp4_trap_fail 
                       >
3bd3 :                 >skip3214
                       >
3bd3 : 68              >            pla         ;load status
                       >            eor_flag 0
3bd4 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3bd6 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3bd9 : f003            >        beq skip3217
                       >        trap            ;failed not equal (non zero)
3bdb : 206144          >        jsr sp4_trap_fail 
                       >
3bde :                 >skip3217
                       >
                        
3bde : ca                       dex
3bdf : 10dc                     bpl tora2
3be1 : a203                     ldx #3
3be3 : b510             tora3   lda zpOR,x
3be5 : 8502                     sta zpt
                                set_ax  absORa,$ff
                       >            load_flag $ff
3be7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3be9 : 48              >            pha         ;use stack to load status
3bea : bd6702          >            lda absORa,x    ;precharge accu
3bed : 28              >            plp
                        
3bee : 0502                     ora zpt
                                tst_ax  absrlo,absflo,$ff-fnz
3bf0 : 08              >            php         ;save flags
3bf1 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3bf4 : f003            >        beq skip3222
                       >        trap            ;failed not equal (non zero)
3bf6 : 206144          >        jsr sp4_trap_fail 
                       >
3bf9 :                 >skip3222
                       >
3bf9 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3bfa : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3bfc : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3bff : f003            >        beq skip3225
                       >        trap            ;failed not equal (non zero)
3c01 : 206144          >        jsr sp4_trap_fail 
                       >
3c04 :                 >skip3225
                       >
                        
3c04 : ca                       dex
3c05 : 10dc                     bpl tora3
                        
3c07 : a203                     ldx #3      ;abs
3c09 : b510             tora4   lda zpOR,x
3c0b : 8d0302                   sta abst
                                set_ax  absORa,0
                       >            load_flag 0
3c0e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3c10 : 48              >            pha         ;use stack to load status
3c11 : bd6702          >            lda absORa,x    ;precharge accu
3c14 : 28              >            plp
                        
3c15 : 0d0302                   ora abst
                                tst_ax  absrlo,absflo,0
3c18 : 08              >            php         ;save flags
3c19 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3c1c : f003            >        beq skip3230
                       >        trap            ;failed not equal (non zero)
3c1e : 206144          >        jsr sp4_trap_fail 
                       >
3c21 :                 >skip3230
                       >
3c21 : 68              >            pla         ;load status
                       >            eor_flag 0
3c22 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3c24 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3c27 : f003            >        beq skip3233
                       >        trap            ;failed not equal (non zero)
3c29 : 206144          >        jsr sp4_trap_fail 
                       >
3c2c :                 >skip3233
                       >
                        
3c2c : ca                       dex
3c2d : 10da                     bpl tora4
3c2f : a203                     ldx #3
3c31 : b510             tora5   lda zpOR,x
3c33 : 8d0302                   sta abst
                                set_ax  absORa,$ff
                       >            load_flag $ff
3c36 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3c38 : 48              >            pha         ;use stack to load status
3c39 : bd6702          >            lda absORa,x    ;precharge accu
3c3c : 28              >            plp
                        
3c3d : 0d0302                   ora abst
                                tst_ax  absrlo,absflo,$ff-fnz
3c40 : 08              >            php         ;save flags
3c41 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3c44 : f003            >        beq skip3238
                       >        trap            ;failed not equal (non zero)
3c46 : 206144          >        jsr sp4_trap_fail 
                       >
3c49 :                 >skip3238
                       >
3c49 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3c4a : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3c4c : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3c4f : f003            >        beq skip3241
                       >        trap            ;failed not equal (non zero)
3c51 : 206144          >        jsr sp4_trap_fail 
                       >
3c54 :                 >skip3241
                       >
                        
3c54 : ca                       dex
3c55 : 1002                     bpl tora6
                        
3c57 : a203                     ldx #3      ;zp,x
3c59 :                  tora6
                                set_ax  absORa,0
                       >            load_flag 0
3c59 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3c5b : 48              >            pha         ;use stack to load status
3c5c : bd6702          >            lda absORa,x    ;precharge accu
3c5f : 28              >            plp
                        
3c60 : 1510                     ora zpOR,x
                                tst_ax  absrlo,absflo,0
3c62 : 08              >            php         ;save flags
3c63 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3c66 : f003            >        beq skip3246
                       >        trap            ;failed not equal (non zero)
3c68 : 206144          >        jsr sp4_trap_fail 
                       >
3c6b :                 >skip3246
                       >
3c6b : 68              >            pla         ;load status
                       >            eor_flag 0
3c6c : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3c6e : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3c71 : f003            >        beq skip3249
                       >        trap            ;failed not equal (non zero)
3c73 : 206144          >        jsr sp4_trap_fail 
                       >
3c76 :                 >skip3249
                       >
                        
3c76 : ca                       dex
3c77 : 10e0                     bpl tora6
3c79 : a203                     ldx #3
3c7b :                  tora7
                                set_ax  absORa,$ff
                       >            load_flag $ff
3c7b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3c7d : 48              >            pha         ;use stack to load status
3c7e : bd6702          >            lda absORa,x    ;precharge accu
3c81 : 28              >            plp
                        
3c82 : 1510                     ora zpOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
3c84 : 08              >            php         ;save flags
3c85 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3c88 : f003            >        beq skip3254
                       >        trap            ;failed not equal (non zero)
3c8a : 206144          >        jsr sp4_trap_fail 
                       >
3c8d :                 >skip3254
                       >
3c8d : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3c8e : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3c90 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3c93 : f003            >        beq skip3257
                       >        trap            ;failed not equal (non zero)
3c95 : 206144          >        jsr sp4_trap_fail 
                       >
3c98 :                 >skip3257
                       >
                        
3c98 : ca                       dex
3c99 : 10e0                     bpl tora7
                        
3c9b : a203                     ldx #3      ;abs,x
3c9d :                  tora8
                                set_ax  absORa,0
                       >            load_flag 0
3c9d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3c9f : 48              >            pha         ;use stack to load status
3ca0 : bd6702          >            lda absORa,x    ;precharge accu
3ca3 : 28              >            plp
                        
3ca4 : 1d5b02                   ora absOR,x
                                tst_ax  absrlo,absflo,0
3ca7 : 08              >            php         ;save flags
3ca8 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3cab : f003            >        beq skip3262
                       >        trap            ;failed not equal (non zero)
3cad : 206144          >        jsr sp4_trap_fail 
                       >
3cb0 :                 >skip3262
                       >
3cb0 : 68              >            pla         ;load status
                       >            eor_flag 0
3cb1 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3cb3 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3cb6 : f003            >        beq skip3265
                       >        trap            ;failed not equal (non zero)
3cb8 : 206144          >        jsr sp4_trap_fail 
                       >
3cbb :                 >skip3265
                       >
                        
3cbb : ca                       dex
3cbc : 10df                     bpl tora8
3cbe : a203                     ldx #3
3cc0 :                  tora9
                                set_ax  absORa,$ff
                       >            load_flag $ff
3cc0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3cc2 : 48              >            pha         ;use stack to load status
3cc3 : bd6702          >            lda absORa,x    ;precharge accu
3cc6 : 28              >            plp
                        
3cc7 : 1d5b02                   ora absOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
3cca : 08              >            php         ;save flags
3ccb : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3cce : f003            >        beq skip3270
                       >        trap            ;failed not equal (non zero)
3cd0 : 206144          >        jsr sp4_trap_fail 
                       >
3cd3 :                 >skip3270
                       >
3cd3 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3cd4 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3cd6 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3cd9 : f003            >        beq skip3273
                       >        trap            ;failed not equal (non zero)
3cdb : 206144          >        jsr sp4_trap_fail 
                       >
3cde :                 >skip3273
                       >
                        
3cde : ca                       dex
3cdf : 10df                     bpl tora9
                        
3ce1 : a003                     ldy #3      ;abs,y
3ce3 :                  tora10
                                set_ay  absORa,0
                       >            load_flag 0
3ce3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3ce5 : 48              >            pha         ;use stack to load status
3ce6 : b96702          >            lda absORa,y    ;precharge accu
3ce9 : 28              >            plp
                        
3cea : 195b02                   ora absOR,y
                                tst_ay  absrlo,absflo,0
3ced : 08              >            php         ;save flags
3cee : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3cf1 : f003            >        beq skip3278
                       >        trap            ;failed not equal (non zero)
3cf3 : 206144          >        jsr sp4_trap_fail 
                       >
3cf6 :                 >skip3278
                       >
3cf6 : 68              >            pla         ;load status
                       >            eor_flag 0
3cf7 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3cf9 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3cfc : f003            >        beq skip3281
                       >        trap            ;failed not equal (non zero)
3cfe : 206144          >        jsr sp4_trap_fail 
                       >
3d01 :                 >skip3281
                       >
                        
3d01 : 88                       dey
3d02 : 10df                     bpl tora10
3d04 : a003                     ldy #3
3d06 :                  tora11
                                set_ay  absORa,$ff
                       >            load_flag $ff
3d06 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3d08 : 48              >            pha         ;use stack to load status
3d09 : b96702          >            lda absORa,y    ;precharge accu
3d0c : 28              >            plp
                        
3d0d : 195b02                   ora absOR,y
                                tst_ay  absrlo,absflo,$ff-fnz
3d10 : 08              >            php         ;save flags
3d11 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3d14 : f003            >        beq skip3286
                       >        trap            ;failed not equal (non zero)
3d16 : 206144          >        jsr sp4_trap_fail 
                       >
3d19 :                 >skip3286
                       >
3d19 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3d1a : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3d1c : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3d1f : f003            >        beq skip3289
                       >        trap            ;failed not equal (non zero)
3d21 : 206144          >        jsr sp4_trap_fail 
                       >
3d24 :                 >skip3289
                       >
                        
3d24 : 88                       dey
3d25 : 10df                     bpl tora11
                        
3d27 : a206                     ldx #6      ;(zp,x)
3d29 : a003                     ldy #3
3d2b :                  tora12
                                set_ay  absORa,0
                       >            load_flag 0
3d2b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3d2d : 48              >            pha         ;use stack to load status
3d2e : b96702          >            lda absORa,y    ;precharge accu
3d31 : 28              >            plp
                        
3d32 : 0142                     ora (indOR,x)
                                tst_ay  absrlo,absflo,0
3d34 : 08              >            php         ;save flags
3d35 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3d38 : f003            >        beq skip3294
                       >        trap            ;failed not equal (non zero)
3d3a : 206144          >        jsr sp4_trap_fail 
                       >
3d3d :                 >skip3294
                       >
3d3d : 68              >            pla         ;load status
                       >            eor_flag 0
3d3e : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3d40 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3d43 : f003            >        beq skip3297
                       >        trap            ;failed not equal (non zero)
3d45 : 206144          >        jsr sp4_trap_fail 
                       >
3d48 :                 >skip3297
                       >
                        
3d48 : ca                       dex
3d49 : ca                       dex
3d4a : 88                       dey
3d4b : 10de                     bpl tora12
3d4d : a206                     ldx #6
3d4f : a003                     ldy #3
3d51 :                  tora13
                                set_ay  absORa,$ff
                       >            load_flag $ff
3d51 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3d53 : 48              >            pha         ;use stack to load status
3d54 : b96702          >            lda absORa,y    ;precharge accu
3d57 : 28              >            plp
                        
3d58 : 0142                     ora (indOR,x)
                                tst_ay  absrlo,absflo,$ff-fnz
3d5a : 08              >            php         ;save flags
3d5b : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3d5e : f003            >        beq skip3302
                       >        trap            ;failed not equal (non zero)
3d60 : 206144          >        jsr sp4_trap_fail 
                       >
3d63 :                 >skip3302
                       >
3d63 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3d64 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3d66 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3d69 : f003            >        beq skip3305
                       >        trap            ;failed not equal (non zero)
3d6b : 206144          >        jsr sp4_trap_fail 
                       >
3d6e :                 >skip3305
                       >
                        
3d6e : ca                       dex
3d6f : ca                       dex
3d70 : 88                       dey
3d71 : 10de                     bpl tora13
                        
3d73 : a003                     ldy #3      ;(zp),y
3d75 :                  tora14
                                set_ay  absORa,0
                       >            load_flag 0
3d75 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3d77 : 48              >            pha         ;use stack to load status
3d78 : b96702          >            lda absORa,y    ;precharge accu
3d7b : 28              >            plp
                        
3d7c : 1142                     ora (indOR),y
                                tst_ay  absrlo,absflo,0
3d7e : 08              >            php         ;save flags
3d7f : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3d82 : f003            >        beq skip3310
                       >        trap            ;failed not equal (non zero)
3d84 : 206144          >        jsr sp4_trap_fail 
                       >
3d87 :                 >skip3310
                       >
3d87 : 68              >            pla         ;load status
                       >            eor_flag 0
3d88 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3d8a : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3d8d : f003            >        beq skip3313
                       >        trap            ;failed not equal (non zero)
3d8f : 206144          >        jsr sp4_trap_fail 
                       >
3d92 :                 >skip3313
                       >
                        
3d92 : 88                       dey
3d93 : 10e0                     bpl tora14
3d95 : a003                     ldy #3
3d97 :                  tora15
                                set_ay  absORa,$ff
                       >            load_flag $ff
3d97 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3d99 : 48              >            pha         ;use stack to load status
3d9a : b96702          >            lda absORa,y    ;precharge accu
3d9d : 28              >            plp
                        
3d9e : 1142                     ora (indOR),y
                                tst_ay  absrlo,absflo,$ff-fnz
3da0 : 08              >            php         ;save flags
3da1 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3da4 : f003            >        beq skip3318
                       >        trap            ;failed not equal (non zero)
3da6 : 206144          >        jsr sp4_trap_fail 
                       >
3da9 :                 >skip3318
                       >
3da9 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3daa : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3dac : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3daf : f003            >        beq skip3321
                       >        trap            ;failed not equal (non zero)
3db1 : 206144          >        jsr sp4_trap_fail 
                       >
3db4 :                 >skip3321
                       >
                        
3db4 : 88                       dey
3db5 : 10e0                     bpl tora15
                            if I_flag = 3
3db7 : 58                       cli
                            endif                
                                next_test
3db8 : ad0002          >            lda test_case   ;previous test
3dbb : c928            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3dbd : f003            >        beq skip3324
                       >        trap            ;failed not equal (non zero)
3dbf : 206144          >        jsr sp4_trap_fail 
                       >
3dc2 :                 >skip3324
                       >
0029 =                 >test_num = test_num + 1
3dc2 : a929            >            lda #test_num   ;*** next tests' number
3dc4 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
3dc7 : d8                       cld
3dc8 : a204                     ldx #ad2        ;for indexed test
3dca : a0ff                     ldy #$ff        ;max range
3dcc : a900                     lda #0          ;start with adding zeroes & no carry
3dce : 8502                     sta adfc        ;carry in - for diag
3dd0 : 8503                     sta ad1         ;operand 1 - accumulator
3dd2 : 8504                     sta ad2         ;operand 2 - memory or immediate
3dd4 : 8d0302                   sta ada2        ;non zp
3dd7 : 8505                     sta adrl        ;expected result bits 0-7
3dd9 : 8506                     sta adrh        ;expected result bit 8 (carry out)
3ddb : a9ff                     lda #$ff        ;complemented operand 2 for subtract
3ddd : 8508                     sta sb2
3ddf : 8d0402                   sta sba2        ;non zp
3de2 : a902                     lda #2          ;expected Z-flag
3de4 : 8507                     sta adrf
3de6 : 18               tadd    clc             ;test with carry clear
3de7 : 20dc40                   jsr chkadd
3dea : e602                     inc adfc        ;now with carry
3dec : e605                     inc adrl        ;result +1
3dee : 08                       php             ;save N & Z from low result
3def : 08                       php
3df0 : 68                       pla             ;accu holds expected flags
3df1 : 2982                     and #$82        ;mask N & Z
3df3 : 28                       plp
3df4 : d002                     bne tadd1
3df6 : e606                     inc adrh        ;result bit 8 - carry
3df8 : 0506             tadd1   ora adrh        ;merge C to expected flags
3dfa : 8507                     sta adrf        ;save expected flags except overflow
3dfc : 38                       sec             ;test with carry set
3dfd : 20dc40                   jsr chkadd
3e00 : c602                     dec adfc        ;same for operand +1 but no carry
3e02 : e603                     inc ad1
3e04 : d0e0                     bne tadd        ;iterate op1
3e06 : a900                     lda #0          ;preset result to op2 when op1 = 0
3e08 : 8506                     sta adrh
3e0a : ee0302                   inc ada2
3e0d : e604                     inc ad2
3e0f : 08                       php             ;save NZ as operand 2 becomes the new result
3e10 : 68                       pla
3e11 : 2982                     and #$82        ;mask N00000Z0
3e13 : 8507                     sta adrf        ;no need to check carry as we are adding to 0
3e15 : c608                     dec sb2         ;complement subtract operand 2
3e17 : ce0402                   dec sba2
3e1a : a504                     lda ad2         
3e1c : 8505                     sta adrl
3e1e : d0c6                     bne tadd        ;iterate op2
                            if disable_decimal < 1
                                next_test
3e20 : ad0002          >            lda test_case   ;previous test
3e23 : c929            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3e25 : f003            >        beq skip3327
                       >        trap            ;failed not equal (non zero)
3e27 : 206144          >        jsr sp4_trap_fail 
                       >
3e2a :                 >skip3327
                       >
002a =                 >test_num = test_num + 1
3e2a : a92a            >            lda #test_num   ;*** next tests' number
3e2c : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
3e2f : f8                       sed 
3e30 : a204                     ldx #ad2        ;for indexed test
3e32 : a0ff                     ldy #$ff        ;max range
3e34 : a999                     lda #$99        ;start with adding 99 to 99 with carry
3e36 : 8503                     sta ad1         ;operand 1 - accumulator
3e38 : 8504                     sta ad2         ;operand 2 - memory or immediate
3e3a : 8d0302                   sta ada2        ;non zp
3e3d : 8505                     sta adrl        ;expected result bits 0-7
3e3f : a901                     lda #1          ;set carry in & out
3e41 : 8502                     sta adfc        ;carry in - for diag
3e43 : 8506                     sta adrh        ;expected result bit 8 (carry out)
3e45 : a900                     lda #0          ;complemented operand 2 for subtract
3e47 : 8508                     sta sb2
3e49 : 8d0402                   sta sba2        ;non zp
3e4c : 38               tdad    sec             ;test with carry set
3e4d : 20493f                   jsr chkdad
3e50 : c602                     dec adfc        ;now with carry clear
3e52 : a505                     lda adrl        ;decimal adjust result
3e54 : d008                     bne tdad1       ;skip clear carry & preset result 99 (9A-1)
3e56 : c606                     dec adrh
3e58 : a999                     lda #$99
3e5a : 8505                     sta adrl
3e5c : d012                     bne tdad3
3e5e : 290f             tdad1   and #$f         ;lower nibble mask
3e60 : d00c                     bne tdad2       ;no decimal adjust needed
3e62 : c605                     dec adrl        ;decimal adjust (?0-6)
3e64 : c605                     dec adrl
3e66 : c605                     dec adrl
3e68 : c605                     dec adrl
3e6a : c605                     dec adrl
3e6c : c605                     dec adrl
3e6e : c605             tdad2   dec adrl        ;result -1
3e70 : 18               tdad3   clc             ;test with carry clear
3e71 : 20493f                   jsr chkdad
3e74 : e602                     inc adfc        ;same for operand -1 but with carry
3e76 : a503                     lda ad1         ;decimal adjust operand 1
3e78 : f015                     beq tdad5       ;iterate operand 2
3e7a : 290f                     and #$f         ;lower nibble mask
3e7c : d00c                     bne tdad4       ;skip decimal adjust
3e7e : c603                     dec ad1         ;decimal adjust (?0-6)
3e80 : c603                     dec ad1
3e82 : c603                     dec ad1
3e84 : c603                     dec ad1
3e86 : c603                     dec ad1
3e88 : c603                     dec ad1
3e8a : c603             tdad4   dec ad1         ;operand 1 -1
3e8c : 4c4c3e                   jmp tdad        ;iterate op1
                        
3e8f : a999             tdad5   lda #$99        ;precharge op1 max
3e91 : 8503                     sta ad1
3e93 : a504                     lda ad2         ;decimal adjust operand 2
3e95 : f030                     beq tdad7       ;end of iteration
3e97 : 290f                     and #$f         ;lower nibble mask
3e99 : d018                     bne tdad6       ;skip decimal adjust
3e9b : c604                     dec ad2         ;decimal adjust (?0-6)
3e9d : c604                     dec ad2
3e9f : c604                     dec ad2
3ea1 : c604                     dec ad2
3ea3 : c604                     dec ad2
3ea5 : c604                     dec ad2
3ea7 : e608                     inc sb2         ;complemented decimal adjust for subtract (?9+6)
3ea9 : e608                     inc sb2
3eab : e608                     inc sb2
3ead : e608                     inc sb2
3eaf : e608                     inc sb2
3eb1 : e608                     inc sb2
3eb3 : c604             tdad6   dec ad2         ;operand 2 -1
3eb5 : e608                     inc sb2         ;complemented operand for subtract
3eb7 : a508                     lda sb2
3eb9 : 8d0402                   sta sba2        ;copy as non zp operand
3ebc : a504                     lda ad2
3ebe : 8d0302                   sta ada2        ;copy as non zp operand
3ec1 : 8505                     sta adrl        ;new result since op1+carry=00+carry +op2=op2
3ec3 : e606                     inc adrh        ;result carry
3ec5 : d085                     bne tdad        ;iterate op2
3ec7 :                  tdad7
                                next_test
3ec7 : ad0002          >            lda test_case   ;previous test
3eca : c92a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3ecc : f003            >        beq skip3330
                       >        trap            ;failed not equal (non zero)
3ece : 206144          >        jsr sp4_trap_fail 
                       >
3ed1 :                 >skip3330
                       >
002b =                 >test_num = test_num + 1
3ed1 : a92b            >            lda #test_num   ;*** next tests' number
3ed3 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; decimal/binary switch test
                        ; tests CLD, SED, PLP, RTI to properly switch between decimal & binary opcode
                        ;   tables
3ed6 : 18                       clc
3ed7 : d8                       cld
3ed8 : 08                       php
3ed9 : a955                     lda #$55
3edb : 6955                     adc #$55
3edd : c9aa                     cmp #$aa
                                trap_ne         ;expected binary result after cld
3edf : f003            >        beq skip3332
                       >        trap            ;failed not equal (non zero)
3ee1 : 206144          >        jsr sp4_trap_fail 
                       >
3ee4 :                 >skip3332
                        
3ee4 : 18                       clc
3ee5 : f8                       sed
3ee6 : 08                       php
3ee7 : a955                     lda #$55
3ee9 : 6955                     adc #$55
3eeb : c910                     cmp #$10
                                trap_ne         ;expected decimal result after sed
3eed : f003            >        beq skip3334
                       >        trap            ;failed not equal (non zero)
3eef : 206144          >        jsr sp4_trap_fail 
                       >
3ef2 :                 >skip3334
                        
3ef2 : d8                       cld
3ef3 : 28                       plp
3ef4 : a955                     lda #$55
3ef6 : 6955                     adc #$55
3ef8 : c910                     cmp #$10
                                trap_ne         ;expected decimal result after plp D=1
3efa : f003            >        beq skip3336
                       >        trap            ;failed not equal (non zero)
3efc : 206144          >        jsr sp4_trap_fail 
                       >
3eff :                 >skip3336
                        
3eff : 28                       plp
3f00 : a955                     lda #$55
3f02 : 6955                     adc #$55
3f04 : c9aa                     cmp #$aa
                                trap_ne         ;expected binary result after plp D=0
3f06 : f003            >        beq skip3338
                       >        trap            ;failed not equal (non zero)
3f08 : 206144          >        jsr sp4_trap_fail 
                       >
3f0b :                 >skip3338
                        
3f0b : 18                       clc
3f0c : a93f                     lda #hi bin_rti_ret ;emulated interrupt for rti
3f0e : 48                       pha
3f0f : a929                     lda #lo bin_rti_ret
3f11 : 48                       pha
3f12 : 08                       php
3f13 : f8                       sed
3f14 : a93f                     lda #hi dec_rti_ret ;emulated interrupt for rti
3f16 : 48                       pha
3f17 : a91d                     lda #lo dec_rti_ret
3f19 : 48                       pha
3f1a : 08                       php
3f1b : d8                       cld
3f1c : 40                       rti
3f1d :                  dec_rti_ret
3f1d : a955                     lda #$55
3f1f : 6955                     adc #$55
3f21 : c910                     cmp #$10
                                trap_ne         ;expected decimal result after rti D=1
3f23 : f003            >        beq skip3340
                       >        trap            ;failed not equal (non zero)
3f25 : 206144          >        jsr sp4_trap_fail 
                       >
3f28 :                 >skip3340
                        
3f28 : 40                       rti
3f29 :                  bin_rti_ret        
3f29 : a955                     lda #$55
3f2b : 6955                     adc #$55
3f2d : c9aa                     cmp #$aa
                                trap_ne         ;expected binary result after rti D=0
3f2f : f003            >        beq skip3342
                       >        trap            ;failed not equal (non zero)
3f31 : 206144          >        jsr sp4_trap_fail 
                       >
3f34 :                 >skip3342
                        
                            endif
                            
3f34 : ad0002                   lda test_case
3f37 : c92b                     cmp #test_num
                                trap_ne         ;previous test is out of sequence
3f39 : f003            >        beq skip3344
                       >        trap            ;failed not equal (non zero)
3f3b : 206144          >        jsr sp4_trap_fail 
                       >
3f3e :                 >skip3344
                        
3f3e : a9f0                     lda #$f0        ;mark opcode testing complete
3f40 : 8d0002                   sta test_case
                                
                        ; final RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                                check_ram
                       >            ;RAM check disabled - RAM size not set
                        
                        ; *** DEBUG INFO ***
                        ; to debug checksum errors uncomment check_ram in the next_test macro to
                        ; narrow down the responsible opcode.
                        ; may give false errors when monitor, OS or other background activity is
                        ; allowed during previous tests.
                        
                        
                        ; S U C C E S S ************************************************
                        ; -------------       
                                success         ;if you get here everything went well
3f43 : 207144          >        jsr sp4_trap_success 
                        
                        ; -------------       
                        ; S U C C E S S ************************************************
                                
3f46 : 4c0004           	jmp	start; show successfull run on IO-card
                        
                            if disable_decimal < 1
                        ; core subroutine of the decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
3f49 :                  chkdad
                        ; decimal ADC / SBC zp
3f49 : 08                       php             ;save carry for subtract
3f4a : a503                     lda ad1
3f4c : 6504                     adc ad2         ;perform add
3f4e : 08                       php          
3f4f : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
3f51 : f003            >        beq skip3348
                       >        trap            ;failed not equal (non zero)
3f53 : 206144          >        jsr sp4_trap_fail 
                       >
3f56 :                 >skip3348
                        
3f56 : 68                       pla             ;check flags
3f57 : 2901                     and #1          ;mask carry
3f59 : c506                     cmp adrh
                                trap_ne         ;bad carry
3f5b : f003            >        beq skip3350
                       >        trap            ;failed not equal (non zero)
3f5d : 206144          >        jsr sp4_trap_fail 
                       >
3f60 :                 >skip3350
                        
3f60 : 28                       plp
3f61 : 08                       php             ;save carry for next add
3f62 : a503                     lda ad1
3f64 : e508                     sbc sb2         ;perform subtract
3f66 : 08                       php          
3f67 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
3f69 : f003            >        beq skip3352
                       >        trap            ;failed not equal (non zero)
3f6b : 206144          >        jsr sp4_trap_fail 
                       >
3f6e :                 >skip3352
                        
3f6e : 68                       pla             ;check flags
3f6f : 2901                     and #1          ;mask carry
3f71 : c506                     cmp adrh
                                trap_ne         ;bad flags
3f73 : f003            >        beq skip3354
                       >        trap            ;failed not equal (non zero)
3f75 : 206144          >        jsr sp4_trap_fail 
                       >
3f78 :                 >skip3354
                        
3f78 : 28                       plp
                        ; decimal ADC / SBC abs
3f79 : 08                       php             ;save carry for subtract
3f7a : a503                     lda ad1
3f7c : 6d0302                   adc ada2        ;perform add
3f7f : 08                       php          
3f80 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
3f82 : f003            >        beq skip3356
                       >        trap            ;failed not equal (non zero)
3f84 : 206144          >        jsr sp4_trap_fail 
                       >
3f87 :                 >skip3356
                        
3f87 : 68                       pla             ;check flags
3f88 : 2901                     and #1          ;mask carry
3f8a : c506                     cmp adrh
                                trap_ne         ;bad carry
3f8c : f003            >        beq skip3358
                       >        trap            ;failed not equal (non zero)
3f8e : 206144          >        jsr sp4_trap_fail 
                       >
3f91 :                 >skip3358
                        
3f91 : 28                       plp
3f92 : 08                       php             ;save carry for next add
3f93 : a503                     lda ad1
3f95 : ed0402                   sbc sba2        ;perform subtract
3f98 : 08                       php          
3f99 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
3f9b : f003            >        beq skip3360
                       >        trap            ;failed not equal (non zero)
3f9d : 206144          >        jsr sp4_trap_fail 
                       >
3fa0 :                 >skip3360
                        
3fa0 : 68                       pla             ;check flags
3fa1 : 2901                     and #1          ;mask carry
3fa3 : c506                     cmp adrh
                                trap_ne         ;bad carry
3fa5 : f003            >        beq skip3362
                       >        trap            ;failed not equal (non zero)
3fa7 : 206144          >        jsr sp4_trap_fail 
                       >
3faa :                 >skip3362
                        
3faa : 28                       plp
                        ; decimal ADC / SBC #
3fab : 08                       php             ;save carry for subtract
3fac : a504                     lda ad2
3fae : 8d1302                   sta ex_adci+1   ;set ADC # operand
3fb1 : a503                     lda ad1
3fb3 : 201202                   jsr ex_adci     ;execute ADC # in RAM
3fb6 : 08                       php          
3fb7 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
3fb9 : f003            >        beq skip3364
                       >        trap            ;failed not equal (non zero)
3fbb : 206144          >        jsr sp4_trap_fail 
                       >
3fbe :                 >skip3364
                        
3fbe : 68                       pla             ;check flags
3fbf : 2901                     and #1          ;mask carry
3fc1 : c506                     cmp adrh
                                trap_ne         ;bad carry
3fc3 : f003            >        beq skip3366
                       >        trap            ;failed not equal (non zero)
3fc5 : 206144          >        jsr sp4_trap_fail 
                       >
3fc8 :                 >skip3366
                        
3fc8 : 28                       plp
3fc9 : 08                       php             ;save carry for next add
3fca : a508                     lda sb2
3fcc : 8d1602                   sta ex_sbci+1   ;set SBC # operand
3fcf : a503                     lda ad1
3fd1 : 201502                   jsr ex_sbci     ;execute SBC # in RAM
3fd4 : 08                       php          
3fd5 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
3fd7 : f003            >        beq skip3368
                       >        trap            ;failed not equal (non zero)
3fd9 : 206144          >        jsr sp4_trap_fail 
                       >
3fdc :                 >skip3368
                        
3fdc : 68                       pla             ;check flags
3fdd : 2901                     and #1          ;mask carry
3fdf : c506                     cmp adrh
                                trap_ne         ;bad carry
3fe1 : f003            >        beq skip3370
                       >        trap            ;failed not equal (non zero)
3fe3 : 206144          >        jsr sp4_trap_fail 
                       >
3fe6 :                 >skip3370
                        
3fe6 : 28                       plp
                        ; decimal ADC / SBC zp,x
3fe7 : 08                       php             ;save carry for subtract
3fe8 : a503                     lda ad1
3fea : 7500                     adc 0,x         ;perform add
3fec : 08                       php          
3fed : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
3fef : f003            >        beq skip3372
                       >        trap            ;failed not equal (non zero)
3ff1 : 206144          >        jsr sp4_trap_fail 
                       >
3ff4 :                 >skip3372
                        
3ff4 : 68                       pla             ;check flags
3ff5 : 2901                     and #1          ;mask carry
3ff7 : c506                     cmp adrh
                                trap_ne         ;bad carry
3ff9 : f003            >        beq skip3374
                       >        trap            ;failed not equal (non zero)
3ffb : 206144          >        jsr sp4_trap_fail 
                       >
3ffe :                 >skip3374
                        
3ffe : 28                       plp
3fff : 08                       php             ;save carry for next add
4000 : a503                     lda ad1
4002 : f504                     sbc sb2-ad2,x   ;perform subtract
4004 : 08                       php          
4005 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
4007 : f003            >        beq skip3376
                       >        trap            ;failed not equal (non zero)
4009 : 206144          >        jsr sp4_trap_fail 
                       >
400c :                 >skip3376
                        
400c : 68                       pla             ;check flags
400d : 2901                     and #1          ;mask carry
400f : c506                     cmp adrh
                                trap_ne         ;bad carry
4011 : f003            >        beq skip3378
                       >        trap            ;failed not equal (non zero)
4013 : 206144          >        jsr sp4_trap_fail 
                       >
4016 :                 >skip3378
                        
4016 : 28                       plp
                        ; decimal ADC / SBC abs,x
4017 : 08                       php             ;save carry for subtract
4018 : a503                     lda ad1
401a : 7dff01                   adc ada2-ad2,x  ;perform add
401d : 08                       php          
401e : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
4020 : f003            >        beq skip3380
                       >        trap            ;failed not equal (non zero)
4022 : 206144          >        jsr sp4_trap_fail 
                       >
4025 :                 >skip3380
                        
4025 : 68                       pla             ;check flags
4026 : 2901                     and #1          ;mask carry
4028 : c506                     cmp adrh
                                trap_ne         ;bad carry
402a : f003            >        beq skip3382
                       >        trap            ;failed not equal (non zero)
402c : 206144          >        jsr sp4_trap_fail 
                       >
402f :                 >skip3382
                        
402f : 28                       plp
4030 : 08                       php             ;save carry for next add
4031 : a503                     lda ad1
4033 : fd0002                   sbc sba2-ad2,x  ;perform subtract
4036 : 08                       php          
4037 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
4039 : f003            >        beq skip3384
                       >        trap            ;failed not equal (non zero)
403b : 206144          >        jsr sp4_trap_fail 
                       >
403e :                 >skip3384
                        
403e : 68                       pla             ;check flags
403f : 2901                     and #1          ;mask carry
4041 : c506                     cmp adrh
                                trap_ne         ;bad carry
4043 : f003            >        beq skip3386
                       >        trap            ;failed not equal (non zero)
4045 : 206144          >        jsr sp4_trap_fail 
                       >
4048 :                 >skip3386
                        
4048 : 28                       plp
                        ; decimal ADC / SBC abs,y
4049 : 08                       php             ;save carry for subtract
404a : a503                     lda ad1
404c : 790401                   adc ada2-$ff,y  ;perform add
404f : 08                       php          
4050 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
4052 : f003            >        beq skip3388
                       >        trap            ;failed not equal (non zero)
4054 : 206144          >        jsr sp4_trap_fail 
                       >
4057 :                 >skip3388
                        
4057 : 68                       pla             ;check flags
4058 : 2901                     and #1          ;mask carry
405a : c506                     cmp adrh
                                trap_ne         ;bad carry
405c : f003            >        beq skip3390
                       >        trap            ;failed not equal (non zero)
405e : 206144          >        jsr sp4_trap_fail 
                       >
4061 :                 >skip3390
                        
4061 : 28                       plp
4062 : 08                       php             ;save carry for next add
4063 : a503                     lda ad1
4065 : f90501                   sbc sba2-$ff,y  ;perform subtract
4068 : 08                       php          
4069 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
406b : f003            >        beq skip3392
                       >        trap            ;failed not equal (non zero)
406d : 206144          >        jsr sp4_trap_fail 
                       >
4070 :                 >skip3392
                        
4070 : 68                       pla             ;check flags
4071 : 2901                     and #1          ;mask carry
4073 : c506                     cmp adrh
                                trap_ne         ;bad carry
4075 : f003            >        beq skip3394
                       >        trap            ;failed not equal (non zero)
4077 : 206144          >        jsr sp4_trap_fail 
                       >
407a :                 >skip3394
                        
407a : 28                       plp
                        ; decimal ADC / SBC (zp,x)
407b : 08                       php             ;save carry for subtract
407c : a503                     lda ad1
407e : 6146                     adc (lo adi2-ad2,x) ;perform add
4080 : 08                       php          
4081 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
4083 : f003            >        beq skip3396
                       >        trap            ;failed not equal (non zero)
4085 : 206144          >        jsr sp4_trap_fail 
                       >
4088 :                 >skip3396
                        
4088 : 68                       pla             ;check flags
4089 : 2901                     and #1          ;mask carry
408b : c506                     cmp adrh
                                trap_ne         ;bad carry
408d : f003            >        beq skip3398
                       >        trap            ;failed not equal (non zero)
408f : 206144          >        jsr sp4_trap_fail 
                       >
4092 :                 >skip3398
                        
4092 : 28                       plp
4093 : 08                       php             ;save carry for next add
4094 : a503                     lda ad1
4096 : e148                     sbc (lo sbi2-ad2,x) ;perform subtract
4098 : 08                       php          
4099 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
409b : f003            >        beq skip3400
                       >        trap            ;failed not equal (non zero)
409d : 206144          >        jsr sp4_trap_fail 
                       >
40a0 :                 >skip3400
                        
40a0 : 68                       pla             ;check flags
40a1 : 2901                     and #1          ;mask carry
40a3 : c506                     cmp adrh
                                trap_ne         ;bad carry
40a5 : f003            >        beq skip3402
                       >        trap            ;failed not equal (non zero)
40a7 : 206144          >        jsr sp4_trap_fail 
                       >
40aa :                 >skip3402
                        
40aa : 28                       plp
                        ; decimal ADC / SBC (abs),y
40ab : 08                       php             ;save carry for subtract
40ac : a503                     lda ad1
40ae : 714e                     adc (adiy2),y   ;perform add
40b0 : 08                       php          
40b1 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
40b3 : f003            >        beq skip3404
                       >        trap            ;failed not equal (non zero)
40b5 : 206144          >        jsr sp4_trap_fail 
                       >
40b8 :                 >skip3404
                        
40b8 : 68                       pla             ;check flags
40b9 : 2901                     and #1          ;mask carry
40bb : c506                     cmp adrh
                                trap_ne         ;bad carry
40bd : f003            >        beq skip3406
                       >        trap            ;failed not equal (non zero)
40bf : 206144          >        jsr sp4_trap_fail 
                       >
40c2 :                 >skip3406
                        
40c2 : 28                       plp
40c3 : 08                       php             ;save carry for next add
40c4 : a503                     lda ad1
40c6 : f150                     sbc (sbiy2),y   ;perform subtract
40c8 : 08                       php          
40c9 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
40cb : f003            >        beq skip3408
                       >        trap            ;failed not equal (non zero)
40cd : 206144          >        jsr sp4_trap_fail 
                       >
40d0 :                 >skip3408
                        
40d0 : 68                       pla             ;check flags
40d1 : 2901                     and #1          ;mask carry
40d3 : c506                     cmp adrh
                                trap_ne         ;bad carry
40d5 : f003            >        beq skip3410
                       >        trap            ;failed not equal (non zero)
40d7 : 206144          >        jsr sp4_trap_fail 
                       >
40da :                 >skip3410
                        
40da : 28                       plp
40db : 60                       rts
                            endif
                        
                        ; core subroutine of the full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
40dc : a507             chkadd  lda adrf        ;add V-flag if overflow
40de : 2983                     and #$83        ;keep N-----ZC / clear V
40e0 : 48                       pha
40e1 : a503                     lda ad1         ;test sign unequal between operands
40e3 : 4504                     eor ad2
40e5 : 300a                     bmi ckad1       ;no overflow possible - operands have different sign
40e7 : a503                     lda ad1         ;test sign equal between operands and result
40e9 : 4505                     eor adrl
40eb : 1004                     bpl ckad1       ;no overflow occured - operand and result have same sign
40ed : 68                       pla
40ee : 0940                     ora #$40        ;set V
40f0 : 48                       pha
40f1 : 68               ckad1   pla
40f2 : 8507                     sta adrf        ;save expected flags
                        ; binary ADC / SBC zp
40f4 : 08                       php             ;save carry for subtract
40f5 : a503                     lda ad1
40f7 : 6504                     adc ad2         ;perform add
40f9 : 08                       php          
40fa : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
40fc : f003            >        beq skip3412
                       >        trap            ;failed not equal (non zero)
40fe : 206144          >        jsr sp4_trap_fail 
                       >
4101 :                 >skip3412
                        
4101 : 68                       pla             ;check flags
4102 : 29c3                     and #$c3        ;mask NV----ZC
4104 : c507                     cmp adrf
                                trap_ne         ;bad flags
4106 : f003            >        beq skip3414
                       >        trap            ;failed not equal (non zero)
4108 : 206144          >        jsr sp4_trap_fail 
                       >
410b :                 >skip3414
                        
410b : 28                       plp
410c : 08                       php             ;save carry for next add
410d : a503                     lda ad1
410f : e508                     sbc sb2         ;perform subtract
4111 : 08                       php          
4112 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
4114 : f003            >        beq skip3416
                       >        trap            ;failed not equal (non zero)
4116 : 206144          >        jsr sp4_trap_fail 
                       >
4119 :                 >skip3416
                        
4119 : 68                       pla             ;check flags
411a : 29c3                     and #$c3        ;mask NV----ZC
411c : c507                     cmp adrf
                                trap_ne         ;bad flags
411e : f003            >        beq skip3418
                       >        trap            ;failed not equal (non zero)
4120 : 206144          >        jsr sp4_trap_fail 
                       >
4123 :                 >skip3418
                        
4123 : 28                       plp
                        ; binary ADC / SBC abs
4124 : 08                       php             ;save carry for subtract
4125 : a503                     lda ad1
4127 : 6d0302                   adc ada2        ;perform add
412a : 08                       php          
412b : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
412d : f003            >        beq skip3420
                       >        trap            ;failed not equal (non zero)
412f : 206144          >        jsr sp4_trap_fail 
                       >
4132 :                 >skip3420
                        
4132 : 68                       pla             ;check flags
4133 : 29c3                     and #$c3        ;mask NV----ZC
4135 : c507                     cmp adrf
                                trap_ne         ;bad flags
4137 : f003            >        beq skip3422
                       >        trap            ;failed not equal (non zero)
4139 : 206144          >        jsr sp4_trap_fail 
                       >
413c :                 >skip3422
                        
413c : 28                       plp
413d : 08                       php             ;save carry for next add
413e : a503                     lda ad1
4140 : ed0402                   sbc sba2        ;perform subtract
4143 : 08                       php          
4144 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
4146 : f003            >        beq skip3424
                       >        trap            ;failed not equal (non zero)
4148 : 206144          >        jsr sp4_trap_fail 
                       >
414b :                 >skip3424
                        
414b : 68                       pla             ;check flags
414c : 29c3                     and #$c3        ;mask NV----ZC
414e : c507                     cmp adrf
                                trap_ne         ;bad flags
4150 : f003            >        beq skip3426
                       >        trap            ;failed not equal (non zero)
4152 : 206144          >        jsr sp4_trap_fail 
                       >
4155 :                 >skip3426
                        
4155 : 28                       plp
                        ; binary ADC / SBC #
4156 : 08                       php             ;save carry for subtract
4157 : a504                     lda ad2
4159 : 8d1302                   sta ex_adci+1   ;set ADC # operand
415c : a503                     lda ad1
415e : 201202                   jsr ex_adci     ;execute ADC # in RAM
4161 : 08                       php          
4162 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
4164 : f003            >        beq skip3428
                       >        trap            ;failed not equal (non zero)
4166 : 206144          >        jsr sp4_trap_fail 
                       >
4169 :                 >skip3428
                        
4169 : 68                       pla             ;check flags
416a : 29c3                     and #$c3        ;mask NV----ZC
416c : c507                     cmp adrf
                                trap_ne         ;bad flags
416e : f003            >        beq skip3430
                       >        trap            ;failed not equal (non zero)
4170 : 206144          >        jsr sp4_trap_fail 
                       >
4173 :                 >skip3430
                        
4173 : 28                       plp
4174 : 08                       php             ;save carry for next add
4175 : a508                     lda sb2
4177 : 8d1602                   sta ex_sbci+1   ;set SBC # operand
417a : a503                     lda ad1
417c : 201502                   jsr ex_sbci     ;execute SBC # in RAM
417f : 08                       php          
4180 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
4182 : f003            >        beq skip3432
                       >        trap            ;failed not equal (non zero)
4184 : 206144          >        jsr sp4_trap_fail 
                       >
4187 :                 >skip3432
                        
4187 : 68                       pla             ;check flags
4188 : 29c3                     and #$c3        ;mask NV----ZC
418a : c507                     cmp adrf
                                trap_ne         ;bad flags
418c : f003            >        beq skip3434
                       >        trap            ;failed not equal (non zero)
418e : 206144          >        jsr sp4_trap_fail 
                       >
4191 :                 >skip3434
                        
4191 : 28                       plp
                        ; binary ADC / SBC zp,x
4192 : 08                       php             ;save carry for subtract
4193 : a503                     lda ad1
4195 : 7500                     adc 0,x         ;perform add
4197 : 08                       php          
4198 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
419a : f003            >        beq skip3436
                       >        trap            ;failed not equal (non zero)
419c : 206144          >        jsr sp4_trap_fail 
                       >
419f :                 >skip3436
                        
419f : 68                       pla             ;check flags
41a0 : 29c3                     and #$c3        ;mask NV----ZC
41a2 : c507                     cmp adrf
                                trap_ne         ;bad flags
41a4 : f003            >        beq skip3438
                       >        trap            ;failed not equal (non zero)
41a6 : 206144          >        jsr sp4_trap_fail 
                       >
41a9 :                 >skip3438
                        
41a9 : 28                       plp
41aa : 08                       php             ;save carry for next add
41ab : a503                     lda ad1
41ad : f504                     sbc sb2-ad2,x   ;perform subtract
41af : 08                       php          
41b0 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
41b2 : f003            >        beq skip3440
                       >        trap            ;failed not equal (non zero)
41b4 : 206144          >        jsr sp4_trap_fail 
                       >
41b7 :                 >skip3440
                        
41b7 : 68                       pla             ;check flags
41b8 : 29c3                     and #$c3        ;mask NV----ZC
41ba : c507                     cmp adrf
                                trap_ne         ;bad flags
41bc : f003            >        beq skip3442
                       >        trap            ;failed not equal (non zero)
41be : 206144          >        jsr sp4_trap_fail 
                       >
41c1 :                 >skip3442
                        
41c1 : 28                       plp
                        ; binary ADC / SBC abs,x
41c2 : 08                       php             ;save carry for subtract
41c3 : a503                     lda ad1
41c5 : 7dff01                   adc ada2-ad2,x  ;perform add
41c8 : 08                       php          
41c9 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
41cb : f003            >        beq skip3444
                       >        trap            ;failed not equal (non zero)
41cd : 206144          >        jsr sp4_trap_fail 
                       >
41d0 :                 >skip3444
                        
41d0 : 68                       pla             ;check flags
41d1 : 29c3                     and #$c3        ;mask NV----ZC
41d3 : c507                     cmp adrf
                                trap_ne         ;bad flags
41d5 : f003            >        beq skip3446
                       >        trap            ;failed not equal (non zero)
41d7 : 206144          >        jsr sp4_trap_fail 
                       >
41da :                 >skip3446
                        
41da : 28                       plp
41db : 08                       php             ;save carry for next add
41dc : a503                     lda ad1
41de : fd0002                   sbc sba2-ad2,x  ;perform subtract
41e1 : 08                       php          
41e2 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
41e4 : f003            >        beq skip3448
                       >        trap            ;failed not equal (non zero)
41e6 : 206144          >        jsr sp4_trap_fail 
                       >
41e9 :                 >skip3448
                        
41e9 : 68                       pla             ;check flags
41ea : 29c3                     and #$c3        ;mask NV----ZC
41ec : c507                     cmp adrf
                                trap_ne         ;bad flags
41ee : f003            >        beq skip3450
                       >        trap            ;failed not equal (non zero)
41f0 : 206144          >        jsr sp4_trap_fail 
                       >
41f3 :                 >skip3450
                        
41f3 : 28                       plp
                        ; binary ADC / SBC abs,y
41f4 : 08                       php             ;save carry for subtract
41f5 : a503                     lda ad1
41f7 : 790401                   adc ada2-$ff,y  ;perform add
41fa : 08                       php          
41fb : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
41fd : f003            >        beq skip3452
                       >        trap            ;failed not equal (non zero)
41ff : 206144          >        jsr sp4_trap_fail 
                       >
4202 :                 >skip3452
                        
4202 : 68                       pla             ;check flags
4203 : 29c3                     and #$c3        ;mask NV----ZC
4205 : c507                     cmp adrf
                                trap_ne         ;bad flags
4207 : f003            >        beq skip3454
                       >        trap            ;failed not equal (non zero)
4209 : 206144          >        jsr sp4_trap_fail 
                       >
420c :                 >skip3454
                        
420c : 28                       plp
420d : 08                       php             ;save carry for next add
420e : a503                     lda ad1
4210 : f90501                   sbc sba2-$ff,y  ;perform subtract
4213 : 08                       php          
4214 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
4216 : f003            >        beq skip3456
                       >        trap            ;failed not equal (non zero)
4218 : 206144          >        jsr sp4_trap_fail 
                       >
421b :                 >skip3456
                        
421b : 68                       pla             ;check flags
421c : 29c3                     and #$c3        ;mask NV----ZC
421e : c507                     cmp adrf
                                trap_ne         ;bad flags
4220 : f003            >        beq skip3458
                       >        trap            ;failed not equal (non zero)
4222 : 206144          >        jsr sp4_trap_fail 
                       >
4225 :                 >skip3458
                        
4225 : 28                       plp
                        ; binary ADC / SBC (zp,x)
4226 : 08                       php             ;save carry for subtract
4227 : a503                     lda ad1
4229 : 6146                     adc (lo adi2-ad2,x) ;perform add
422b : 08                       php          
422c : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
422e : f003            >        beq skip3460
                       >        trap            ;failed not equal (non zero)
4230 : 206144          >        jsr sp4_trap_fail 
                       >
4233 :                 >skip3460
                        
4233 : 68                       pla             ;check flags
4234 : 29c3                     and #$c3        ;mask NV----ZC
4236 : c507                     cmp adrf
                                trap_ne         ;bad flags
4238 : f003            >        beq skip3462
                       >        trap            ;failed not equal (non zero)
423a : 206144          >        jsr sp4_trap_fail 
                       >
423d :                 >skip3462
                        
423d : 28                       plp
423e : 08                       php             ;save carry for next add
423f : a503                     lda ad1
4241 : e148                     sbc (lo sbi2-ad2,x) ;perform subtract
4243 : 08                       php          
4244 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
4246 : f003            >        beq skip3464
                       >        trap            ;failed not equal (non zero)
4248 : 206144          >        jsr sp4_trap_fail 
                       >
424b :                 >skip3464
                        
424b : 68                       pla             ;check flags
424c : 29c3                     and #$c3        ;mask NV----ZC
424e : c507                     cmp adrf
                                trap_ne         ;bad flags
4250 : f003            >        beq skip3466
                       >        trap            ;failed not equal (non zero)
4252 : 206144          >        jsr sp4_trap_fail 
                       >
4255 :                 >skip3466
                        
4255 : 28                       plp
                        ; binary ADC / SBC (abs),y
4256 : 08                       php             ;save carry for subtract
4257 : a503                     lda ad1
4259 : 714e                     adc (adiy2),y   ;perform add
425b : 08                       php          
425c : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
425e : f003            >        beq skip3468
                       >        trap            ;failed not equal (non zero)
4260 : 206144          >        jsr sp4_trap_fail 
                       >
4263 :                 >skip3468
                        
4263 : 68                       pla             ;check flags
4264 : 29c3                     and #$c3        ;mask NV----ZC
4266 : c507                     cmp adrf
                                trap_ne         ;bad flags
4268 : f003            >        beq skip3470
                       >        trap            ;failed not equal (non zero)
426a : 206144          >        jsr sp4_trap_fail 
                       >
426d :                 >skip3470
                        
426d : 28                       plp
426e : 08                       php             ;save carry for next add
426f : a503                     lda ad1
4271 : f150                     sbc (sbiy2),y   ;perform subtract
4273 : 08                       php          
4274 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
4276 : f003            >        beq skip3472
                       >        trap            ;failed not equal (non zero)
4278 : 206144          >        jsr sp4_trap_fail 
                       >
427b :                 >skip3472
                        
427b : 68                       pla             ;check flags
427c : 29c3                     and #$c3        ;mask NV----ZC
427e : c507                     cmp adrf
                                trap_ne         ;bad flags
4280 : f003            >        beq skip3474
                       >        trap            ;failed not equal (non zero)
4282 : 206144          >        jsr sp4_trap_fail 
                       >
4285 :                 >skip3474
                        
4285 : 28                       plp
4286 : 60                       rts
                        
                        ; target for the jump absolute test
4287 : 88                       dey
4288 : 88                       dey
4289 :                  test_far
4289 : 08                       php             ;either SP or Y count will fail, if we do not hit
428a : 88                       dey
428b : 88                       dey
428c : 88                       dey
428d : 28                       plp
                                trap_cs         ;flags loaded?
428e : 9003            >        bcc skip3476
                       >        trap            ;failed carry set
4290 : 206144          >        jsr sp4_trap_fail 
                       >
4293 :                 >skip3476
                        
                                trap_vs
4293 : 5003            >        bvc skip3478
                       >        trap            ;failed overflow set
4295 : 206144          >        jsr sp4_trap_fail 
                       >
4298 :                 >skip3478
                        
                                trap_mi
4298 : 1003            >        bpl skip3480
                       >        trap            ;failed minus (bit 7 set)
429a : 206144          >        jsr sp4_trap_fail 
                       >
429d :                 >skip3480
                        
                                trap_eq 
429d : d003            >        bne skip3482
                       >        trap           ;failed equal (zero)
429f : 206144          >        jsr sp4_trap_fail 
                       >
42a2 :                 >skip3482
                        
42a2 : c946                     cmp #'F'        ;registers loaded?
                                trap_ne
42a4 : f003            >        beq skip3484
                       >        trap            ;failed not equal (non zero)
42a6 : 206144          >        jsr sp4_trap_fail 
                       >
42a9 :                 >skip3484
                        
42a9 : e041                     cpx #'A'
                                trap_ne        
42ab : f003            >        beq skip3486
                       >        trap            ;failed not equal (non zero)
42ad : 206144          >        jsr sp4_trap_fail 
                       >
42b0 :                 >skip3486
                        
42b0 : c04f                     cpy #('R'-3)
                                trap_ne
42b2 : f003            >        beq skip3488
                       >        trap            ;failed not equal (non zero)
42b4 : 206144          >        jsr sp4_trap_fail 
                       >
42b7 :                 >skip3488
                        
42b7 : 48                       pha             ;save a,x
42b8 : 8a                       txa
42b9 : 48                       pha
42ba : ba                       tsx
42bb : e0fd                     cpx #$fd        ;check SP
                                trap_ne
42bd : f003            >        beq skip3490
                       >        trap            ;failed not equal (non zero)
42bf : 206144          >        jsr sp4_trap_fail 
                       >
42c2 :                 >skip3490
                        
42c2 : 68                       pla             ;restore x
42c3 : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
42c4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
42c6 : 48              >            pha         ;use stack to load status
42c7 : 28              >            plp
                        
42c8 : 68                       pla             ;restore a
42c9 : e8                       inx             ;return registers with modifications
42ca : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
42cc : 4cf009                   jmp far_ret
                                
                        ; target for the jump indirect test
42cf : 00                       align
42d0 : d942             ptr_tst_ind dw test_ind
42d2 : 780a             ptr_ind_ret dw ind_ret
                                trap            ;runover protection
42d4 : 206144          >        jsr sp4_trap_fail 
                        
42d7 : 88                       dey
42d8 : 88                       dey
42d9 :                  test_ind
42d9 : 08                       php             ;either SP or Y count will fail, if we do not hit
42da : 88                       dey
42db : 88                       dey
42dc : 88                       dey
42dd : 28                       plp
                                trap_cs         ;flags loaded?
42de : 9003            >        bcc skip3495
                       >        trap            ;failed carry set
42e0 : 206144          >        jsr sp4_trap_fail 
                       >
42e3 :                 >skip3495
                        
                                trap_vs
42e3 : 5003            >        bvc skip3497
                       >        trap            ;failed overflow set
42e5 : 206144          >        jsr sp4_trap_fail 
                       >
42e8 :                 >skip3497
                        
                                trap_mi
42e8 : 1003            >        bpl skip3499
                       >        trap            ;failed minus (bit 7 set)
42ea : 206144          >        jsr sp4_trap_fail 
                       >
42ed :                 >skip3499
                        
                                trap_eq 
42ed : d003            >        bne skip3501
                       >        trap           ;failed equal (zero)
42ef : 206144          >        jsr sp4_trap_fail 
                       >
42f2 :                 >skip3501
                        
42f2 : c949                     cmp #'I'        ;registers loaded?
                                trap_ne
42f4 : f003            >        beq skip3503
                       >        trap            ;failed not equal (non zero)
42f6 : 206144          >        jsr sp4_trap_fail 
                       >
42f9 :                 >skip3503
                        
42f9 : e04e                     cpx #'N'
                                trap_ne        
42fb : f003            >        beq skip3505
                       >        trap            ;failed not equal (non zero)
42fd : 206144          >        jsr sp4_trap_fail 
                       >
4300 :                 >skip3505
                        
4300 : c041                     cpy #('D'-3)
                                trap_ne
4302 : f003            >        beq skip3507
                       >        trap            ;failed not equal (non zero)
4304 : 206144          >        jsr sp4_trap_fail 
                       >
4307 :                 >skip3507
                        
4307 : 48                       pha             ;save a,x
4308 : 8a                       txa
4309 : 48                       pha
430a : ba                       tsx
430b : e0fd                     cpx #$fd        ;check SP
                                trap_ne
430d : f003            >        beq skip3509
                       >        trap            ;failed not equal (non zero)
430f : 206144          >        jsr sp4_trap_fail 
                       >
4312 :                 >skip3509
                        
4312 : 68                       pla             ;restore x
4313 : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
4314 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4316 : 48              >            pha         ;use stack to load status
4317 : 28              >            plp
                        
4318 : 68                       pla             ;restore a
4319 : e8                       inx             ;return registers with modifications
431a : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
431c : 6cd242                   jmp (ptr_ind_ret)
                                trap            ;runover protection
431f : 206144          >        jsr sp4_trap_fail 
                        
4322 : 4c0004                   jmp start       ;catastrophic error - cannot continue
                        
                        ; target for the jump subroutine test
4325 : 88                       dey
4326 : 88                       dey
4327 :                  test_jsr
4327 : 08                       php             ;either SP or Y count will fail, if we do not hit
4328 : 88                       dey
4329 : 88                       dey
432a : 88                       dey
432b : 28                       plp
                                trap_cs         ;flags loaded?
432c : 9003            >        bcc skip3514
                       >        trap            ;failed carry set
432e : 206144          >        jsr sp4_trap_fail 
                       >
4331 :                 >skip3514
                        
                                trap_vs
4331 : 5003            >        bvc skip3516
                       >        trap            ;failed overflow set
4333 : 206144          >        jsr sp4_trap_fail 
                       >
4336 :                 >skip3516
                        
                                trap_mi
4336 : 1003            >        bpl skip3518
                       >        trap            ;failed minus (bit 7 set)
4338 : 206144          >        jsr sp4_trap_fail 
                       >
433b :                 >skip3518
                        
                                trap_eq 
433b : d003            >        bne skip3520
                       >        trap           ;failed equal (zero)
433d : 206144          >        jsr sp4_trap_fail 
                       >
4340 :                 >skip3520
                        
4340 : c94a                     cmp #'J'        ;registers loaded?
                                trap_ne
4342 : f003            >        beq skip3522
                       >        trap            ;failed not equal (non zero)
4344 : 206144          >        jsr sp4_trap_fail 
                       >
4347 :                 >skip3522
                        
4347 : e053                     cpx #'S'
                                trap_ne        
4349 : f003            >        beq skip3524
                       >        trap            ;failed not equal (non zero)
434b : 206144          >        jsr sp4_trap_fail 
                       >
434e :                 >skip3524
                        
434e : c04f                     cpy #('R'-3)
                                trap_ne
4350 : f003            >        beq skip3526
                       >        trap            ;failed not equal (non zero)
4352 : 206144          >        jsr sp4_trap_fail 
                       >
4355 :                 >skip3526
                        
4355 : 48                       pha             ;save a,x
4356 : 8a                       txa
4357 : 48                       pha       
4358 : ba                       tsx             ;sp -4? (return addr,a,x)
4359 : e0fb                     cpx #$fb
                                trap_ne
435b : f003            >        beq skip3528
                       >        trap            ;failed not equal (non zero)
435d : 206144          >        jsr sp4_trap_fail 
                       >
4360 :                 >skip3528
                        
4360 : adff01                   lda $1ff        ;propper return on stack
4363 : c90a                     cmp #hi(jsr_ret)
                                trap_ne
4365 : f003            >        beq skip3530
                       >        trap            ;failed not equal (non zero)
4367 : 206144          >        jsr sp4_trap_fail 
                       >
436a :                 >skip3530
                        
436a : adfe01                   lda $1fe
436d : c9c9                     cmp #lo(jsr_ret)
                                trap_ne
436f : f003            >        beq skip3532
                       >        trap            ;failed not equal (non zero)
4371 : 206144          >        jsr sp4_trap_fail 
                       >
4374 :                 >skip3532
                        
                                set_stat $ff
                       >            load_flag $ff
4374 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4376 : 48              >            pha         ;use stack to load status
4377 : 28              >            plp
                        
4378 : 68                       pla             ;pull x,a
4379 : aa                       tax
437a : 68                       pla
437b : e8                       inx             ;return registers with modifications
437c : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
437e : 60                       rts
                                trap            ;runover protection
437f : 206144          >        jsr sp4_trap_fail 
                        
4382 : 4c0004                   jmp start       ;catastrophic error - cannot continue
                                
                        ;trap in case of unexpected IRQ, NMI, BRK, RESET - BRK test target
4385 :                  nmi_trap
                                trap            ;check stack for conditions at NMI
4385 : 206144          >        jsr sp4_trap_fail 
                        
4388 : 4c0004                   jmp start       ;catastrophic error - cannot continue
438b :                  res_trap
                                trap            ;unexpected RESET
438b : 206144          >        jsr sp4_trap_fail 
                        
438e : 4c0004                   jmp start       ;catastrophic error - cannot continue
                                
4391 : 88                       dey
4392 : 88                       dey
4393 :                  irq_trap                ;BRK test or unextpected BRK or IRQ
4393 : 08                       php             ;either SP or Y count will fail, if we do not hit
4394 : 88                       dey
4395 : 88                       dey
4396 : 88                       dey
                                ;next traps could be caused by unexpected BRK or IRQ
                                ;check stack for BREAK and originating location
                                ;possible jump/branch into weeds (uninitialized space)
4397 : c9bd                     cmp #$ff-'B'    ;BRK pass 2 registers loaded?
4399 : f05a                     beq break2
439b : c942                     cmp #'B'        ;BRK pass 1 registers loaded?
                                trap_ne
439d : f003            >        beq skip3539
                       >        trap            ;failed not equal (non zero)
439f : 206144          >        jsr sp4_trap_fail 
                       >
43a2 :                 >skip3539
                        
43a2 : e052                     cpx #'R'
                                trap_ne        
43a4 : f003            >        beq skip3541
                       >        trap            ;failed not equal (non zero)
43a6 : 206144          >        jsr sp4_trap_fail 
                       >
43a9 :                 >skip3541
                        
43a9 : c048                     cpy #'K'-3
                                trap_ne
43ab : f003            >        beq skip3543
                       >        trap            ;failed not equal (non zero)
43ad : 206144          >        jsr sp4_trap_fail 
                       >
43b0 :                 >skip3543
                        
43b0 : 8500                     sta irq_a       ;save registers during break test
43b2 : 8601                     stx irq_x
43b4 : ba                       tsx             ;test break on stack
43b5 : bd0201                   lda $102,x
                                cmp_flag 0      ;break test should have B=1 & unused=1 on stack
43b8 : c930            >            cmp #(0      |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne         ; - no break flag on stack
43ba : f003            >        beq skip3546
                       >        trap            ;failed not equal (non zero)
43bc : 206144          >        jsr sp4_trap_fail 
                       >
43bf :                 >skip3546
                        
43bf : 68                       pla
                                cmp_flag intdis ;should have added interrupt disable
43c0 : c934            >            cmp #(intdis |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
43c2 : f003            >        beq skip3549
                       >        trap            ;failed not equal (non zero)
43c4 : 206144          >        jsr sp4_trap_fail 
                       >
43c7 :                 >skip3549
                        
43c7 : ba                       tsx
43c8 : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
43ca : f003            >        beq skip3551
                       >        trap            ;failed not equal (non zero)
43cc : 206144          >        jsr sp4_trap_fail 
                       >
43cf :                 >skip3551
                        
43cf : adff01                   lda $1ff        ;propper return on stack
43d2 : c90b                     cmp #hi(brk_ret0)
                                trap_ne
43d4 : f003            >        beq skip3553
                       >        trap            ;failed not equal (non zero)
43d6 : 206144          >        jsr sp4_trap_fail 
                       >
43d9 :                 >skip3553
                        
43d9 : adfe01                   lda $1fe
43dc : c91b                     cmp #lo(brk_ret0)
                                trap_ne
43de : f003            >        beq skip3555
                       >        trap            ;failed not equal (non zero)
43e0 : 206144          >        jsr sp4_trap_fail 
                       >
43e3 :                 >skip3555
                        
                                load_flag $ff
43e3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                        
43e5 : 48                       pha
43e6 : a601                     ldx irq_x
43e8 : e8                       inx             ;return registers with modifications
43e9 : a500                     lda irq_a
43eb : 49aa                     eor #$aa
43ed : 28                       plp             ;N=1, V=1, Z=1, C=1 but original flags should be restored
43ee : 40                       rti
                                trap            ;runover protection
43ef : 206144          >        jsr sp4_trap_fail 
                        
43f2 : 4c0004                   jmp start       ;catastrophic error - cannot continue
                                
43f5 :                  break2                  ;BRK pass 2        
43f5 : e0ad                     cpx #$ff-'R'
                                trap_ne        
43f7 : f003            >        beq skip3559
                       >        trap            ;failed not equal (non zero)
43f9 : 206144          >        jsr sp4_trap_fail 
                       >
43fc :                 >skip3559
                        
43fc : c0b1                     cpy #$ff-'K'-3
                                trap_ne
43fe : f003            >        beq skip3561
                       >        trap            ;failed not equal (non zero)
4400 : 206144          >        jsr sp4_trap_fail 
                       >
4403 :                 >skip3561
                        
4403 : 8500                     sta irq_a       ;save registers during break test
4405 : 8601                     stx irq_x
4407 : ba                       tsx             ;test break on stack
4408 : bd0201                   lda $102,x
                                cmp_flag $ff    ;break test should have B=1
440b : c9ff            >            cmp #($ff    |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne         ; - no break flag on stack
440d : f003            >        beq skip3564
                       >        trap            ;failed not equal (non zero)
440f : 206144          >        jsr sp4_trap_fail 
                       >
4412 :                 >skip3564
                        
4412 : 68                       pla
4413 : 0908                     ora #decmode    ;ignore decmode cleared if 65c02
                                cmp_flag $ff    ;actual passed flags
4415 : c9ff            >            cmp #($ff    |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
4417 : f003            >        beq skip3567
                       >        trap            ;failed not equal (non zero)
4419 : 206144          >        jsr sp4_trap_fail 
                       >
441c :                 >skip3567
                        
441c : ba                       tsx
441d : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
441f : f003            >        beq skip3569
                       >        trap            ;failed not equal (non zero)
4421 : 206144          >        jsr sp4_trap_fail 
                       >
4424 :                 >skip3569
                        
4424 : adff01                   lda $1ff        ;propper return on stack
4427 : c90b                     cmp #hi(brk_ret1)
                                trap_ne
4429 : f003            >        beq skip3571
                       >        trap            ;failed not equal (non zero)
442b : 206144          >        jsr sp4_trap_fail 
                       >
442e :                 >skip3571
                        
442e : adfe01                   lda $1fe
4431 : c950                     cmp #lo(brk_ret1)
                                trap_ne
4433 : f003            >        beq skip3573
                       >        trap            ;failed not equal (non zero)
4435 : 206144          >        jsr sp4_trap_fail 
                       >
4438 :                 >skip3573
                        
                                load_flag intdis
4438 : a904            >            lda #intdis             ;allow test to change I-flag (no mask)
                        
443a : 48                       pha      
443b : a601                     ldx irq_x
443d : e8                       inx             ;return registers with modifications
443e : a500                     lda irq_a
4440 : 49aa                     eor #$aa
4442 : 28                       plp             ;N=0, V=0, Z=0, C=0 but original flags should be restored
4443 : 40                       rti
                                trap            ;runover protection
4444 : 206144          >        jsr sp4_trap_fail 
                        
4447 : 4c0004                   jmp start       ;catastrophic error - cannot continue
                        
                            if report = 1
                                include "report.i65"
                            endif
                        
                        
                            include "sp4.i65"
                        ;custom functions to test for SP-4
                        
6000 =                  io_base = $6000
                        
6000 =                  io_display_0_addr = (io_base + 0)
6001 =                  io_display_1_addr = (io_base + 1)
6002 =                  io_display_2_addr = (io_base + 2)
                        
6003 =                  io_leds_addr = (io_base + 3)
                        
0055 =                  leds_init_pattern = $55
                        
00ff =                  leds_fail_pattern = $ff
0000 =                  leds_succ_pattern = $0
                        
444a :                  sp4_res_trap:
444a : 205044           	jsr sp4_init_io
444d : 4c0004           	jmp start
                        
                        
4450 :                  sp4_init_io:
4450 : a900             	lda	#0
                        	
4452 : 8d0060           	sta	io_display_0_addr
4455 : 8d0160           	sta	io_display_1_addr
4458 : 8d0260           	sta	io_display_2_addr
                        
445b : a955             	lda	#(leds_init_pattern)	
445d : 8d0360           	sta	io_leds_addr
                        
4460 : 60               	rts
                        
4461 :                  sp4_trap_fail:
4461 : 68               	pla
4462 : 8d0060           	sta	io_display_0_addr
                        	
4465 : 68               	pla
4466 : 8d0160           	sta	io_display_1_addr
                        
4469 : a9ff             	lda	#(leds_fail_pattern)
446b : 8d0360           	sta	io_leds_addr
                        
446e : 4c6e44           	jmp 	*
                        
                        
4471 :                  sp4_trap_success:
4471 : a500             	lda	+(leds_succ_pattern)
4473 : 8d0360           	sta	io_leds_addr
                        	
4476 : 4c7644           	jmp	*	
                        
                        
                        ;copy of data to initialize BSS segment
                            if load_data_direct != 1
                        zp_init
                        zps_    db  $80,1           ;additional shift pattern to test zero result & flag
                        zp1_    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
                        zp7f_   db  $7f             ;test pattern for compare
                        ;logical zeropage operands
                        zpOR_   db  0,$1f,$71,$80   ;test pattern for OR
                        zpAN_   db  $0f,$ff,$7f,$80 ;test pattern for AND
                        zpEO_   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
                        ind1_   dw  abs1            ;indirect pointer to pattern in absolute memory
                                dw  abs1+1
                                dw  abs1+2
                                dw  abs1+3
                                dw  abs7f
                        inw1_   dw  abs1-$f8        ;indirect pointer for wrap-test pattern
                        indt_   dw  abst            ;indirect pointer to store area in absolute memory
                                dw  abst+1
                                dw  abst+2
                                dw  abst+3
                        inwt_   dw  abst-$f8        ;indirect pointer for wrap-test store
                        indAN_  dw  absAN           ;indirect pointer to AND pattern in absolute memory
                                dw  absAN+1
                                dw  absAN+2
                                dw  absAN+3
                        indEO_  dw  absEO           ;indirect pointer to EOR pattern in absolute memory
                                dw  absEO+1
                                dw  absEO+2
                                dw  absEO+3
                        indOR_  dw  absOR           ;indirect pointer to OR pattern in absolute memory
                                dw  absOR+1
                                dw  absOR+2
                                dw  absOR+3
                        ;add/subtract indirect pointers
                        adi2_   dw  ada2            ;indirect pointer to operand 2 in absolute memory
                        sbi2_   dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
                        adiy2_  dw  ada2-$ff        ;with offset for indirect indexed
                        sbiy2_  dw  sba2-$ff
                        zp_end
                            if (zp_end - zp_init) != (zp_bss_end - zp_bss)   
                                ;force assembler error if size is different   
                                ERROR ERROR ERROR   ;mismatch between bss and zeropage data
                            endif 
                        data_init
                        ex_and_ and #0              ;execute immediate opcodes
                                rts
                        ex_eor_ eor #0              ;execute immediate opcodes
                                rts
                        ex_ora_ ora #0              ;execute immediate opcodes
                                rts
                        ex_adc_ adc #0              ;execute immediate opcodes
                                rts
                        ex_sbc_ sbc #0              ;execute immediate opcodes
                                rts
                        ;zps    db  $80,1           ;additional shift patterns test zero result & flag
                        abs1_   db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
                        abs7f_  db  $7f             ;test pattern for compare
                        ;loads
                        fLDx_   db  fn,fn,0,fz              ;expected flags for load
                        ;shifts
                        rASL_                               ;expected result ASL & ROL -carry
                        rROL_   db  0,2,$86,$04,$82,0
                        rROLc_  db  1,3,$87,$05,$83,1       ;expected result ROL +carry
                        rLSR_                               ;expected result LSR & ROR -carry
                        rROR_   db  $40,0,$61,$41,$20,0
                        rRORc_  db  $c0,$80,$e1,$c1,$a0,$80 ;expected result ROR +carry
                        fASL_                               ;expected flags for shifts
                        fROL_   db  fzc,0,fnc,fc,fn,fz      ;no carry in
                        fROLc_  db  fc,0,fnc,fc,fn,0        ;carry in 
                        fLSR_
                        fROR_   db  0,fzc,fc,0,fc,fz        ;no carry in
                        fRORc_  db  fn,fnc,fnc,fn,fnc,fn    ;carry in
                        ;increments (decrements)
                        rINC_   db  $7f,$80,$ff,0,1         ;expected result for INC/DEC
                        fINC_   db  0,fn,fn,fz,0            ;expected flags for INC/DEC
                        ;logical memory operand
                        absOR_  db  0,$1f,$71,$80           ;test pattern for OR
                        absAN_  db  $0f,$ff,$7f,$80         ;test pattern for AND
                        absEO_  db  $ff,$0f,$8f,$8f         ;test pattern for EOR
                        ;logical accu operand
                        absORa_ db  0,$f1,$1f,0             ;test pattern for OR
                        absANa_ db  $f0,$ff,$ff,$ff         ;test pattern for AND
                        absEOa_ db  $ff,$f0,$f0,$0f         ;test pattern for EOR
                        ;logical results
                        absrlo_ db  0,$ff,$7f,$80
                        absflo_ db  fz,fn,0,fn
                        data_end
                            if (data_end - data_init) != (data_bss_end - data_bss)
                                ;force assembler error if size is different   
                                ERROR ERROR ERROR   ;mismatch between bss and data
                            endif 
                        
                        vec_init
                                dw  nmi_trap
                                dw  res_trap
                                dw  irq_trap
                        vec_bss equ $fffa
                            endif                   ;end of RAM init data
                            
                            if (load_data_direct = 1) & (ROM_vectors = 1)  
fffa =                          org $fffa       ;vectors
fffa : 8543                     dw  nmi_trap
fffc : 4a44                     dw  sp4_res_trap	; for SP4, init IO and jump to start upon reset
fffe : 9343                     dw  irq_trap
                            endif
                        
fffa =                          end start
                                    
                        
No errors in pass 2.
Wrote binary from address $0000 through $ffff.
Total size 65536 bytes.
Program start address is at $0400 (1024).
